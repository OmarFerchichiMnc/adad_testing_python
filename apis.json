{
  "openapi": "3.0.0",
  "paths": {
    "/health": {
      "get": {
        "operationId": "getHealth",
        "summary": "Get Application Health Status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHealthHttpResponse"
                }
              }
            }
          },
          "503": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetHealthHttpResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Health Check"
        ]
      }
    },
    "/v1/acquirers/{acquirerId}/markets/{marketId}/change-pending-items-expiration-threshold": {
      "put": {
        "operationId": "changePendingItemsExpirationThresholdInAcquirerMarket",
        "summary": "Change pending items expiration threshold",
        "parameters": [
          {
            "name": "acquirerId",
            "required": true,
            "in": "path",
            "description": "Acquirer Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketId",
            "required": true,
            "in": "path",
            "description": "Market Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePendingItemsExpirationThresholdInAcquirerMarketRequestHTTPRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when pending items expiration threshold is updated successfully"
          },
          "400": {
            "description": "when acquirer id is not valid UUID</br>\n                  when market id is not valid UUID</br>\n                  when market is not associated to acquirer\n                "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when acquirer not found</br>\n                  when market is not found\n                "
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Acquirer"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources/{saleSourceId}/markets/{marketId}/change-pending-items-expiration-threshold": {
      "put": {
        "operationId": "changePendingItemsExpirationThreshold",
        "summary": "Change pending items expiration threshold",
        "parameters": [
          {
            "name": "saleSourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePendingItemsExpirationThresholdInSaleSourceMarketRequestHTTPRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when pending items expiration threshold is updated successfully"
          },
          "400": {
            "description": "when sale source id is not valid UUID</br>\n                      when market id is not valid UUID</br>\n                      when market is not associated to sale source\n                    "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when sale source not found</br>\n                      when market is not found\n                    "
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sale Source"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasource-types": {
      "get": {
        "operationId": "listDatasourceTypes",
        "summary": "List all available datasource types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasourceTypeHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Datasource Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources": {
      "get": {
        "operationId": "findDatasources",
        "summary": "Find available datasources",
        "parameters": [
          {
            "name": "datasourceTypeId",
            "required": false,
            "in": "query",
            "description": "Datasource type id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceTypeName",
            "required": false,
            "in": "query",
            "description": "Datasource type name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasourceHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Datasource"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources/{datasourceId}/markets": {
      "get": {
        "operationId": "listMarkets",
        "summary": "List available market related to datasource",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "description": "Data Source Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MarketHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Market"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources/{datasourceId}/change-naming-convention": {
      "put": {
        "operationId": "changeNamingConvention",
        "summary": "Change datasource naming convention",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeNamingConventionHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when datasource naming convention is updated successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when datasource is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Datasource"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources/{datasourceId}/markets/{marketId}/change-market-name": {
      "put": {
        "operationId": "changeMarketName",
        "summary": "Change market name",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "description": "Datasource Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketId",
            "required": true,
            "in": "path",
            "description": "market Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMarketNameHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when market name is updated successfully"
          },
          "400": {
            "description": "when market name is not valid or when the market name is empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when market is not found"
          },
          "422": {
            "description": "when the user provides the same existing market name"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Market"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources/{datasourceId}/markets/{marketId}/change-file-reception-missing-threshold": {
      "put": {
        "operationId": "changeFileReceptionMissingThreshold",
        "summary": "Change file reception missing threshold",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "description": "Datasource Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketId",
            "required": true,
            "in": "path",
            "description": "Market Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeFileReceptionMissingThresholdHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when file reception missing threshold is updated successfully"
          },
          "400": {
            "description": "when file reception missing threshold is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when market is not found"
          },
          "422": {
            "description": "when the user provides the same existing file reception missing threshold"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Market"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources/{datasourceId}/markets/{marketId}/change-file-reception-frequency": {
      "put": {
        "operationId": "changeFileReceptionFrequency",
        "summary": "Change file reception frequency",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "description": "Datasource Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketId",
            "required": true,
            "in": "path",
            "description": "Market Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeFileReceptionFrequencyHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when file reception frequency is updated successfully"
          },
          "400": {
            "description": "when market id is not valid or when the file reception frequency is empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when market is not found"
          },
          "422": {
            "description": "when the user provides the same existing file reception frequency"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Market"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources/{datasourceId}/markets/{marketId}/change-expiration-date": {
      "put": {
        "operationId": "changeExpirationDate",
        "summary": "Change market expiration date",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "description": "Data Source Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileReceptionConfigurationId",
            "required": true,
            "in": "path",
            "description": "File Reception Configuration Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeExpirationDateHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when market expiration date is updated successfully"
          },
          "400": {
            "description": "when market id is not valid.<br>\n                  when the expiration date does not have a valid format.<br>\n                  when the expiration date is before the current date."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when market is not found"
          },
          "422": {
            "description": "when the user provides the same existing expiration date"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Market"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources/{datasourceId}/markets/{marketId}/change-effective-date": {
      "put": {
        "operationId": "changeEffectiveDate",
        "summary": "Change effective date",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "description": "Datasource Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketId",
            "required": true,
            "in": "path",
            "description": "Market Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMarketEffectiveDateRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when file reception configuration effective date is updated successfully"
          },
          "400": {
            "description": "when market id is not valid.<br>\n                  when the market id is empty.<br>\n                  when the date provided is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when market is not found"
          },
          "422": {
            "description": "when the user provides the same existing effective date"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Market"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources/channel-types": {
      "get": {
        "operationId": "listSaleSourceChannelTypes",
        "summary": "List sale source channel types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSaleSourceChannelTypesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Sale Source"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources": {
      "post": {
        "operationId": "createSaleSource",
        "summary": "Create sale source",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSaleSourceHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the sale source is created successfully"
          },
          "400": {
            "description": "when the sale source id is invalid.<br>\n                  when the sale channel type id is invalid.<br>\n                  when the sale source channel type is empty.<br>\n                  when the sale source channel name is empty.<br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the sale channel type does not exist."
          },
          "409": {
            "description": "when sale source with same name already exist."
          },
          "500": {
            "description": "when an internal error occurred"
          }
        },
        "tags": [
          "Sale Source"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "get": {
        "operationId": "listSaleSources",
        "summary": "List sale sources",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSaleSourcesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Sale Source"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources/{saleSourceId}/markets": {
      "get": {
        "operationId": "listSaleSourceMarketsBySaleSourceId",
        "summary": "List sale source markets by sale source Id",
        "parameters": [
          {
            "name": "saleSourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaleSourceMarketsBySaleSourceIdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the sale source id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the sale source does not exist."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Sale Source"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/point-of-sales": {
      "post": {
        "operationId": "createPointOfSale",
        "summary": "Create point of sale",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePointOfSaleHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the point of sale is created successfully"
          },
          "400": {
            "description": "when the point of sale id is invalid.<br>\n                  when the default payment currency is invalid.<br>\n                  when the country is invalid.<br>\n                  when the sale source market id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the sale source market does not exist."
          },
          "409": {
            "description": "when there is already a point of sale with the same office Id."
          }
        },
        "tags": [
          "Point Of Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "get": {
        "operationId": "listPointOfSales",
        "summary": "List point of sales",
        "parameters": [
          {
            "name": "officeId",
            "required": false,
            "in": "query",
            "description": "Office id",
            "example": "FFDGDRY",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saleSourceId",
            "required": false,
            "in": "query",
            "description": "Sale source id",
            "example": "db6ba3c3-a499-46e8-acb6-c460e1b91cd0",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketName",
            "required": false,
            "in": "query",
            "description": "Market name",
            "example": "PAR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Point of sale id from where to start getting point of sales",
            "example": "01K47JFRRQK0GQ5HPE0D55GB8V",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Point of sale id from where to end getting point of sales",
            "example": "01K47JFRRQAG021ZV9C5R68EN7",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListPointOfSalesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when saleSourceId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when sale source with provided saleSourceId not exist"
          }
        },
        "tags": [
          "Point Of Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirers": {
      "get": {
        "operationId": "listAcquirers",
        "summary": "List acquirers",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAcquirersResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Acquirer"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createAcquirer",
        "summary": "Create acquirer",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAcquirerHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the acquirer is created successfully"
          },
          "400": {
            "description": "when the acquirer id is invalid.<br>\n                  when the acquirer name is empty.<br>\n                  when the acquirer sub account is empty.<br>\n                  when the acquirer default settlement currency is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "409": {
            "description": "when acquirer with same name already exist."
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Acquirer"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirers/{acquirerId}/markets": {
      "get": {
        "operationId": "listAcquirerMarketsByAcquirerId",
        "summary": "List acquirer markets by acquirerId",
        "parameters": [
          {
            "name": "acquirerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMarketsByAcquirerIdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when invalid input or missing parameters."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when acquirer is not found "
          }
        },
        "tags": [
          "Acquirer"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirer-merchants": {
      "post": {
        "operationId": "createAcquirerMerchant",
        "summary": "Create acquirer merchant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAcquirerMerchantHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the acquirer merchant is created successfully"
          },
          "400": {
            "description": "when the acquirer merchant id is invalid.<br>\n                  when the merchant id is empty.<br>\n                  when the default settlement currency is invalid.<br>\n                  when the default payment currency is invalid.<br>\n                  when the merchant company id is invalid.<br>\n                  when the country is invalid.<br>\n                  when the service type is empty.<br>\n                  when the acquirer market id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the acquirer market does not exist.<br>\n                  when the merchant does not exist.<br>\n                  when the merchant company does not exist."
          },
          "409": {
            "description": "when the acquirer merchant  mid is duplicated."
          }
        },
        "tags": [
          "Acquirer Merchant"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "get": {
        "operationId": "listAcquirerMerchants",
        "summary": "List acquirer merchants",
        "parameters": [
          {
            "name": "mid",
            "required": false,
            "in": "query",
            "description": "Mid",
            "example": "7001",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirerId",
            "required": false,
            "in": "query",
            "description": "Acquirer id",
            "example": "4de1c139-97fb-42ee-924f-141876a93cdf",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketName",
            "required": false,
            "in": "query",
            "description": "Market name",
            "example": "PAR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pointOfSaleId",
            "required": false,
            "in": "query",
            "description": "Point of sale id",
            "example": "01K47JFRQQJ4AMD3ZNNKSDG1AF",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Acquirer merchant id from where to start getting acquirer merchants",
            "example": "01K47JFRQQ7YR4BE7KCW4VAW3A",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Acquirer merchant id from where to end getting acquirer merchants",
            "example": "01K47JFRQQQ344DNCPAB1XMX55",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAcquirerMerchantsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when acquirerId has an invalid format <br>when pointOfSaleId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when acquirer with provided acquirerId not exist"
          }
        },
        "tags": [
          "Acquirer Merchant"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/datasources/{datasourceId}/file-reception-configurations": {
      "get": {
        "operationId": "listFileReceptionConfigurationsByDatasourceId",
        "summary": "List file reception configurations by datasource id",
        "parameters": [
          {
            "name": "datasourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFileReceptionConfigurationsByDatasourceIdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the datasourceId is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when datasource is not found. "
          }
        },
        "tags": [
          "File Reception Configuration"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirer-merchants/{acquirerMerchantId}/associate-point-of-sale": {
      "post": {
        "operationId": "associatePointOfSaleToAcquirerMerchant",
        "summary": "Associate point of sale to acquirer merchant",
        "parameters": [
          {
            "name": "acquirerMerchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociatePointOfSaleToAcquirerMerchantHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the point of sale is associated to an acquirer successfully"
          },
          "400": {
            "description": "when the  point of sale id is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the acquirer merchant does not exist"
          },
          "409": {
            "description": "when the point of sale id is already associated to the acquirer merchant"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Point Of Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/point-of-sales/{pointOfSaleId}": {
      "get": {
        "operationId": "getPointOfSaleById",
        "summary": "Get point of sale by id",
        "parameters": [
          {
            "name": "pointOfSaleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPointOfSaleByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the point of sale id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the point of sale does not exist."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Point Of Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/fx-rate-sources": {
      "get": {
        "operationId": "listFxRateSources",
        "summary": "List FX rate sources",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFxRateSourcesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Fx Rate Source"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/airlines": {
      "get": {
        "operationId": "listAirlines",
        "summary": "List airlines",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAirlinesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Airline"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/point-of-sales/{pointOfSaleId}/companies/{companyId}/associate": {
      "post": {
        "operationId": "associateCompanyToPointOfSale",
        "summary": "Associate company to point of sale",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pointOfSaleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when the company is associated to point of sale successfully"
          },
          "400": {
            "description": "when the point of sale id is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the point of sale does not exist"
          },
          "409": {
            "description": "when the company is already associated to point of sale"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Point Of Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/airlines/{airlineId}/companies": {
      "get": {
        "operationId": "listCompaniesByAirlineId",
        "summary": "List companies by airline id",
        "parameters": [
          {
            "name": "airlineId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListCompaniesByAirlineIdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when airline id invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when airline is not found "
          }
        },
        "tags": [
          "Airline"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/point-of-sales/{pointOfSaleId}/companies": {
      "get": {
        "operationId": "listCompaniesByPointOfSaleId",
        "summary": "List companies by point of sale id",
        "parameters": [
          {
            "name": "pointOfSaleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListCompaniesByPointOfSaleIdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the point of sale id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the point of sale does not exist."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Company"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/service-types": {
      "get": {
        "operationId": "listServiceTypes",
        "summary": "List service types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListServiceTypesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Service type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/companies/{companyId}": {
      "get": {
        "operationId": "getCompanyById",
        "summary": "Get company by id",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCompanyByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the company id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the company does not exist."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Company"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/pending-items-deletion-reasons": {
      "get": {
        "operationId": "listPendingItemsDeletionReasons",
        "summary": "List pending items deletion reasons",
        "parameters": [
          {
            "name": "itemType",
            "required": true,
            "in": "query",
            "description": "Item type",
            "example": "SALE / SETTLEMENT",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListPendingItemsDeletionReasonsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when item type is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Pending item deletion reason"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirer-merchants/{acquirerMerchantId}": {
      "get": {
        "operationId": "getAcquirerMerchantById",
        "summary": "Get acquirer merchant by id",
        "parameters": [
          {
            "name": "acquirerMerchantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAcquirerMerchantByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the acquirer merchant id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the acquirer merchant does not exist."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Acquirer Merchant"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/point-of-sale-merchant-mappings": {
      "get": {
        "operationId": "listPointOfSaleMerchantMapping",
        "summary": "List point of sale merchant mappings",
        "parameters": [
          {
            "name": "officeId",
            "required": false,
            "in": "query",
            "description": "Office id",
            "example": "FFDGDRY",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saleSourceId",
            "required": false,
            "in": "query",
            "description": "Sale source id",
            "example": "7788179c-e2b4-48df-9cc7-1459072f830b",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketName",
            "required": false,
            "in": "query",
            "description": "Market name",
            "example": "PAR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Point of sale id from where to start getting point of sales",
            "example": "01K47JFS3KVET3JCFCRP7EXTG6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Point of sale id from where to end getting point of sales",
            "example": "01K47JFS3KPAJK5EDBPECY0ZJK",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListPointOfSalesMerchantMappingResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Point Of Sale Merchant Mapping"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createPointOfSaleMerchantMappings",
        "summary": "Create point of sale",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePointOfSaleMerchantMappingHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the point of sale merchant mappings is created successfully"
          },
          "400": {
            "description": "when the point of sale merchant mappings id is invalid.<br>\n                  when the payment currency is invalid.<br>\n                  when the country is invalid.<br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Point Of Sale Merchant Mapping"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/fee-rules/{feeRuleId}": {
      "get": {
        "operationId": "getFeeRuleById",
        "summary": "Get Fee Rule By id",
        "parameters": [
          {
            "name": "feeRuleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFeeRuleByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when id is empty.<br>\n                  when id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Fee Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "put": {
        "operationId": "changeFeeRule",
        "summary": "Change global/market fee rule",
        "parameters": [
          {
            "name": "feeRuleId",
            "required": true,
            "in": "path",
            "description": "Fee Rule Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeFeeRuleHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when fee rule is updated successfully"
          },
          "400": {
            "description": "when fee value is percentage while fee type is fixed.<br>\n                  when fee value is greater than 100 while fee type fixed.<br>\n                  when fee value is negative.<br>\n                  when updating global fee rule and application condition is not provided.<br>\n                  when updating market fee rule and application condition is provided.<br>\n                  "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when fee rule is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Fee Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteMarketFeeRule",
        "summary": "Delete a market fee rule",
        "parameters": [
          {
            "name": "feeRuleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "when a  market fee rule is deleted sucessfully"
          },
          "400": {
            "description": "when the market fee rule id provided is empty or invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to acess this endpoint"
          },
          "404": {
            "description": "when the market fee rule to delete is not found"
          },
          "422": {
            "description": "when the fee rule to delete is not a market fee rule"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Fee Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/fee-rules": {
      "get": {
        "operationId": "getFeeRuleById",
        "summary": "Get Fee Rules",
        "parameters": [
          {
            "name": "marketId",
            "required": false,
            "in": "query",
            "description": "Market id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": false,
            "in": "query",
            "description": "Datasource id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetFeeRulesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when datasourceId is invalid.<br>\n                  when marketId is invalid.\n                  "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Fee Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createFeeRule",
        "summary": "Create Global or Market Fee Rule.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeeRuleHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when global/market fee rule is created successfully."
          },
          "400": {
            "description": "when the datasourceId and marketId are both provided.<br>\n                  when the datasourceId and marketId are both not provided.<br>\n                  when the datasourceId is invalid.<br>\n                  when the marketId is invalid.<br>\n                  when the application condtion is provided with marketId.<br>\n                  when fee type or value is not valid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the datasource does not exist.<br>\n                  when the market does not exist."
          },
          "409": {
            "description": "when a global fee rule with the same datasourceId already exist.<br>\n                  when a market fee rule with the same market Id already exist."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Fee Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlements/total-gross-amount": {
      "get": {
        "operationId": "getSumSettlements",
        "summary": "total gross amount of settlements",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Settlement id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketId",
            "required": false,
            "in": "query",
            "description": "Market id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "description": "Form Of Payment Code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementCurrency",
            "required": false,
            "in": "query",
            "description": "Settlement Currency : Submission currency code - ISO code ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateFrom",
            "required": false,
            "in": "query",
            "description": "Settlement start time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateTo",
            "required": false,
            "in": "query",
            "description": "Settlement end time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "description": "PNR Reference (standalone filter)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operatin id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "description": "Document number (standalone filter)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "atomStatus",
            "required": false,
            "in": "query",
            "description": "Atom status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXPIRED",
                  "PENDING",
                  "MATCHED",
                  "MATCHED_WITH_EXCEPTION"
                ]
              }
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Settlement id from where to start getting settlements",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Settlement id from where to end getting settlements",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "confirmationStatus",
            "required": false,
            "in": "query",
            "description": "Settlement confirmation status",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "enum": [
                  0,
                  1,
                  2
                ]
              }
            }
          },
          {
            "name": "isProvisionalConfirmedAssociated",
            "required": false,
            "in": "query",
            "description": "Indicates whether the provisional settlement is associated with a confirmed settlement or not, and vice versa",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "minAge",
            "required": false,
            "in": "query",
            "description": "The minimum age of a settlement from the settlement date to the present",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "description": "Settlement approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "description": "Settlement credit card bin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "description": "Settlement credit card four last digits",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "description": "Payment order reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "fop sub code",
            "example": "Mobile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "query",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "datasource id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "example": "FR",
            "description": "country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmountInAccountingCurrencyHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Settlement"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/files": {
      "get": {
        "operationId": "listFiles",
        "summary": "List files with filters",
        "parameters": [
          {
            "name": "marketId",
            "required": false,
            "in": "query",
            "description": "Market id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileStatus",
            "required": false,
            "in": "query",
            "description": "File status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXPECTED",
                  "LATE",
                  "MISSING",
                  "RECEIVED",
                  "SPAM"
                ]
              }
            }
          },
          {
            "name": "expectedFileReceptionDateFrom",
            "required": true,
            "in": "query",
            "description": "Expected file reception date from",
            "example": "2025-09-03T10:38:17.470Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expectedFileReceptionDateTo",
            "required": true,
            "in": "query",
            "description": "Expected file reception date to",
            "example": "2025-09-04T10:38:17.470Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileReceptionDateFrom",
            "required": false,
            "in": "query",
            "description": "File reception date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileReceptionDateTo",
            "required": false,
            "in": "query",
            "description": "File reception date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sanityCheckStatus",
            "required": false,
            "in": "query",
            "description": "Sanity check status",
            "schema": {
              "enum": [
                "ACCEPTED",
                "REJECTED",
                "NOT_EXECUTED"
              ],
              "type": "string"
            }
          },
          {
            "name": "duplicationCheckStatus",
            "required": false,
            "in": "query",
            "description": "Duplication check status",
            "schema": {
              "enum": [
                "NEW",
                "DUPLICATED",
                "FAKE_TWIN"
              ],
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "File id from where to start getting files",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "isRecovery",
            "required": false,
            "in": "query",
            "description": "File recovery status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fileReceptionConfigurationId",
            "required": false,
            "in": "query",
            "description": "File reception configuration id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "file id",
            "example": "01GAH3R3KKF4NXK3K89PJCGGRZ",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFilesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when fileReceptionDateFrom or fileReceptionDateTo are empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when market is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "File"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sales": {
      "get": {
        "operationId": "listSales",
        "summary": "list of sales",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Sale id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": false,
            "in": "query",
            "description": "Datasource id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "description": "PNR Reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operation id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateFrom",
            "required": false,
            "in": "query",
            "description": "Date Of Issuance From",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateTo",
            "required": false,
            "in": "query",
            "description": "Date Of Issuance To",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "description": "Form Of Payment Code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentCurrency",
            "required": false,
            "in": "query",
            "description": "Payment Currency",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "atomStatus",
            "required": false,
            "in": "query",
            "description": "Atom status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXPIRED",
                  "PENDING",
                  "MATCHED",
                  "MATCHED_WITH_EXCEPTION"
                ]
              }
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "description": "Sale Approval Code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "description": "Sale credit card bin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "description": "Sale credit card four last digits",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "fop sub code",
            "example": "Mobile",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSalesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when multiple standalone filters (pnrReference, fileName, documentNumber) exist at the same time.<br>\n                  when standalone filters and other filters exist at the same time.<br>\n                  when one of the filters has an invalid value."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when market id is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlements/{settlementId}": {
      "get": {
        "operationId": "getSettlementById",
        "summary": "Get Settlement by Id",
        "parameters": [
          {
            "name": "settlementId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when id is empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/settlements/{settlementId}": {
      "get": {
        "operationId": "getSettlementById",
        "summary": "Get settlement By id",
        "parameters": [
          {
            "name": "settlementId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSettlementByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when settlement id is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sales/total-gross-amount": {
      "get": {
        "operationId": "getSumSales",
        "summary": "total gross amount of sales",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Sale id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": false,
            "in": "query",
            "description": "Datasource id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "description": "PNR Reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operation id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateFrom",
            "required": false,
            "in": "query",
            "description": "Date Of Issuance From",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateTo",
            "required": false,
            "in": "query",
            "description": "Date Of Issuance To",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "description": "Form Of Payment Code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentCurrency",
            "required": false,
            "in": "query",
            "description": "Payment Currency",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "atomStatus",
            "required": false,
            "in": "query",
            "description": "Atom status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXPIRED",
                  "PENDING",
                  "MATCHED",
                  "MATCHED_WITH_EXCEPTION"
                ]
              }
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "description": "Sale Approval Code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "description": "Sale credit card bin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "description": "Sale credit card four last digits",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "fop sub code",
            "example": "Mobile",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmountInAccountingCurrencyHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sales/{saleId}": {
      "get": {
        "operationId": "getSaleById",
        "summary": "Get Sale by Id",
        "parameters": [
          {
            "name": "saleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when sale id is empty or sale id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when sale is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/sales/{saleId}": {
      "get": {
        "operationId": "getSaleById",
        "summary": "Get sale By id",
        "parameters": [
          {
            "name": "saleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSaleByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when sale id is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when sale is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlements": {
      "get": {
        "operationId": "listSettlements",
        "summary": "List settlements with advanced filters",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Settlement id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "marketId",
            "required": false,
            "in": "query",
            "description": "Market id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "description": "Form Of Payment Code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementCurrency",
            "required": false,
            "in": "query",
            "description": "Settlement Currency : Submission currency code - ISO code ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateFrom",
            "required": false,
            "in": "query",
            "description": "Settlement start time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateTo",
            "required": false,
            "in": "query",
            "description": "Settlement end time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "description": "PNR Reference (standalone filter)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operatin id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "description": "Document number (standalone filter)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "atomStatus",
            "required": false,
            "in": "query",
            "description": "Atom status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "EXPIRED",
                  "PENDING",
                  "MATCHED",
                  "MATCHED_WITH_EXCEPTION"
                ]
              }
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Settlement id from where to start getting settlements",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Settlement id from where to end getting settlements",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "confirmationStatus",
            "required": false,
            "in": "query",
            "description": "Settlement confirmation status",
            "schema": {
              "type": "array",
              "items": {
                "type": "number",
                "enum": [
                  0,
                  1,
                  2
                ]
              }
            }
          },
          {
            "name": "isProvisionalConfirmedAssociated",
            "required": false,
            "in": "query",
            "description": "Indicates whether the provisional settlement is associated with a confirmed settlement or not, and vice versa",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "minAge",
            "required": false,
            "in": "query",
            "description": "The minimum age of a settlement from the settlement date to the present",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "description": "Settlement approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "description": "Settlement credit card bin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "description": "Settlement credit card four last digits",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "description": "Payment order reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "fop sub code",
            "example": "Mobile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "query",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "datasource id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "example": "FR",
            "description": "country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettlementsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when multiple standalone filters (pnrReference, fileName, documentNumber) exist at the same time.<br>\n                  when standalone filters and other filters exist at the same time.<br>\n                  when one of the filters is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when market is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/rates-of-exchange": {
      "get": {
        "operationId": "ListRatesOfExchage",
        "summary": "List rates of exchange",
        "parameters": [
          {
            "name": "conversionDirection",
            "required": false,
            "in": "query",
            "description": "Conversion Direction",
            "schema": {
              "default": "TO_GLOBAL_CURRENCY",
              "enum": [
                "FROM_GLOBAL_CURRENCY",
                "TO_GLOBAL_CURRENCY"
              ],
              "type": "string"
            }
          },
          {
            "name": "date",
            "required": true,
            "in": "query",
            "description": "Date",
            "example": "2025-09-03T10:38:17.557Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListRatesOfExchangeResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the date provided is empty or not valid.<br>\n                  when the conversion direction provided is not valid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Rate Of Exchange"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sales/{saleId}/delete": {
      "post": {
        "operationId": "deleteSaleById",
        "summary": "Delete sale",
        "parameters": [
          {
            "name": "saleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSaleHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the expired sale is deleted successfully."
          },
          "400": {
            "description": "when sale id is empty or sale id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when sale is not found"
          },
          "422": {
            "description": "when sale is not expired"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlements/{settlementId}/delete": {
      "post": {
        "operationId": "deleteSettlementById",
        "summary": "Delete expired settlement",
        "parameters": [
          {
            "name": "settlementId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteSettlementHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the expired settlement is deleted successfully."
          },
          "400": {
            "description": "when settlement id is empty or settlement id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the settlement is not found"
          },
          "422": {
            "description": "when the settlement is not expired "
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-transactions/error-codes": {
      "get": {
        "operationId": "listErrorCodes",
        "summary": "List error codes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListErrorCodesHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-transactions": {
      "get": {
        "operationId": "listFailedTransactions",
        "summary": "List failed transactions",
        "parameters": [
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operation id",
            "example": "e443a72b-d58c-46ee-a784-a3d6a8633767",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Failed transaction id",
            "example": "ba8b43ee-6374-4958-b748-e5ae5e4f2b6b",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "required": false,
            "in": "query",
            "description": "File name",
            "example": "HOT_PAR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": false,
            "in": "query",
            "description": "Datasource name",
            "example": "f7c84be0-a8e9-442a-ab12-f8f82114bb90",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sanityCheckStatus",
            "required": false,
            "in": "query",
            "description": "Sanity check status",
            "example": "APPROVED",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "duplicationCheckStatus",
            "required": false,
            "in": "query",
            "description": "Duplication check status",
            "example": "NEW",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Failed transaction id from where to start getting failed transactions",
            "example": "01K47JFTCVJS1NXKJSZB5F647Y",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Failed transaction id from where to end getting failed transactions",
            "example": "01K47JFTCVX6QBSTB08TFGDQXV",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedTransactionsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed transactions with provided filters does not exist"
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-settlements": {
      "get": {
        "operationId": "listFailedSettlements",
        "summary": "List failed settlements",
        "parameters": [
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "example": "0459313902321",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "example": "P5Y1MN",
            "description": "PNR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "example": "45717360",
            "description": "First eight digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "example": "9920",
            "description": "Last four digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "example": "TN",
            "description": "country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": false,
            "in": "query",
            "example": "218d16fc-8254-4978-b1a8-90745591c965",
            "description": "datasourceId",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "settlement date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateTo",
            "required": false,
            "in": "query",
            "example": "2022-09-08T09:00:00.000Z",
            "description": "settlement date To",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "example": "DUPLICATED or ON_HOLD",
            "description": "settlement status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "errorCode",
            "required": false,
            "in": "query",
            "example": "Duplicated",
            "description": "Error code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Failed settlement id from where to start getting failed settlements",
            "example": "01K47JFTKBYJDMSJ57MRQV2DQP",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Failed settlement id from where to end getting failed settlements",
            "example": "01K47JFTKB4JYS79PPRPBCBNF9",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "operation id",
            "example": "01K47JFTKBYKN7FS8VD3MBW585",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "description": "Payment order reference",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedSettlementsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed settlements with provided filters does not exist"
          }
        },
        "tags": [
          "Settlement"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-transactions/{failedTransactionId}": {
      "get": {
        "operationId": "getFailedTransactionById",
        "summary": "Get failed transaction by id",
        "parameters": [
          {
            "name": "failedTransactionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetFailedTransactionByIdHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when id has an invalid format <br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed transaction with provided id does not exist"
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accepted-transactions/{acceptedTransactionId}": {
      "get": {
        "operationId": "getAcceptedTransactionById",
        "summary": "Get accepted transaction by id",
        "parameters": [
          {
            "name": "acceptedTransactionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetAcceptedTransactionByIdHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when id has an invalid format <br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when accepted transaction with provided id does not exist"
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-deposits/total-gross-amount": {
      "get": {
        "operationId": "getSumBankDeposits",
        "summary": "total gross bank deposits",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Bank deposit id",
            "example": "01K47JFTG1BRM378ZCW9VDN0VN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankDepositReference",
            "required": false,
            "in": "query",
            "description": "Bank deposit reference",
            "example": "TX123123153XT",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositCurrency",
            "required": false,
            "in": "query",
            "description": "Deposit currency",
            "example": "USD",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositDateFrom",
            "required": false,
            "in": "query",
            "description": "Deposit date from",
            "example": "2022-08-08T09:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositDateTo",
            "required": false,
            "in": "query",
            "description": "Deposit date to",
            "example": "2022-08-08T09:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankAccountNumber",
            "required": false,
            "in": "query",
            "description": "Bank Account Number.",
            "example": "123456789",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "operation",
            "example": "01JBKPPEB034R4RBSGS1SVAHT8",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "atomStatus",
            "required": false,
            "in": "query",
            "description": "Atom status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING"
                ]
              }
            }
          },
          {
            "name": "acquirer",
            "required": false,
            "in": "query",
            "description": "Acquirer Name",
            "example": "DPO",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmountInAccountingCurrencyHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when bank deposit id has an invalid format <br>when fileReceptionDateFrom or fileReceptionDateTo has an invalid format <br>when fileReceptionDate range is invalid <br>when depositDateFrom or depositDateTo has an invalid format <br>when depositDate range is invalid <br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Bank Deposit"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-deposits/{bankDepositId}": {
      "get": {
        "operationId": "getBankDepositById",
        "summary": "Get Bank Deposit By Id",
        "parameters": [
          {
            "name": "bankDepositId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBankDepositByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when bank deposit id is either empty or not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when bank deposit is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Deposit"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-deposits": {
      "get": {
        "operationId": "ListBankDeposits",
        "summary": "List bank deposits",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Bank deposit id",
            "example": "01K47JFTG1BRM378ZCW9VDN0VN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankDepositReference",
            "required": false,
            "in": "query",
            "description": "Bank deposit reference",
            "example": "TX123123153XT",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositCurrency",
            "required": false,
            "in": "query",
            "description": "Deposit currency",
            "example": "USD",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositDateFrom",
            "required": false,
            "in": "query",
            "description": "Deposit date from",
            "example": "2022-08-08T09:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositDateTo",
            "required": false,
            "in": "query",
            "description": "Deposit date to",
            "example": "2022-08-08T09:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankAccountNumber",
            "required": false,
            "in": "query",
            "description": "Bank Account Number.",
            "example": "123456789",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "operation",
            "example": "01JBKPPEB034R4RBSGS1SVAHT8",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "atomStatus",
            "required": false,
            "in": "query",
            "description": "Atom status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING"
                ]
              }
            }
          },
          {
            "name": "acquirer",
            "required": false,
            "in": "query",
            "description": "Acquirer Name",
            "example": "DPO",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Bank deposit id from where to start getting failed transactions",
            "example": "01K47JFTG1BF04ANEWDYWC9VQW",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Bank deposit id from where to end getting failed transactions",
            "example": "01K47JFTG15DDYCFK0DTXB8ZVR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListBankDepositsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when bank deposit id has an invalid format <br>when afterId has an invalid format <br>when beforeId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when depositDateFrom or depositDateTo has an invalid format <br>when depositDate range is invalid <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Bank Deposit"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-default-acquirer": {
      "post": {
        "operationId": "createSaleDefaultAcquirer",
        "summary": "create sale default acquirer",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the creation is done successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Sale default acquirer"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/files/{operationId}/recovery-url": {
      "get": {
        "operationId": "getFileRecoveryUrl",
        "summary": "get aws url",
        "parameters": [
          {
            "name": "operationId",
            "required": true,
            "in": "path",
            "description": "operation Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when operation id does not exist"
          }
        },
        "tags": [
          "File"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-sales": {
      "get": {
        "operationId": "listFailedSales",
        "summary": "List failed Sales",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "example": "01K47JFTND6YNXCS8HCK2AKBXT",
            "description": "Failed sale id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "example": "9920",
            "description": "Last four digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "example": "45717360",
            "description": "First eight digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "example": "0459313902321",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "example": "P5Y1MN",
            "description": "PNR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": false,
            "in": "query",
            "example": "1763f9db-47e6-48c3-b684-9f59daeb4e3f",
            "description": "datasource id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "example": "TN",
            "description": "country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateTo",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Failed sale id from where to start getting failed sales",
            "example": "01K47JFTNE3F5VN6ASZ34QTB7P",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Failed sale id from where to end getting failed sales",
            "example": "01K47JFTNEHVK1DJ8ER7DRS8A0",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "example": "DUPLICATED or ON_HOLD",
            "description": "sale status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "errorCode",
            "required": false,
            "in": "query",
            "example": "Duplicated",
            "description": "Error code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "required": false,
            "in": "query",
            "example": "sale_file.csv",
            "description": "name of file",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "operation",
            "example": "01JBKPPEB034R4RBSGS1SVAHT8",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedSalesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed sale with provided filters does not exist"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-bank-deposits": {
      "get": {
        "operationId": "listFailedBankDeposits",
        "summary": "List Failed Bank Deposits",
        "parameters": [
          {
            "name": "bankAccountNumber",
            "required": false,
            "in": "query",
            "example": "3835",
            "description": "Bank Account number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Deposit date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositDateTo",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Deposit date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Failed Bank Deposit id from where to start getting failed Bank Deposits",
            "example": "01K47JFTNVY0450B9KWN4N3KS5",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Failed Bank Deposit id from where to end getting failed Bank Deposits",
            "example": "01K47JFTNVHJP7GGJ6C4DSVQ5W",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "example": "Duplicate",
            "description": "bank deposit status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedBankDepositsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed bank deposit with provided filters does not exist"
          }
        },
        "tags": [
          "Bank Deposit"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/deleted-sales": {
      "get": {
        "operationId": "listDeletedSales",
        "summary": "List deleted sales",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Deleted sale id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "example": "9920",
            "description": "Last four digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "example": "45717360",
            "description": "First eight digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "example": "0459313902321",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "example": "P5Y1MN",
            "description": "PNR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "example": "CCAX",
            "description": "Form of payment code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateTo",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Deleted sale id from where to start getting deleted sales",
            "example": "01K47JFTR1GE6M2M1631KTWG8Q",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Deleted sale id from where to end getting deleted sales",
            "example": "01K47JFTR2WBNCD63R9AXG7CRW",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "paymentCurrency",
            "required": false,
            "in": "query",
            "description": "Payment currency",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operation id associated with the sale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionDateFrom",
            "required": false,
            "in": "query",
            "description": "Deletion date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionDateTo",
            "required": false,
            "in": "query",
            "description": "Deletion date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedBy",
            "required": false,
            "in": "query",
            "description": "User who deleted the sale",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "fop sub code",
            "example": "Mobile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "query",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "datasource id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "example": "FR",
            "description": "country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListDeletedSalesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when deleted sale with provided filters does not exist"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/deleted-settlements": {
      "get": {
        "operationId": "listDeletedSettlements",
        "summary": "List deleted settlements",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Deleted sale id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "example": "9920",
            "description": "Last four digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "example": "45717360",
            "description": "First eight digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "example": "0459313902321",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "example": "P5Y1MN",
            "description": "PNR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "example": "CCAX",
            "description": "Form of payment code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateTo",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentCurrency",
            "required": false,
            "in": "query",
            "description": "Payment currency",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operation id associated with the sale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionDateFrom",
            "required": false,
            "in": "query",
            "description": "Deletion date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionDateTo",
            "required": false,
            "in": "query",
            "description": "Deletion date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedBy",
            "required": false,
            "in": "query",
            "description": "User who deleted the sale",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "description": "Payment order reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "fop sub code",
            "example": "Mobile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirer",
            "required": false,
            "in": "query",
            "description": "Acquirer",
            "example": "AMEX",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Country",
            "example": "TUN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Settlement date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateTo",
            "required": false,
            "in": "query",
            "example": "2022-09-08T09:00:00.000Z",
            "description": "Settlement date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "query",
            "example": "01JZB8BXZVDJXH879KXP78R7X2",
            "description": "datasource id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Deleted sale id from where to start getting deleted sales",
            "example": "01K47JFTS27X1J1NRRPBRWPK3M",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Deleted sale id from where to end getting deleted sales",
            "example": "01K47JFTS2PA9RPX6Z7HKAN57E",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListDeletedSettlementsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when deleted settlement with provided filters does not exist"
          }
        },
        "tags": [
          "Settlement"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/deleted-sales/total-gross-amount": {
      "get": {
        "operationId": "getSumDeletedSales",
        "summary": "total gross amount of deleted sales",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Deleted sale id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "example": "9920",
            "description": "Last four digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "example": "45717360",
            "description": "First eight digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "example": "0459313902321",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "example": "P5Y1MN",
            "description": "PNR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "example": "CCAX",
            "description": "Form of payment code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateTo",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Deleted sale id from where to start getting deleted sales",
            "example": "01K47JFTR1GE6M2M1631KTWG8Q",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Deleted sale id from where to end getting deleted sales",
            "example": "01K47JFTR2WBNCD63R9AXG7CRW",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "paymentCurrency",
            "required": false,
            "in": "query",
            "description": "Payment currency",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operation id associated with the sale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionDateFrom",
            "required": false,
            "in": "query",
            "description": "Deletion date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionDateTo",
            "required": false,
            "in": "query",
            "description": "Deletion date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedBy",
            "required": false,
            "in": "query",
            "description": "User who deleted the sale",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "fop sub code",
            "example": "Mobile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "query",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "datasource id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "example": "FR",
            "description": "country",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmountInAccountingCurrencyHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/deleted-sales/{deletedSaleId}": {
      "get": {
        "operationId": "getSaleById",
        "summary": "Get deleted sale By id",
        "parameters": [
          {
            "name": "deletedSaleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDeletedSaleByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when sale id is invalid.<br>\n    when sale id is empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when deleted sale is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-sales/{failedSaleId}": {
      "get": {
        "operationId": "getFailedSaleById",
        "summary": "Get failed sale By id",
        "parameters": [
          {
            "name": "failedSaleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFailedSaleByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when sale id is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed sale is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sale"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-transactions/replay-on-hold": {
      "post": {
        "operationId": "replayOnHoldTransactions",
        "summary": "replay on hold transactions",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplayOnHoldTransactionsHttpRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "when the replay is done successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "409": {
            "description": "Error when replay is already executing"
          }
        },
        "tags": [
          "Transaction"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/payment-orders/{paymentOrderId}": {
      "get": {
        "operationId": "getPaymentOrderById",
        "summary": "Get payment order by id",
        "parameters": [
          {
            "name": "paymentOrderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPaymentOrderByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when no payment order is found for the given payment order id"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Payment Order"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/payment-orders": {
      "get": {
        "operationId": "listPaymentOrders",
        "summary": "List payment orders",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Payment order id",
            "example": "01K47JFTYGXSN66FNDSCSGEYSZ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirerId",
            "required": false,
            "in": "query",
            "description": "Acquirer id",
            "example": "f93c602e-8b56-409b-841a-108532a78746",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderDateFrom",
            "required": false,
            "in": "query",
            "description": "Date from where to start getting payment orders",
            "example": "2025-09-03T10:38:18.576Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderDateTo",
            "required": false,
            "in": "query",
            "description": "Date from where to end getting payment orders",
            "example": "2025-09-03T10:38:18.576Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "description": "Payment order reference",
            "example": "FRIDU55412",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankDepositReference",
            "required": false,
            "in": "query",
            "description": "bank deposit reference",
            "example": "FRIDU55412",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementCurrency",
            "required": false,
            "in": "query",
            "description": "settlement currency",
            "example": "EUR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Payment order id from where to start getting payment orders",
            "example": "01K47JFTYGCX480SVQP0GYV3MJ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "payment order id from where to end getting payment orders",
            "example": "01K47JFTYGE8TJKVEP0G31RRD8",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "atomStatus",
            "required": false,
            "in": "query",
            "description": "Atom status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PENDING"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListPaymentOrdersResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when id has an invalid format <br>when acquirerId has an invalid format <br>when creation date from/to has an invalid format <br>when creation date from/to provided without creation date to/from <br>when afterId and beforeId are both provided <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Payment Order"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-payment-orders": {
      "get": {
        "operationId": "listFailedPaymentOrders",
        "summary": "List failed payment orders",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Payment order id",
            "example": "01K47JFTYYXEWESEEJ644VHW3Q",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": false,
            "in": "query",
            "description": "Datasource id",
            "example": "32583015-a624-4d46-95f3-399b36411475",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderDateFrom",
            "required": false,
            "in": "query",
            "description": "Date from where to start getting payment orders",
            "example": "2025-09-03T10:38:18.590Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderDateTo",
            "required": false,
            "in": "query",
            "description": "Date from where to end getting payment orders",
            "example": "2025-09-03T10:38:18.590Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Payment order id from where to start getting payment orders",
            "example": "01K47JFTYY6TKM9EBCXVB982ER",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "payment order id from where to end getting payment orders",
            "example": "01K47JFTYZWSKWK1R7810N0NK7",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "example": "DUPLICATED or ON_HOLD",
            "description": "payment order failure status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "description": "Payment order reference",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedPaymentOrdersResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when id has an invalid format <br>when acquirerId has an invalid format <br>when generation date from/to has an invalid format <br>when generation date from/to provided without generation date to/from <br>when afterId and beforeId are both provided <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Payment Order"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-miscellaneous-fees": {
      "get": {
        "operationId": "listFailedMiscellaneousFees",
        "summary": "List failed miscellaneous fees",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Failed Miscellaneous fee id",
            "example": "01K47JFV0TWK94BAT56MRY3Z9H",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "query",
            "description": "datasource id",
            "example": "d2c4651e-2c21-4c79-81bc-2d2db8bcaba2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateFrom",
            "required": true,
            "in": "query",
            "description": "settlement Date From date from where to start getting failed miscellaneous fees",
            "example": "2025-09-03T10:38:18.651Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateTo",
            "required": true,
            "in": "query",
            "description": "settlement date to where to end getting failed miscellaneous fees",
            "example": "2025-09-03T10:38:18.651Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementCurrency",
            "required": false,
            "in": "query",
            "description": "Settlement Currency",
            "example": "EUR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "example": "ON_HOLD",
            "description": "miscellaneous fee status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feeCode",
            "required": false,
            "in": "query",
            "example": "Miscellaneous Fee",
            "description": "miscellaneous fee Code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "miscellaneous fee id from where to start getting miscellaneous fees",
            "example": "01K47JFV0VJGBFH0WRVGY77FV4",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "miscellaneous fee id from where to end getting miscellaneous fees",
            "example": "01K47JFV0V8XRYZYP75VF5TCD1",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedMiscellaneousFeesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when id has an invalid format <br>when acquirerId has an invalid format <br>when settlementCurrency has an invalid format <br>when creation date from/to has an invalid format <br>when creation date from/to provided without creation date to/from <br>when afterId and beforeId are both provided <br>when status has an invalid format <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Failed Miscellaneous Fees"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/miscellaneous-fees": {
      "get": {
        "operationId": "listMiscellaneousFees",
        "summary": "List miscellaneous fees",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Miscellaneous fee id",
            "example": "01K47JFV1814M6FP6J5YJJZ66A",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirerId",
            "required": false,
            "in": "query",
            "description": "Acquirer id",
            "example": "c565b7d5-50a5-4c30-a443-182a9237f8c6",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementCurrency",
            "required": false,
            "in": "query",
            "description": "Settlement currency",
            "example": "EUR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "feeCode",
            "required": false,
            "in": "query",
            "description": "Fee code",
            "example": "FEECODE",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Miscellaneous fee id from where to start getting miscellaneous fees",
            "example": "01K47JFV18QRX564CR8CW1TV8Y",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Miscellaneous fee id from where to end getting miscellaneous fees",
            "example": "01K47JFV18ENA1MNR71QD6KVKZ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "settlementDateFrom",
            "required": false,
            "in": "query",
            "description": "settlement date from where to start getting miscellaneous fee",
            "example": "2025-09-03T10:38:18.664Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateTo",
            "required": false,
            "in": "query",
            "description": "settlement date to where to start getting miscellaneous fee",
            "example": "2025-09-03T10:38:18.664Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "example": "AN5M-GHJK-DSLG",
            "description": "payment order",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMiscellaneousFeesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when id has an invalid format <br>when acquirerId has an invalid format <br>when settlementCurrency has an invalid format <br>when creation date from/to has an invalid format <br>when creation date from/to provided without creation date to/from <br>when afterId and beforeId are both provided <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Miscellaneous Feer"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-captures": {
      "get": {
        "operationId": "listFailedCaptures",
        "summary": "List failed captures",
        "parameters": [
          {
            "name": "fileReceptionDateFrom",
            "required": false,
            "in": "query",
            "example": "2024-09-30T23:00:00.000Z",
            "description": "Start of the file reception date range (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileReceptionDateTo",
            "required": false,
            "in": "query",
            "example": "2024-10-15T22:59:59.999Z",
            "description": "End of the file reception date range (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileReceptionConfigurationId",
            "required": false,
            "in": "query",
            "example": "c0409b45-c24c-4dda-8bb7-a1bdb45ff9bc",
            "description": "File reception configuration ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "captureDateFrom",
            "required": false,
            "in": "query",
            "example": "2024-09-30T23:00:00.000Z",
            "description": "Start of the capture date range (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "captureDateTo",
            "required": false,
            "in": "query",
            "example": "2024-10-15T22:59:59.999Z",
            "description": "End of the capture date range (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "example": "2125846953651",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "required": false,
            "in": "query",
            "example": "01K0NYPMPYT6Y0ZYZAFY0MXVAR",
            "description": "Operation Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "example": "55454",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "example": "696528",
            "description": "Credit card BIN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "example": "4544",
            "description": "Last four digits of the credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "example": "DUPLICATED",
            "description": "Status of the capture (e.g. DUPLICATED)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "example": "01JA59CBJBRNWDDDR9TJX8YJFH",
            "description": "Pagination cursor for fetching items after this ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "example": "01JA59CGKYETJYCWGYSDV20T51",
            "description": "Pagination cursor for fetching items before this ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "example": 10,
            "description": "Number of items per page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedCapturesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed capture with provided filters does not exist"
          }
        },
        "tags": [
          "failed captures"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/deleted-settlements/total-gross-amount": {
      "get": {
        "operationId": "getSumDeletedSettlements",
        "summary": "total gross amount of deleted settlements",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Deleted sale id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "example": "179812",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "example": "9920",
            "description": "Last four digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "example": "45717360",
            "description": "First eight digits of credit card",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "example": "0459313902321",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "example": "P5Y1MN",
            "description": "PNR",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "example": "CCAX",
            "description": "Form of payment code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateTo",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Payment date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentCurrency",
            "required": false,
            "in": "query",
            "description": "Payment currency",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "required": false,
            "in": "query",
            "description": "Operation id associated with the sale",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionDateFrom",
            "required": false,
            "in": "query",
            "description": "Deletion date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletionDateTo",
            "required": false,
            "in": "query",
            "description": "Deletion date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deletedBy",
            "required": false,
            "in": "query",
            "description": "User who deleted the sale",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "description": "Payment order reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "fop sub code",
            "example": "Mobile",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirer",
            "required": false,
            "in": "query",
            "description": "Acquirer",
            "example": "AMEX",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Country",
            "example": "TUN",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateFrom",
            "required": false,
            "in": "query",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Settlement date from",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateTo",
            "required": false,
            "in": "query",
            "example": "2022-09-08T09:00:00.000Z",
            "description": "Settlement date to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "datasourceId",
            "required": true,
            "in": "query",
            "example": "01JZB8BXZVDJXH879KXP78R7X2",
            "description": "datasource id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AmountInAccountingCurrencyHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Settlement"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matching-rules/{ruleId}/change-name": {
      "put": {
        "operationId": "changeMatchingRuleName",
        "summary": "Update a matching rule name",
        "parameters": [
          {
            "name": "ruleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMatchingRuleNameHttpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "when matching rule name is updated sucessfully"
          },
          "400": {
            "description": "when the matching rule name or id are empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when a matching rule with the given id does not exist"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matching-rules": {
      "get": {
        "operationId": "listMatchingRules",
        "summary": "List matching rules",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "query",
            "description": "ID of the matching stack where the matching rules are grouped.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMatchingRulesHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matching-rules/{ruleId}": {
      "get": {
        "operationId": "getMatchingRuleById",
        "summary": "Get matching rule by Id",
        "parameters": [
          {
            "name": "ruleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingRuleHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when matchingRule id is empty or matching rule id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when matching rule is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matching-stacks": {
      "get": {
        "operationId": "listMatchingStacks",
        "summary": "List matching stacks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMatchingStacksHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matching-stacks/{matchingStackId}": {
      "get": {
        "operationId": "getMatchingStackById",
        "summary": "Get matching stack by Id",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchingStackHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when matching stack id is empty or matching stack id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when matching stack is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteMatchingStack",
        "summary": "Delete a matching stack (Only Matching Stack with status \"DRAFT\" can be deleted)",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "when a matching stack is deleted sucessfully"
          },
          "400": {
            "description": "when the matching stack id provided is empty or invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to acess this endpoint"
          },
          "404": {
            "description": "when the matching stack to delete is not found"
          },
          "422": {
            "description": "when the matching stack to delete is not a draft"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "put": {
        "operationId": "changeMatchingStack",
        "summary": "Change a matching stack (Only Matching Stack with status \"DRAFT\" can be changed)",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMatchingStackHttpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "when a matching stack is changed successfully"
          },
          "400": {
            "description": "when the matching stack id provided is empty or invalid<br>\n                  when the list of rule ids provided is empty<br>\n                  when the rule ids provided are not valid<br>\n                  when the first rule id provided doesn't exactly have ONE_TO_ONE as link type"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the matching stack to change is not found<br>\n                  when the rule ids provided are not found"
          },
          "422": {
            "description": "when the matching stack to change is not a draft"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matching-stacks/{matchingStackId}/clone": {
      "post": {
        "operationId": "cloneMatchingStack",
        "summary": "Clone a matching stack",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "when a matching stack is cloned successfully"
          },
          "400": {
            "description": "when the matching stack id is empty or invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the matching stack to clone is not found"
          },
          "422": {
            "description": "when a draft or activating matching stack already exists"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matching-stacks/{matchingStackId}/activate": {
      "post": {
        "operationId": "activateMatchingStack",
        "summary": "Activate a matching stack (Only Matching Stack with status \"DRAFT\" can be activated, it becomes effective after a fixed delay)",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchingStackActivationHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when a matching stack is activated successfully"
          },
          "400": {
            "description": "when matching stack id is not valid.<br>\n                  when the matching stack id is empty.<br>\n                  when the effective date provided is empty.<br>\n                  when the effective date provided is old.<br>\n                  when the effective date provided is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the matching stack is not found"
          },
          "422": {
            "description": "when the matching stack id is not related to draft"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/advanced-matching/start": {
      "post": {
        "operationId": "startAdvancingMatching",
        "summary": "Start advanced matching",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the advanced matching starts successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to acess this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/advanced-matching": {
      "put": {
        "operationId": "rescheduleAdvancedMatching",
        "summary": "Reschedule advanced matching",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RescheduleAdvancedMatchingRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when advanced matching frequency is updated successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/potential-sales-and-settlements-molecules/regenerate": {
      "post": {
        "operationId": "regeneratePotentialSalesAndSettlementsMolecules",
        "summary": "Regenerate potential sales and settlements molecules",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the regeneration starts successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Potential Sales and Settlements Molecules"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/default-matching-hash/regenerate": {
      "post": {
        "operationId": "triggerDefaultMatchingHashRegeneration",
        "summary": "Trigger the regeneration of the default matching hash of unmatched sales and settlements",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the default matching hash regeneration was triggered successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Default Matching Hashes"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/potential-bank-deposits-and-payment-orders-molecules/regenerate": {
      "post": {
        "operationId": "regeneratePotentialBankDepositsAndPaymentOrdersMolecules",
        "summary": "Regenerate potential bank deposits and payment orders molecules",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the regeneration starts successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Potential Bank Deposits and Payment Orders Molecules"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/reconciliations/settlement-reconciliation-alerts": {
      "get": {
        "operationId": "listSettlementReconciliationAlerts",
        "summary": "List settlement reconciliation alerts with filters",
        "parameters": [
          {
            "name": "moleculeCreationDateFrom",
            "required": false,
            "in": "query",
            "description": "Molecule creation date from",
            "example": "2025-09-01T10:38:22.119Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moleculeCreationDateTo",
            "required": false,
            "in": "query",
            "description": "Molecule creation date to",
            "example": "2025-09-03T10:38:22.119Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "description": "Form of payment code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "description": "Document number: If this filter is provided the other filters are skipped",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moleculeStatus",
            "required": false,
            "in": "query",
            "schema": {
              "enum": [
                "AMOUNT_MISMATCH",
                "MCP_AMOUNT_MISMATCH"
              ],
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Settlement reconciliation alert id from where to start getting settlement reconciliation alerts",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "description": "PnrReference (Passenger Name Record) : If this filter is provided the other filters are skipped",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettlementReconciliationAlertsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when molecule creation date range is not fully provided.<br>\n                  when one of the filters has an invalid value."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-fee-alerts/{settlementFeeAlertId}/accept": {
      "post": {
        "operationId": "acceptSettlementFeeAlert",
        "summary": "Accept settlement fee alert by id",
        "parameters": [
          {
            "name": "settlementFeeAlertId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the settlement fee alert is successfully accepted"
          },
          "400": {
            "description": "when settlement fee alert id is empty or invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement fee alert is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-fee-alerts/{settlementFeeAlertId}/dispute": {
      "post": {
        "operationId": "disputeSettlementFeeAlert",
        "summary": "Dispute settlement fee alert by id",
        "parameters": [
          {
            "name": "settlementFeeAlertId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "When the settlement fee alert is successfully disputed"
          },
          "400": {
            "description": "when settlement fee alert id is empty or invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement fee alert is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-fee-alerts/{settlementFeeAlertId}": {
      "get": {
        "operationId": "getSettlementFeeAlertsById",
        "summary": "Get settlement fee alert rule by Id",
        "parameters": [
          {
            "name": "settlementFeeAlertId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementFeeAlertHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when settlement fee alert id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement fee alert is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/reconciliations/settlement-reconciliation-alerts-stats": {
      "get": {
        "operationId": "getSettlementReconciliationAlerts",
        "summary": "Get settlement reconciliation alerts",
        "parameters": [
          {
            "name": "moleculeCreationDateFrom",
            "required": true,
            "in": "query",
            "description": "Matching date From",
            "example": "2025-09-02T10:38:21.906Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moleculeCreationDateTo",
            "required": true,
            "in": "query",
            "description": "Matching date To",
            "example": "2025-09-03T10:38:21.907Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "moleculeStatus",
            "required": false,
            "in": "query",
            "description": "Settlement Reconciliation status",
            "schema": {
              "enum": [
                "AMOUNT_MISMATCH",
                "MCP_AMOUNT_MISMATCH"
              ],
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentCode",
            "required": false,
            "in": "query",
            "description": "Form of payment code",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSettlementReconciliationAlertsHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the molecule creation date range from/to provided is empty.<br>\n                  when one of the filters has an invalid value."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements/{moleculeId}": {
      "get": {
        "operationId": "getMatchingSalesAndSettlementsMoleculeById",
        "summary": "Get sales and settlements molecule by id",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSalesAndSettlementsMoleculeHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when id is not provided or empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when a molecule with the given id is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements/{moleculeId}/accept": {
      "post": {
        "operationId": "acceptSalesAndSettlements",
        "summary": "Accept sales and settlements molecule by id",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptSalesAndSettlementsHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the molecule is successfully accepted"
          },
          "400": {
            "description": "when molecule id is empty <br> when resolution reason id is empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when molecule is not found"
          },
          "422": {
            "description": "when molecule is already accepted"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements/{moleculeId}/dispute": {
      "post": {
        "operationId": "disputeSalesAndSettlements",
        "summary": "Dispute sales and settlements molecule discrepancy by id",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisputeSalesAndSettlementsHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the molecule is successfully disputed"
          },
          "400": {
            "description": "when molecule id is empty <br> when resolution reason id is empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when molecule is not found"
          },
          "422": {
            "description": "when molecule is already disputed or accepted"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements": {
      "get": {
        "operationId": "listMatchingSalesAndSettlements",
        "summary": "List sales and settlements molecules with filters",
        "parameters": [
          {
            "name": "creationDateFrom",
            "required": false,
            "in": "query",
            "description": "Creation date from",
            "example": "2025-09-01T10:38:22.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creationDateTo",
            "required": false,
            "in": "query",
            "description": "Creation date to",
            "example": "2025-09-03T10:38:22.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "id",
            "example": "01J3ZAAFBNM0FSCXMXAPEXNFPZ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reconciliationStatus",
            "required": false,
            "in": "query",
            "description": "reconciliationStatus",
            "example": "ACCEPTED",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isInstallmentPayment",
            "required": false,
            "in": "query",
            "description": "The molecule contains installments or not",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "matchingStatus",
            "required": false,
            "in": "query",
            "description": "The matching status of the molecule",
            "schema": {
              "enum": [
                "COMPLETE",
                "PARTIAL"
              ],
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "description": "Pnr Reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Molecule id from where to start getting molecules",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Molecule id from where to start getting molecules",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "areAllInstallmentsReceived",
            "required": false,
            "in": "query",
            "description": "Are all installments received or not",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSalesAndSettlementsMoleculeHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when createdDateStart is provided and createdDateEnd is not provided.<br>\n                  when createdDateEnd is provided and createdDateStart is not provided.<br>\n                  when createdDateStart or createdDateEnd is not valid.<br>\n                  when createdDateStart and the createdDateEnd are not in chronological order.<br>\n                  when the pnrReference provided is not valid.<br>\n                  when the matchingStatus provided is not valid.>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/status": {
      "get": {
        "operationId": "listSettlementDisputeStatus",
        "summary": "List settlement dispute status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettlementDisputeStatusResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/change-acquirer-dispute-id": {
      "put": {
        "operationId": "changeAcquirerDisputeId",
        "summary": "Change settlement dispute acquirer dispute id",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAcquirerDisputeIdHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when settlement dispute acquirer dispute id changed successfully"
          },
          "400": {
            "description": "when settlement dispute id is has no valid format <br>when settlement dispute status is not ON_GOING<br>when user id is not the owner of the settlement dispute"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/resolve": {
      "post": {
        "operationId": "resolveSettlementDispute",
        "summary": "Resolve settlement dispute",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveSettlementDisputeHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when settlement dispute is resolved successfully"
          },
          "400": {
            "description": "when settlement dispute id is has no valid format <br>when agreed upon amount greater than zero <br>when agreed upon amount greater less or equal than settlement dispute, dispute amount <br>when settlement dispute status is not ON_GOING<br>when user id is not the owner of the settlement dispute"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes": {
      "get": {
        "operationId": "listSettlementDispute",
        "summary": "List settlement dispute",
        "parameters": [
          {
            "name": "disputeId",
            "required": false,
            "in": "query",
            "description": "Settlement dispute reference id",
            "example": "ACFB-FGHJ-FFDL",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirerDisputeId",
            "required": false,
            "in": "query",
            "description": "Acquirer dispute id",
            "example": "avfbyt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "required": false,
            "in": "query",
            "description": "Owner",
            "example": "Toto",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "utcCreationDateFrom",
            "required": false,
            "in": "query",
            "description": "Creation date from at UTC",
            "example": "2023-11-09T12:08:32.614Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "utcCreationDateTo",
            "required": false,
            "in": "query",
            "description": "Creation date to at UTC",
            "example": "2023-11-10T12:08:32.614Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Status",
            "example": "NOT_STARTED",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirerId",
            "required": false,
            "in": "query",
            "description": "Acquirer id",
            "example": "5cf796c4-b1e9-4490-9e22-2da2bf8e07c4",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by",
            "example": "disputeAmount",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Page size",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettlementDisputesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the creation date range from/to provided is not valid.<br>\n    When dispute id has an invalid format.<br>\n    When status has an invalid format.<br>\n    When acquirer id has an invalid format.<br>\n    When page number is negative.<br>\n    When page size is less than one.<br>\n    When sort by has an invalid format."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}": {
      "get": {
        "operationId": "getSettlementDisputeBySettlementDisputeId",
        "summary": "Get settlement dispute by settlement dispute id",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetSettlementDisputeBySettlementDisputeIdHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "When settlement dispute id has an invalid format"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "When settlement dispute with the provided id is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/start": {
      "post": {
        "operationId": "startSettlementDispute",
        "summary": "Start settlement dispute",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when settlement dispute is started successfully"
          },
          "400": {
            "description": "when settlement dispute id has invalid format <br>when settlement dispute is already started<br>when the connected user is not allowed to start the settlement dispute"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist"
          },
          "422": {
            "description": "when settlement dispute grouping start day is not closed"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/details": {
      "get": {
        "operationId": "listSettlementDisputeDetails",
        "summary": "List settlement dispute details",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Settlement dispute detail id from where to start getting settlement dispute details",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Settlement dispute detail id from where to end getting settlement dispute details",
            "example": "01HF6MTJC4AHYRP3EKK9796JDA",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettlementDisputeDetailsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "When settlement dispute id has an invalid format.<br>\n    When after id or before id has an invalid format.<br>\n    When page size is not valid.<br>\n    When pagination fields are invalid.<br>\n    "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "When settlement dispute does not exist."
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/assign": {
      "post": {
        "operationId": "assignSettlementDispute",
        "summary": "assign setlment dipsute",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when settlement dispute is assigned successfully"
          },
          "400": {
            "description": "when settlement dispute id is has no valid format <br>when settlement dispute status is not NOT_STARTED <br>when user id is not the owner of the settlement dispute"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist"
          },
          "422": {
            "description": "when settlement dispute grouping start day is not closed"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/unassign": {
      "post": {
        "operationId": "unAssignSettlementDispute",
        "summary": "Unassign settlement dispute",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when settlement dispute is unassigned successfully"
          },
          "400": {
            "description": "when settlement dispute id is has no valid format <br>when settlement dispute status is not NOT_STARTED <br>when user id is not the owner of the settlement dispute <br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist"
          },
          "422": {
            "description": "when settlement dispute grouping start day is not closed"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/reject": {
      "post": {
        "operationId": "rejectSettlementDispute",
        "summary": "Reject settlement dispute",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when settlement dispute is rejected successfully"
          },
          "400": {
            "description": "when settlement dispute id has invalid format.<br>\n     when settlement dispute status is not started yet or already processed.<br>\n     when the connected user is not the owner of the settlement dispute."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/change-note": {
      "put": {
        "operationId": "changeNote",
        "summary": "Change settlement dispute note",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSettlementDisputeNoteHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when settlement dispute note changed successfully"
          },
          "400": {
            "description": "when settlement dispute id format is not valid<br>when settlement dispute status is not ON_GOING<br>when connected user is not the owner of the settlement dispute"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/{settlementDisputeId}/settlement-dispute-details/{settlementDisputeDetailId}/exclude": {
      "post": {
        "operationId": "excludeSettlementDisputeDetail",
        "summary": "exclude settlement dispute",
        "parameters": [
          {
            "name": "settlementDisputeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDisputeDetailId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when settlement dispute detail is excluded successfully"
          },
          "400": {
            "description": "when settlement dispute has invalid format <br>\n       when settlement dispute detail id has invalid format <br>\n       when settlement dispute status is not NOT_STARTED <br>\n       when settlement dispute task count is not greater than one <br>\n       when user id is not the owner of the settlement dispute <br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist <br>\n       when settlement dispute detail  does not exist"
          },
          "422": {
            "description": "when settlement dispute grouping start day is not closed"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/installment-reconciliation-alerts/{installmentReconciliationAlertId}": {
      "get": {
        "operationId": "getInstallmentReconciliationAlertsById",
        "summary": "Get installment reconciliation alerts by id",
        "parameters": [
          {
            "name": "installmentReconciliationAlertId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstallmentReconciliationAlertsByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when id is not provided or empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when an installment reconciliation alert with the given id is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Installment reconciliation alert"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements/{moleculeId}/installment-payment-state": {
      "get": {
        "operationId": "getInstallmentPaymentStateByMoleculeId",
        "summary": "Get installment payment state for matched sales and settlements molecule",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstallmentPaymentStateByMoleculeIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the moleculeId is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when no sales and settlements molecule is found for the given moleculeId"
          },
          "422": {
            "description": "when the moleculeId provided is related to a sales and settlements molecule that does not contain installments"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-disputes/merge": {
      "post": {
        "operationId": "mergeSettlementDisputes",
        "summary": "Merge settlement disputes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeSettlementDisputesHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when settlement disputes are merged successfully"
          },
          "400": {
            "description": "when there is fewer than two settlement dipsutes to merge <br>when one of the settlement dispute ids has an invalid format <br>when the connected user is not the owner of the settlement disputes <br>when settlement dispute is on going or finished <br>When settlement disputes' acquirers are not the same <br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement dispute does not exist"
          }
        },
        "tags": [
          "Settlement Dispute"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements/{moleculeId}/installments": {
      "get": {
        "operationId": "listInstallmentsByMoleculeId",
        "summary": "List installments for matched sales and settlements molecule",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListInstallmentsByMoleculeIdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the moleculeId is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when no sales and settlements molecule is found for the given moleculeId"
          },
          "422": {
            "description": "when the moleculeId provided is related to a sales and settlements molecule that does not contain installments"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/installment-reconciliation-alerts/{installmentReconciliationAlertId}/dispute": {
      "post": {
        "operationId": "disputeInstallmentReconciliationAlert",
        "summary": "Dispute Installment Reconciliation Alert",
        "parameters": [
          {
            "name": "installmentReconciliationAlertId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisputeInstallmentReconciliationAlertHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when installment reconciliation alert disputed"
          },
          "400": {
            "description": "when task owner is not the connected user"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when installment reconciliation alert does not exist <br>when task does not exist <br>when unresolved task does not exist <br>"
          },
          "422": {
            "description": "when installment reconciliation alert already accepted or disputed <br>when task status is not assigned <br>"
          }
        },
        "tags": [
          "Installment reconciliation alert"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/installment-reconciliation-alerts/{installmentReconciliationAlertId}/accept": {
      "post": {
        "operationId": "acceptInstallmentReconciliationAlert",
        "summary": "Accept Installment Reconciliation Alert",
        "parameters": [
          {
            "name": "installmentReconciliationAlertId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AcceptInstallmentReconciliationAlertHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when installment reconciliation alert accepted"
          },
          "400": {
            "description": "when task owner is not the connected user"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when installment reconciliation alert does not exist <br>when task does not exist <br>when unresolved task does not exist <br>"
          },
          "422": {
            "description": "when installment reconciliation alert already accepted or disputed <br>when task status is not assigned <br>"
          }
        },
        "tags": [
          "Installment reconciliation alert"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-reconciliation-resolution-alert-reasons": {
      "get": {
        "operationId": "listSettlementReconciliationResolutionAlertReasons",
        "summary": "List settlement reconciliation resolution alert reasons",
        "parameters": [
          {
            "name": "discrepancySign",
            "required": true,
            "in": "query",
            "description": "Discrepancy sign",
            "example": "GAIN / LOSS",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "taskTypeId",
            "required": true,
            "in": "query",
            "description": "Task Type Id",
            "example": "5",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettlementReconciliationResolutionAlertReasonsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when discrepancy sign is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Reconciliation Resolution Alert Reason"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements/{moleculeId}/unmatch": {
      "post": {
        "operationId": "unmatchSalesAndSettlements",
        "summary": "unmatch sales and settlements",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when sales and settlements molecule is unmatched"
          },
          "400": {
            "description": "when sales and settlements molecule id has no valid format <br>when user id has no valid format <br>when sales and settlements molecule related task is already resolved <br>when sales and settlements molecule related task assignee is not the connected user"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/matched-sales-and-settlements/{moleculeId}": {
      "get": {
        "operationId": "getSalesAndSettlementsMoleculeById",
        "summary": "Get sales and settlements molecule by id",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSalesAndSettlementsMoleculeHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when id is not provided or empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when a molecule with the given id is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/tenant-settings/settlement-reconciliation": {
      "get": {
        "operationId": "getSettlementReconciliationTenantSettings",
        "summary": "Get settlement reconciliation tenant settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSettlementReconciliationTenantSettingsResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when settlement reconciliation tenant settings not exist"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/settlement-reconciliation/reschedule": {
      "post": {
        "operationId": "rescheduleSettlementReconciliation",
        "summary": "Reschedule settlement reconciliation advanced matching",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RescheduleSettlementReconciliationHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When settlement reconciliation has been rescheduled"
          },
          "400": {
            "description": "when advanced matching frequency is empty"
          },
          "401": {
            "description": "When no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "When the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Settlement Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/tenant-settings/settlement-reconciliation-thresholds": {
      "post": {
        "operationId": "changeSettlementReconciliationThresholdSettings",
        "summary": "Change settlement reconciliation Mono and MCP discrepancy thresholds",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSettlementReconciliationThresholdSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when settlement reconciliation thresholds are updated successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements/{moleculeId}/mark-as-complete": {
      "post": {
        "operationId": "markSalesAndSettlementsMoleculeAsComplete",
        "summary": "mark sales and settlements molecule as complete",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when sales and settlements molecule marked as complete"
          },
          "400": {
            "description": "when sales and settlements molecule id has no valid format"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "409": {
            "description": "when sales and settlements molecule is installment payment <br>when sales and settlements molecule is already locked <br>when sales and settlements molecule is already completed"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/settlement-reconciliation/start": {
      "post": {
        "operationId": "startAdvancedSettlementReconciliation",
        "summary": "Start settlement reconciliation",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the settlement reconciliation starts successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-sales-and-settlements/{moleculeId}/detach": {
      "post": {
        "operationId": "detachSalesAndSettlementsMolecule",
        "summary": "detach sales and settlements molecule",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetachSalesAndSettlementsMoleculeRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when sales and settlements molecule is detached"
          },
          "400": {
            "description": "when sales and settlements molecule id is empty <br>when sales and settlements molecule id is invalid <br>when detached sales or settlements ids are invalid <br>when detached sales or settlements ids are not included in the molecule in question <br>when the remaining sales and settlements molecule does not have any sales or settlements left <br>when the remaining sales and settlements molecule is not complete"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when sales and settlements molecule is not found <br>when sales and settlements potential molecule is not found"
          },
          "409": {
            "description": "when sales and settlements molecule is already locked <br>when sales and settlements molecule is already complete"
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-sales-and-settlements-molecules": {
      "get": {
        "operationId": "listFailedSalesAndSettlementsMolecules",
        "summary": "List failed sales and settlements molecule",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Failed sales and settlements molecule id",
            "example": "01K47JFZN9CGGJFT6XEGCZA4MB",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exceptionReasonIds",
            "required": false,
            "in": "query",
            "description": "Exception reasons ids",
            "example": [
              "PAYMENT_CURRENCY_MISMATCH"
            ],
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "creationDateFrom",
            "required": false,
            "in": "query",
            "description": "Failed sales and settlements molecule creationDateFrom: used for date range filter. If it's provided then the [creationDateTo] also should be provided",
            "example": "2025-09-02T10:38:23.401Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creationDateTo",
            "required": false,
            "in": "query",
            "description": "Failed sales and settlements molecule creationDateTo: used for date range filter. If it's provided then the [creationDateFrom] also should be provided",
            "example": "2025-09-04T10:38:23.401Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Failed sales and settlements molecule id from where to start getting failed sales and settlements molecules",
            "example": "01K47JFZN9CD0S72R13NDV985W",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Failed sales and settlements molecule id from where to end getting failed sales and settlements molecules",
            "example": "01K47JFZN92JSCHJN788SCS01S",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedSalesAndSettlementsMoleculesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when id has an invalid format <br>when afterId and beforeId are both provided in the query parameters <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed sales and settlements molecule with provided id not exist"
          }
        },
        "tags": [
          "Failed sales and settlements molecule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-sales-and-settlements-molecules/count": {
      "get": {
        "operationId": "getFailedSalesAndSettlementsMoleculesCount",
        "summary": "Get failed sales and settlements molecules count",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetFailedSalesAndSettlementsMoleculesCountHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Failed sales and settlements molecule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-exception-reasons": {
      "get": {
        "operationId": "listFailedExceptionReasons",
        "summary": "List failed exception reasons",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFailedExceptionReasonsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Failed Exception Reason"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-sales-and-settlements-molecules/{moleculeId}": {
      "get": {
        "operationId": "getFailedSalesAndSettlementsMoleculeById",
        "summary": "Get failed sales and settlements molecule by id",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetFailedSalesAndSettlementsMoleculeByIdHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when failed sales and settlements molecule id invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed sales and settlements molecule with provided id not exist"
          }
        },
        "tags": [
          "Failed sales and settlements molecule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/settlement-reconciliation-keys": {
      "get": {
        "operationId": "listSettlementReconciliationKeys",
        "summary": "List settlement reconciliation keys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettlementReconciliationKeysHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Settlement Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/settlement-reconciliation-matching-rules": {
      "post": {
        "operationId": "createMatchingRule",
        "summary": "Create matching rule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMatchingRuleHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when matching rule is created successfully"
          },
          "400": {
            "description": "when one of the matching rule required fields is empty or not provided"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "409": {
            "description": "when a matching rule with the given id already exists"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "get": {
        "operationId": "listMatchingRules",
        "summary": "List settlement reconciliation matching rules",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "query",
            "description": "ID of the matching stack where the matching rules are grouped.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettlementReconciliationMatchingRulesHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when no matching stack is found with the provided id"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/matched-sales-and-settlements": {
      "post": {
        "operationId": "matchManuallySalesAndSettlements",
        "summary": "Match manually sales ans settlements",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchManuallySalesAndSettlementsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the manual matching starts successfully"
          },
          "400": {
            "description": "when a sale/settlement is already matched.<br>\n                  when no sale or settlement id is provided"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when a sale does not exist.<br>\n                  when a settlement does not exist."
          },
          "409": {
            "description": "when sales have different transaction types <br>\n                  when settlements have different transaction types<br>\n                  when the minimum sale date is after the minimum settlement date<br>\n                  when sale transaction is refund and settlement is not refund debit."
          }
        },
        "tags": [
          "Matched sales and settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/settlement-reconciliation-matching-rules/{settlementReconciliationRuleId}": {
      "put": {
        "operationId": "changeMatchingRuleName",
        "summary": "Update a matching rule name",
        "parameters": [
          {
            "name": "settlementReconciliationRuleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeMatchingRuleNameHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when matching rule name is updated successfully"
          },
          "400": {
            "description": "when the matching rule name are empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when a matching rule with the given id does not exist"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "get": {
        "operationId": "getMatchingRuleById",
        "summary": "Get matching rule by Id",
        "parameters": [
          {
            "name": "settlementReconciliationRuleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMatchingRuleByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when matchingRule id is empty or matching rule id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when matching rule is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/{taskId}/assign": {
      "post": {
        "operationId": "assignTaskToUser",
        "summary": "Assign task to a given user",
        "parameters": [
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignTaskToUserHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the task is successfully assigned to user"
          },
          "400": {
            "description": "when the username provided is empty.<br>\n                  when the task is not available.<br>\n                  when the task type is not yet assigned to a team."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when taskId is not found"
          },
          "409": {
            "description": "when the assigner is not part of the team that handles this type of task.<br>\n                  when the assignee is not part of the team that handles this type of task."
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks": {
      "get": {
        "operationId": "listTasks",
        "summary": "List tasks with filters",
        "parameters": [
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Task status. Should be provided if the reference is not provided",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AVAILABLE",
                  "ASSIGNED",
                  "RESOLVED"
                ]
              }
            }
          },
          {
            "name": "assignee",
            "required": false,
            "in": "query",
            "description": "Task assignees",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Task type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BANK_DEPOSIT_RECONCILIATION_ALERT",
                  "CONFIRMED_DISCREPANCY_ALERT",
                  "INSTALLMENT_RECONCILIATION_ALERT",
                  "SALE_RECONCILIATION_ALERT",
                  "SETTLEMENT_FEE_DISCREPANCY_ALERT",
                  "SETTLEMENT_RECONCILIATION_ALERT",
                  "TRANSACTION_ON_HOLD"
                ]
              }
            }
          },
          {
            "name": "reference",
            "required": false,
            "in": "query",
            "description": "Task reference, a nano id. Standalone: if it is provided other filter should be empty",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creationDateFrom",
            "required": false,
            "in": "query",
            "description": "Task creationDateFrom: used for date range filter. If it's provided then the [creationDateTo] also should be provided",
            "example": "2025-09-02T10:38:22.793Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creationDateTo",
            "required": false,
            "in": "query",
            "description": "Task creationDateTo: used for date range filter. If it's provided then the [creationDateFrom] also should be provided",
            "example": "2025-09-04T10:38:22.793Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Page size. If not provided a default page size will be returned",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Task id used for pagination. If it is provided then the [afterId] should NOT be provided",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Task id used for pagination. If it is provided then the [beforeId] should NOT be provided",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Task category id could be 1 or 2 ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetTasksHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when only one of date range filter is provided.<br>\n                  when the pagination param are invalid or the status combination is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/count": {
      "get": {
        "operationId": "getTasksCount",
        "summary": "Get tasks count",
        "parameters": [
          {
            "name": "status",
            "required": true,
            "in": "query",
            "description": "Task status",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "AVAILABLE",
                  "ASSIGNED",
                  "RESOLVED"
                ]
              }
            }
          },
          {
            "name": "assignee",
            "required": false,
            "in": "query",
            "description": "Task assignee's username",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Task type",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "BANK_DEPOSIT_RECONCILIATION_ALERT",
                  "CONFIRMED_DISCREPANCY_ALERT",
                  "INSTALLMENT_RECONCILIATION_ALERT",
                  "SALE_RECONCILIATION_ALERT",
                  "SETTLEMENT_FEE_DISCREPANCY_ALERT",
                  "SETTLEMENT_RECONCILIATION_ALERT",
                  "TRANSACTION_ON_HOLD"
                ]
              }
            }
          },
          {
            "name": "creationDateFrom",
            "required": false,
            "in": "query",
            "description": "Task creationDateFrom: used for date range filter. If it's provided then the [creationDateTo] also should be provided",
            "example": "2025-09-02T10:38:22.745Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creationDateTo",
            "required": false,
            "in": "query",
            "description": "Task creationDateTo: used for date range filter. If it's provided then the [creationDateFrom] also should be provided",
            "example": "2025-09-04T10:38:22.745Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "required": false,
            "in": "query",
            "description": "Task category id could be 1 or 2 ",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTasksCountHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when a parameter is invalid.<br>\n                  when only one of date range filter is provided.<br>\n                  when the status combination is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/types": {
      "get": {
        "operationId": "listTaskTypes",
        "summary": "List task types associated to the groups of the connected user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListTaskTypesHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/types-teams": {
      "get": {
        "operationId": "listTaskTypesTeams",
        "summary": "List task types teams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListTaskTypesTeamsResponseHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/types/{taskTypeId}/users": {
      "get": {
        "operationId": "ListUsersByTaskType",
        "summary": "List users by task type id",
        "parameters": [
          {
            "name": "taskTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListUsersByTaskTypeResponseHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the task type is not yet assigned to a team."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/categories": {
      "get": {
        "operationId": "listTaskCategories",
        "summary": "List task categories",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListTaskCategoriesHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/{taskId}": {
      "get": {
        "operationId": "getTaskById",
        "summary": "Get task by Id",
        "parameters": [
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTaskByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when task id is empty.<br>\n                  when task id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when task is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/{taskId}/unassign": {
      "post": {
        "operationId": "unassignTask",
        "summary": "Unassign task",
        "parameters": [
          {
            "name": "taskId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when the task is successfully unassigned"
          },
          "400": {
            "description": "when the connected user is not allowed to unassign the task"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when taskId is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tasks/types-teams/{taskTypeId}/affiliate": {
      "post": {
        "operationId": "affiliateTaskTypeTeam",
        "summary": "Affiliate Team to Task Type",
        "parameters": [
          {
            "name": "taskTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AffiliateTaskTypeTeamRequestHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when team is affiliated to task type successfully"
          },
          "400": {
            "description": "when task type id format is not valid.<br>\n                  when task type id is empty."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when task type does not exist"
          }
        },
        "tags": [
          "Task"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/teams": {
      "get": {
        "operationId": "listTeams",
        "summary": "List teams",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListTeamsHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Team"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/reports/{reportId}": {
      "get": {
        "operationId": "getReportById",
        "summary": "Get Report by Id",
        "parameters": [
          {
            "name": "reportId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when report id is empty or report id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when report is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Report"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/reports": {
      "get": {
        "operationId": "listReports",
        "summary": "List reports",
        "parameters": [
          {
            "name": "generationDateFrom",
            "required": true,
            "in": "query",
            "description": "Report generation date from",
            "example": "2025-09-02T10:38:24.129Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "generationDateTo",
            "required": true,
            "in": "query",
            "description": "Report generation date to",
            "example": "2025-09-03T10:38:24.129Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportType",
            "required": false,
            "in": "query",
            "description": "Report Type",
            "schema": {
              "enum": [
                "DETAILED_JOURNAL_ENTRIES_REPORT",
                "ETL_CONFIGURATION",
                "FEE_BUSINESS_RULES",
                "FILES",
                "GENERAL_LEDGER",
                "MATCHED_ITEMS",
                "PENDING_SALES",
                "PENDING_SETTLEMENTS",
                "SETTLEMENT_RECONCILIATION_ALERTS",
                "TASKS",
                "TRIAL_BALANCE",
                "DETAILED_TRIAL_BALANCE_JOURNAL_ENTRIES",
                "DETAILED_IMBALANCED_JOURNAL_ENTRIES",
                "EXPIRED_SETTLEMENTS",
                "EXPIRED_SALES",
                "DELETED_SALES",
                "DELETED_SETTLEMENTS",
                "FAILED_SETTLEMENTS",
                "FAILED_SALES",
                "DETAILED_PAYMENT_ORDER",
                "OUTSTANDING_SALES_AGING_BY_ACQUIRER",
                "ACCOUNTING_RULES",
                "AUDIT_TRACK_SETTLEMENTS",
                "AUDIT_TRACK_PAYMENT_ORDERS",
                "AUDIT_TRACK_SALES"
              ],
              "type": "string"
            }
          },
          {
            "name": "status",
            "required": false,
            "in": "query",
            "description": "Report status",
            "schema": {
              "enum": [
                "READY",
                "PENDING",
                "FAILED"
              ],
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Report id from where to start getting reports",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of reports returned by page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListReportsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the report generation date from/to is empty.<br>\n                  when the report generation date from/to has not a valid format.<br>\n                  when the report generation date range provided is not valid.<br>\n                  when the report type is not valid.<br>\n                  when the status or the report is not valid.<br>\n                  when the page size is not valid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Report"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createReport",
        "summary": "Create Report.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReportHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the report is created and the generation is triggered/failed."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "422": {
            "description": "when a PENDING report already exists for the same report type and the same user"
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Report"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/reports": {
      "post": {
        "operationId": "createReport",
        "summary": "Create Report.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReportV2HttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the report is created and the generation is triggered/failed."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "422": {
            "description": "when a PENDING report already exists for the same report type and the same user"
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Report"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-rules/{accountingRuleId}/activate": {
      "post": {
        "operationId": "activateAccountingRule",
        "summary": "Activate an accounting rule (Only accounting rule with status \"DRAFT\" can be activated, it becomes effective after a fixed delay).",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when an accounting rule is activated successfully."
          },
          "400": {
            "description": "when accounting rule id is not valid.<br>\n                  when the accounting rule id is empty."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the accounting rule is not found."
          },
          "409": {
            "description": "when an accounting rule with the same eventId and filters already exist."
          },
          "422": {
            "description": "when the accounting rule is not DRAFT.<br>\n                  when the accounting rule does not have at least one accounting rule content."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-rules/{accountingRuleId}/contents/{accountingRuleContentId}": {
      "put": {
        "operationId": "changeAccountingRuleContent",
        "summary": "Change accounting rule content",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "description": "Parent accounting rule id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingRuleContentId",
            "required": true,
            "in": "path",
            "description": "Accounting rule content id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAccountingRuleContentHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the accounting rule content is changed successfully."
          },
          "400": {
            "description": "when the accounting rule id is empty.<br>\n                  when the accounting rule id is invalid.<br>\n                  when the accounting rule content id is empty.<br>\n                  when the accounting rule content id is invalid.<br>\n                  when the referential keys are invalid.<br>\n                  when the amount type is invalid.<br>\n                  when the sign is invalid.<br>\n                  when the percentage is invalid.<br>\n                  when the amount type is invalid.<br>\n                  when the amount type is not applicable for the accounting event.<br>\n                  when the list of referential keys contains more than 10 entries.<br>\n                  when the referential keys are not applicable for the accounting event."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the account does not exist in the chart of accounts.<br>\n                  when the parent accounting rule does not exist.<br>\n                  when the accounting rule content does not exist.<br>\n                  when the accounting event related to the parent accounting rule does not exist."
          },
          "409": {
            "description": "when an accounting rule content is duplicated (same sign, amount type, account number, percentage)."
          },
          "422": {
            "description": "when the parent accounting rule is not DRAFT."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteAccountingRuleContent",
        "summary": "Delete Accounting Rule Content.",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "description": "Accounting rule id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingRuleContentId",
            "required": true,
            "in": "path",
            "description": "Accounting rule content id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "when the accounting rule content is deleted successfully."
          },
          "400": {
            "description": "when the accounting rule content id provided is not valid.<br>\n                  when the accounting rule id is empty.<br>\n                  when the accounting rule id is not valid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the accounting rule content does not exist.<br>\n                  when the parent accounting rule does not exist.<br>"
          },
          "422": {
            "description": "when the parent accounting rule is not DRAFT."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-rules/{accountingRuleId}": {
      "put": {
        "operationId": "changeAccountingRule",
        "summary": "Change accounting rule",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "description": "Accounting Rule Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAccountingRuleHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when accounting rule is changed successfully"
          },
          "400": {
            "description": "when accounting rule id is invalid.<br>\n                  when accounting rule id is empty.<br>\n                  when the eventId is empty.<br>\n                  when the eventId is invalid.<br>\n                  when the eventType is empty.<br>\n                  when the eventType is invalid.<br>\n                  when the filters are invalid.<br>\n                  when the filters are not applicable for the event.\n                  "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when accounting rule is not found.<br>\n                  when accounting reference event is not found.<br>"
          },
          "422": {
            "description": "when the accounting rule is not DRAFT"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteAccountingRule",
        "summary": "Delete Accounting Rule.",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "description": "Accounting Rule Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "when the accounting rule and its accounting rule contests are deleted successfully."
          },
          "400": {
            "description": "when the accounting rule id provided is not valid.<br>\n                  when the accounting rule id is empty."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the accounting rule does not exist."
          },
          "422": {
            "description": "when the accounting rule to delete is not DRAFT."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/chart-of-accounts/{accountId}": {
      "put": {
        "operationId": "changeFeeRule",
        "summary": "Change account name",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "description": "Account Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeAccountNameHttpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "when account name is updated successfully"
          },
          "400": {
            "description": "when account id is invalid.<br>\n                  when account id is empty.<br>\n                  when account name is empty.\n                  "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when account is not found in the chart of accounts"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Chart Of Accounts"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/chart-of-accounts": {
      "post": {
        "operationId": "createAccount",
        "summary": "Create account",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when account is created successfully"
          },
          "400": {
            "description": "when account number is invalid.<br>\n                  when account number is empty.<br>\n                  when account name is empty.\n                  "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "409": {
            "description": "when the chart of accounts contains the same account number."
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Chart Of Accounts"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "get": {
        "operationId": "listChartOfAccounts",
        "summary": "List chart of accounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListChartOfAccountsHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Chart Of Accounts"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-rules/{accountingRuleId}/contents": {
      "post": {
        "operationId": "createAccountingRuleContent",
        "summary": "Create accounting rule content",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "description": "Parent accounting rule id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountingRuleContentHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the accounting rule content is created successfully."
          },
          "400": {
            "description": "when the accountingRuleContentId is invalid.<br>\n                  when the accountingRuleId is empty.<br>\n                  when the accountingRuleId is invalid.<br>\n                  when the referential keys are invalid.<br>\n                  when the amount type is invalid.<br>\n                  when the sign is invalid.<br>\n                  when the percentage is invalid.<br>\n                  when the amount type is invalid.<br>\n                  when the amount type is not applicable for the accounting event.<br>\n                  when the list of referential keys contains more than 10 entries.<br>\n                  when the referential keys are not applicable for the accounting event."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the account does not exist in the chart of accounts.<br>\n                  when the parent accounting rule does not exist.<br>\n                  when the accounting event related to the parent accounting rule does not exist."
          },
          "409": {
            "description": "when an accounting rule content with the same id already exist.<br>\n                  when an accounting rule content is duplicated (same sign, amount type, account number, percentage)."
          },
          "422": {
            "description": "when the parent accounting rule is not DRAFT."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "get": {
        "operationId": "listJournalEntries",
        "summary": "List accounting rule contents",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAccountingRuleContentsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the accounting rule id provided is not valid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the accounting rule id provided is not found."
          },
          "422": {
            "description": "when the parent accounting rule is INACTIVE."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-rules": {
      "post": {
        "operationId": "createAccountingRule",
        "summary": "Create accounting rule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountingRuleHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the accounting rule is created successfully."
          },
          "400": {
            "description": "when the eventId is empty.<br>\n                  when the eventId is invalid.<br>\n                  when the eventType is empty.<br>\n                  when the eventType is invalid.<br>\n                  when the filters are invalid.<br>\n                  when the filters are not applicable for the event."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the event does not exist."
          },
          "409": {
            "description": "when an accounting rule with the same id already exist."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "get": {
        "operationId": "listAccountingRules",
        "summary": "List accounting rules",
        "parameters": [
          {
            "name": "eventIds",
            "required": true,
            "in": "query",
            "description": "List of accounting event Ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "reference",
            "required": false,
            "in": "query",
            "description": "Accounting rule reference",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAccountingRulesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the list of event ids provided is empty.<br>\n                  when the reference provided is not valid.<br>\n                  when an event id provided is not valid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when an event id provided is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/unaccounted-events/count": {
      "get": {
        "operationId": "getUnaccountedEventsCount",
        "summary": "Get unaccounted events count",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUnaccountedEventsCountHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Unaccounted event"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-rules/{accountingRuleId}/inactivate": {
      "delete": {
        "operationId": "inactivateAccountingRule",
        "summary": "Inactivate Accounting Rule.",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "description": "Accounting Rule Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "when the accounting rule is inactivated successfully."
          },
          "400": {
            "description": "when the accounting rule id provided is not valid.<br>\n                  when the accounting rule id provided is empty."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "404": {
            "description": "when the accounting rule does not exist."
          },
          "422": {
            "description": "when the accounting rule is already INACTIVE.<br>\n                  when the accounting rule is not ACTIVE"
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-events": {
      "get": {
        "operationId": "listAccountingEvents",
        "summary": "List accounting events",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAccountingEventsHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting Event"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/journal-entries": {
      "get": {
        "operationId": "listJournalEntries",
        "summary": "List journal entries for a given sale, settlement or sales and settlements molecule",
        "parameters": [
          {
            "name": "saleId",
            "required": false,
            "in": "query",
            "description": "Sale id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementId",
            "required": false,
            "in": "query",
            "description": "Settlement id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "salesAndSettlementsMoleculeId",
            "required": false,
            "in": "query",
            "description": "Sales and settlements molecule id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListJournalEntriesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when sale id, settlement id or sales and settlements molecule id is invalid.<br>\n                  when multiple accounted item ids are provided.<br>\n                  when no accounted item id is provided."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when sale, settlement or matched item are not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/unaccounted-events": {
      "get": {
        "operationId": "listUnaccountedEvents",
        "summary": "List unaccounted events",
        "parameters": [
          {
            "name": "eventDateFrom",
            "required": false,
            "in": "query",
            "description": "Unaccounted event date from",
            "example": "2025-09-01T10:38:14.983Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventDateTo",
            "required": false,
            "in": "query",
            "description": "Unaccounted event date to",
            "example": "2025-09-03T10:38:14.983Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventReferenceIds",
            "required": false,
            "in": "query",
            "description": "List of accounting event reference Ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accountingFailureReasons",
            "required": false,
            "in": "query",
            "description": "List of event accounting failure reasons",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCOUNTING_RULE_NOT_FOUND",
                  "ACCOUNTING_RULE_OVERLAP"
                ]
              }
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Unaccounted Event id from where to start getting the list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Unaccounted Event id from where to end getting the list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListUnaccountedEventsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the list of event ids provided is empty.<br>\n                  when the event date range is not fullly provided.<br>\n                  when one of the filters has an invalid value."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when an accounting event reference id provided is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Unaccounted event"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting/accounting-year": {
      "get": {
        "operationId": "getAccountingYear",
        "summary": "Get Accounting Year",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountingYearHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the accounting year start parameter is missing"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting Year"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/unaccounted-events/accounting-failure-reasons": {
      "get": {
        "operationId": "getAccountingFailureReasons",
        "summary": "Get accounting failure reasons",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountingFailureReasonsResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Unaccounted event"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-periods": {
      "get": {
        "operationId": "listAccountingPeriods",
        "summary": "List accounting periods",
        "parameters": [
          {
            "name": "accountingYear",
            "required": true,
            "in": "query",
            "description": "Accounting year",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAccountingPeriodsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when accounting year filter has an invalid value."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting Period"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/general-ledgers/generation-status": {
      "get": {
        "operationId": "getGeneralLedgerGenerationStatus",
        "summary": "Get general ledger generation status list",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGeneralLedgerGenerationStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "General Ledger"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/general-ledgers": {
      "get": {
        "operationId": "listGeneralLedgers",
        "summary": "List general ledgers",
        "parameters": [
          {
            "name": "generationDateFrom",
            "required": false,
            "in": "query",
            "description": "Generation date from",
            "example": "2025-09-01T10:38:14.701Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "generationDateTo",
            "required": false,
            "in": "query",
            "description": "Generation date to",
            "example": "2025-09-03T10:38:14.701Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "generationStatus",
            "required": false,
            "in": "query",
            "description": "General ledger generation status",
            "schema": {
              "enum": [
                "IN_PROGRESS",
                "GENERATED",
                "FAILED"
              ],
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "General ledger id from where to start getting the list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "General ledger id from where to end getting the list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListGeneralLedgersHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the generation date range is not fully provided.<br>\n                  when the generation date range is invalid.<br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "General Ledger"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/general-ledgers/reschedule-general-ledger-generation": {
      "put": {
        "operationId": "rescheduleGeneralLedgerGeneration",
        "summary": "Reschedule general ledger generation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RescheduleGeneralLedgerGenerationHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when general ledger generation frequency is updated successfully"
          },
          "400": {
            "description": "when the general ledger generation frequency is empty.<br>\n                  when the general ledger generation frequency version is not found."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "General Ledger"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/general-ledgers/generate": {
      "post": {
        "operationId": "generateGeneralLEdger",
        "summary": "Generate general ledger",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the general ledger generation is triggered successfully"
          },
          "400": {
            "description": "when the general ledger generation frequency version is not found."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "General Ledger"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-filters": {
      "get": {
        "operationId": "listAccountingFilters",
        "summary": "List accounting filters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAccountingFiltersResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting Filter"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/journal-entries-balance-check/start": {
      "post": {
        "operationId": "startJournalEntriesBalanceCheck",
        "summary": "Start journal entries balance check",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when journal entries balance check started successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/trial-balance-entries": {
      "get": {
        "operationId": "listTrialBalanceEntires",
        "summary": "List Trial Balance Entries",
        "parameters": [
          {
            "name": "accountingDateFrom",
            "required": false,
            "in": "query",
            "example": "2024-09-18T07:13:35.928Z",
            "description": "Accounting Date From",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingDateTo",
            "required": false,
            "in": "query",
            "example": "2024-09-18T07:13:35.928Z",
            "description": "Accounting Date To",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "example": "AAAA-USD-EUR",
            "description": "After Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "example": "AAAA-USD-EUR",
            "description": "Before Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "example": "10",
            "description": "Page Size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "account",
            "required": false,
            "in": "query",
            "example": "1001919",
            "description": "account",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionCurrency",
            "required": false,
            "in": "query",
            "example": "EUR",
            "description": "Transaction currency",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListTrialBalanceEntriesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when accountingDateFrom filter has an invalid value, when accountingDateTo filter has an invalid value, when afterId filter has an invalid value, when beforeId filter has an invalid value, when pageSize filter has an invalid value."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/detailed-trial-balance-journal-entries": {
      "post": {
        "operationId": "extractDetailedTrialBalanceJournalEntries",
        "summary": "Extract detailed trial balance journal entries",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtractDetailedTrialBalanceJournalEntriesHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when detailed trial balance journal entries are extracted successfully"
          },
          "400": {
            "description": "when one of the required fields is missing or invalid.<br>\n                  when the provided dates are not valid.<br>\n                  when the account or currency fields are incorrectly formatted."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "422": {
            "description": "when Trial Balance Journal Entries Extraction Maximum Size Exceeded Error.<br>\n                  when Trial Balance Journal Entries No Data To Extract Error."
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/journal-entries": {
      "get": {
        "operationId": "listJournalEntries",
        "summary": "List journal entries for a given item",
        "parameters": [
          {
            "name": "saleId",
            "required": false,
            "in": "query",
            "description": "Sale id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementId",
            "required": false,
            "in": "query",
            "description": "Settlement id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "salesAndSettlementsMoleculeId",
            "required": false,
            "in": "query",
            "description": "Sales and settlements molecule id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankDepositId",
            "required": false,
            "in": "query",
            "description": "bank deposit id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderId",
            "required": false,
            "in": "query",
            "description": "payment order id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "miscellaneousFeeId",
            "required": false,
            "in": "query",
            "description": "miscellaneous fee id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bankDepositsAndPaymentOrdersMoleculeId",
            "required": false,
            "in": "query",
            "description": "bank deposit and payment orders molecule id used to retrieve its associated journal entries",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListJournalEntriesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when sale id, settlement id or sales and settlements molecule id, <br>\n                  payment order id, bankd deposit id, miscellaneous fee id, bank deposit and payment orders molecule id is invalid.<br>\n                  when multiple accounted item ids are provided.<br>\n                  when no accounted item id is provided."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when sale, settlement, payment order, bank deposit, miscellaneous fee or matched item are not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/closed-accounting-period-balance-calculation/start": {
      "post": {
        "operationId": "startClosedAccountingPeriodBalanceCalculation",
        "summary": "Start closed accounting period balance calculation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartClosedAccountingPeriodBalanceCalculationRequestHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when closed accounting period balance calculation successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/imbalanced-items": {
      "get": {
        "operationId": "listImbalancedItems",
        "summary": "List Imbalanced Items",
        "parameters": [
          {
            "name": "transactionDateFrom",
            "required": false,
            "in": "query",
            "example": "2024-09-18T07:13:35.928Z",
            "description": "Transaction Date From",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionDateTo",
            "required": false,
            "in": "query",
            "example": "2024-09-18T07:13:35.928Z",
            "description": "Transaction Date To",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEventReference",
            "required": false,
            "in": "query",
            "example": "01J82476V6H8D8S6FRRY5480M9",
            "description": "Accounting Event reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "example": "01J82476V6H8D8S6FRRY5480M9",
            "description": "After Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "example": "01J82476V6H8D8S6FRRY5480M9",
            "description": "Before Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "example": "10",
            "description": "Page Size",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "itemType",
            "required": false,
            "in": "query",
            "example": "1",
            "description": "Item type",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListImbalancedItemsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when transactionDateFrom filter has an invalid value. <br>\n      when transactionDateTo filter has an invalid value. <br>\n      when accountingEventReference filter has an invalid value. <br>\n      when transaction date range invalid value. <br>\n      when afterId filter has an invalid value. <br>\n      when beforeId filter has an invalid value. <br>\n      when pageSize filter has an invalid value. <br>\n      when itemType filter has an invalid value."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/imbalanced-journal-entries": {
      "get": {
        "operationId": "listJournalEntries",
        "summary": "List imbalanced journal entries for a given accounting event reference",
        "parameters": [
          {
            "name": "accountingEventReference",
            "required": true,
            "in": "query",
            "description": "Accounting event reference",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListImbalancedJournalEntriesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when accouting event reference is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting/item-types": {
      "get": {
        "operationId": "listItemTypes",
        "summary": "List item types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListItemTypesHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Accounting"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/journal-entries/undo": {
      "post": {
        "operationId": "undoJournalEntries",
        "summary": "undo journal entries",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndoJournalEntriesHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when journal entries are undone successfully"
          },
          "400": {
            "description": "when one of the required fields is invalid.<br>\n                  when the accounting Event Reference or accounting Rule Reference has an invalid format."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/journal-entries/{accountingEventReference}/undo": {
      "post": {
        "operationId": "undoJournalEntriesByAccountingEventReference",
        "summary": "undo journal entries by accounting event reference",
        "parameters": [
          {
            "name": "accountingEventReference",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndoJournalEntriesByAccountingEventReferenceHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when journal entries are undone successfully"
          },
          "400": {
            "description": "when the accounting Event Reference has an invalid format."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/journal-entries/{eventId}/undo-event": {
      "post": {
        "operationId": "undoJournalEntriesByEventId",
        "summary": "undo journal entries by event id",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndoJournalEntriesByEventIdHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when journal entries are undone successfully"
          },
          "400": {
            "description": "when the event id has an invalid format"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/journal-entries/undo-redo": {
      "post": {
        "operationId": "undoJournalEntries",
        "summary": "undo redo journal entries",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndoRedoJournalEntriesHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the journal entries undo redo is done successfully"
          },
          "400": {
            "description": "when one of the required fields is invalid.<br>\n      when the accounting Event Reference or accounting Rule Reference has an invalid format."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/journal-entries/{accountingEventReference}/undo-redo": {
      "post": {
        "operationId": "undoRedoJournalEntriesByAccountingEventReference",
        "summary": "undo redo journal entries by accounting event reference",
        "parameters": [
          {
            "name": "accountingEventReference",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when the journal entries undo redo is done successfully"
          },
          "400": {
            "description": "when the accounting Event Reference has an invalid format."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/journal-entries/{eventId}/undo-redo-event": {
      "post": {
        "operationId": "undoRedoJournalEntriesByEventId",
        "summary": "undo redo journal entries by event id",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UndoRedoJournalEntriesByEventIdHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when undo redo is done successfully"
          },
          "400": {
            "description": "when the event id has an invalid format"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/tenant-settings/accounting": {
      "get": {
        "operationId": "getAccountingTenantSettings",
        "summary": "Get accounting tenant settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountingTenantSettingsHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/daily-trial-balance-calculation/start": {
      "post": {
        "operationId": "startDailyTrialBalanceCalculation",
        "summary": "Start daily trial balance calculation",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when daily trial balance calculation started successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/unaccounted-events": {
      "get": {
        "operationId": "listUnaccountedEvents",
        "summary": "List unaccounted events",
        "parameters": [
          {
            "name": "eventDateFrom",
            "required": false,
            "in": "query",
            "description": "Unaccounted event date from",
            "example": "2025-09-01T10:38:15.012Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventDateTo",
            "required": false,
            "in": "query",
            "description": "Unaccounted event date to",
            "example": "2025-09-03T10:38:15.012Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventReferenceIds",
            "required": false,
            "in": "query",
            "description": "List of accounting event reference Ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "accountingFailureReasons",
            "required": false,
            "in": "query",
            "description": "List of event accounting failure reasons",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "ACCOUNTING_RULE_NOT_FOUND",
                  "ACCOUNTING_RULE_OVERLAP"
                ]
              }
            }
          },
          {
            "name": "itemId",
            "required": false,
            "in": "query",
            "description": "Item id of the unaccounted item",
            "example": "01JXZ66XSSDRVWWVR4YG8Y4B7K",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemType",
            "required": false,
            "in": "query",
            "example": "1",
            "description": "Item type of the unaccounted item",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Unaccounted Event id from where to start getting the list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Unaccounted Event id from where to end getting the list",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListUnaccountedEventsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the list of event ids provided is empty.<br>\n                  when the event date range is not fully provided.<br>\n                  when one of the filters has an invalid value."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when an accounting event reference id provided is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Unaccounted event"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-rules/{accountingRuleId}/clone": {
      "post": {
        "operationId": "cloneAccountingRule",
        "summary": "Clone an accounting rule",
        "parameters": [
          {
            "name": "accountingRuleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "when an accounting rule is cloned successfully"
          },
          "400": {
            "description": "when the id of the accounting rule to clone is not valid.<br>\n                  when the id of the accounting rule to clone is empty."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the accounting rule to clone is not found"
          },
          "422": {
            "description": "when the accounting rule to clone is not active"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-reconciliation-check/start": {
      "post": {
        "operationId": "startAccountingReconciliationCheck",
        "summary": "Start accounting reconciliation check",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when accounting reconciliation check started successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/accounting-reconciliation-types": {
      "get": {
        "operationId": "listAccountingReconciliationTypes",
        "summary": "List accounting reconciliation types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAccountingReconciliationTypesResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Accounting Reconciliation Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/chart-of-accounts/{accountId}": {
      "put": {
        "operationId": "changeChartOfAccount",
        "summary": "Change chart of accounts",
        "parameters": [
          {
            "name": "accountId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeChartOfAccountsHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when chart of account is updated successfully"
          },
          "400": {
            "description": "when chart of account account name is invalid.<br>\n                  when chart of account debit posting key is invalid.<br>\n                  when chart of account credit posting key is invalid..\n                  "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when chart of the account id does not exist.\n                  when the provided chart of account accounting reconciliation type id  does not exist"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Chart Of Accounts"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v2/chart-of-accounts": {
      "get": {
        "operationId": "listChartOfAccounts",
        "summary": "List chart of accounts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListChartOfAccountsHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Chart Of Accounts"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createChartOfAccount",
        "summary": "Create chart of accounts",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChartOfAccountsHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when chart of account is created successfully"
          },
          "400": {
            "description": "when chart of account account id key is invalid.<br>\n                  when chart of account account name is invalid.<br>\n                  when chart of account account number is invalid.<br>\n                  when chart of account accounting reconciliation type id key is invalid.<br>\n                  when chart of account debit posting key is invalid.<br>\n                  when chart of account credit posting key is invalid..\n                  "
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when chart of account accounting reconciliation type id  does not exist"
          },
          "409": {
            "description": "when a chart of accounts with the given account number already exists"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Chart Of Accounts"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/general-ledgers/regenerate-failed-general-ledger": {
      "post": {
        "operationId": "startFailedGeneralLedgerRegeneration",
        "summary": "Regenerate failed general ledger",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartFailedGeneralLedgerRegenerationHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the failed general ledger rgeneration is triggered successfully."
          },
          "400": {
            "description": "when the failed general ledger id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "General Ledger"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/general-ledger-generation-on-exception/start": {
      "post": {
        "operationId": "startGeneralLedgerGenerationOnException",
        "summary": "start general ledger generation on exception.",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when general ledger generation on exception started successfully."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired."
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint."
          },
          "500": {
            "description": "when an internal error occurs."
          }
        },
        "tags": [
          "Journal Entry"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/etl-state": {
      "get": {
        "operationId": "ListEtlState",
        "summary": "Get etl state",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Date Range From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Date Range To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEtlStatesHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the date range from/to provided is empty or not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/settlement-reconciliation": {
      "get": {
        "operationId": "getSettlementReconciliationStats",
        "summary": "Get settlement reconciliation stats",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Stats date From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Stats date To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSettlementReconciliationStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the date range from/to provided is empty or not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/bank-deposit-reconciliation": {
      "get": {
        "operationId": "getBankDepositReconciliationStats",
        "summary": "Get bank deposit reconciliation stats",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Stats date From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Stats date To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBankDepositReconciliationStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the date range from/to provided is empty or not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sales/{saleId}/audit": {
      "get": {
        "operationId": "getSaleAuditBySaleId",
        "summary": "Get sale audit",
        "parameters": [
          {
            "name": "saleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSaleAuditBySaleIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the sale id is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the sale is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Audit"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/sales": {
      "get": {
        "operationId": "getSalesStats",
        "summary": "Get sales stats",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Stats date From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Stats date To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSalesStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the date range from/to provided is empty or not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/bank-deposits": {
      "get": {
        "operationId": "getBankDepositsStats",
        "summary": "Get bank deposits stats",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Stats date From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Stats date To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBankDepositsStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the date range from/to provided is empty or not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/settlements": {
      "get": {
        "operationId": "getSettlementsStats",
        "summary": "Get settlements stats",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Stats date From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Stats date To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSettlementsStatsResponse"
                }
              }
            }
          },
          "400": {
            "description": "when date from or date to is empty.<br>\n                  when the date range is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/matched-settlements-by-acquirer": {
      "get": {
        "operationId": "listMatchedSettlementsByAcquirerStats",
        "summary": "List matched settlements by acquirer statistics in a specific date range",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Stats date From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Stats date To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMatchedSettlementsByAcquirerStatsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the [dateRangeFrom] and/or [dateRangeTo] are invalid.<br>\n                 when the date range is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/failed-sales/{failedSaleId}/audit": {
      "get": {
        "operationId": "getAuditTrackFailedSaleById",
        "summary": "failed sale audit track by id",
        "parameters": [
          {
            "name": "failedSaleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAuditTrackFailedSaleByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when id has an invalid format"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when failed sale with provided id does not exist"
          }
        },
        "tags": [
          "Audit"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/refresh": {
      "post": {
        "operationId": "RefreshKpis",
        "summary": "refresh kpis",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when refresh kpis is done successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "kpis refresh"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/historical-stats/refresh": {
      "post": {
        "operationId": "StartRefreshHistoricalKpis",
        "summary": "refresh historical kpis",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when refresh historical kpis is done successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "kpis refresh"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/outstanding-sales-per-fop": {
      "get": {
        "operationId": "getOutstandingSalesPerFop",
        "summary": "Get Outstanding Sale Per Fop",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Date Range From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Date Range To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOutstandingSalesPerFopHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the date range from/to provided is empty or not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tenant-settings/kpi": {
      "get": {
        "operationId": "getKpiTenantSettings",
        "summary": "Get kpi tenant settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKpiTenantSettingsHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/stats/outstanding-sales-per-acquirer": {
      "get": {
        "operationId": "getOutstandingSalesPerAcquirer",
        "summary": "Get Outstanding Sale Per Acquirer",
        "parameters": [
          {
            "name": "dateRangeFrom",
            "required": true,
            "in": "query",
            "description": "Date Range From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dateRangeTo",
            "required": true,
            "in": "query",
            "description": "Date Range To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOutstandingSalesPerAcquirerHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the date range from/to provided is empty or not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/cash-forecast": {
      "get": {
        "operationId": "listCashForecasts",
        "summary": "List cash forecast",
        "parameters": [
          {
            "name": "expectedSettlementDateFrom",
            "required": true,
            "in": "query",
            "description": "Expected Settlement Date From",
            "example": "2025-09-02T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expectedSettlementDateTo",
            "required": true,
            "in": "query",
            "description": "Expected Settlement Date To",
            "example": "2025-09-03T00:00:00.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirerName",
            "required": false,
            "in": "query",
            "description": "Acquirer Name",
            "example": "BDO",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementCurrency",
            "required": false,
            "in": "query",
            "description": "Expected Settlement Currency For The Sale",
            "example": "EUR",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListCashForecastsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the date range from/to provided is empty or not valid.\n                  when the settlement currency is not valid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Stats"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/item-history": {
      "get": {
        "operationId": "listItemHistoryByItemId",
        "summary": "List item history related to the item id",
        "parameters": [
          {
            "name": "itemId",
            "required": true,
            "in": "query",
            "description": "Item id",
            "example": "01JENP61WMPVWJJPACFHA0JD88",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemType",
            "required": true,
            "in": "query",
            "description": "Item type",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListItemHistoryByItemIdHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when item id is invalid or empty"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the item is not present in the database"
          }
        },
        "tags": [
          "Item History"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/audit-track/settled-status": {
      "get": {
        "operationId": "listSettledStatus",
        "summary": "List settled status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSettledStatusHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Settled Status"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/audit-track/banked-status": {
      "get": {
        "operationId": "listBankedStatus",
        "summary": "List banked status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListBankedStatusHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Banked Status"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/audit-track/settlements": {
      "get": {
        "operationId": "listSettlements",
        "summary": "List settlements with advanced filters",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Settlement id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateFrom",
            "required": true,
            "in": "query",
            "description": "Settlement start time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settlementDateTo",
            "required": true,
            "in": "query",
            "description": "Settlement end time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirer",
            "required": true,
            "in": "query",
            "description": "Acquirer",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "description": "Pnr Reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "required": false,
            "in": "query",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopCode",
            "required": false,
            "in": "query",
            "description": "Form of payment code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "Form of payment sub code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "Payment id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "description": "cc Bin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "description": "cc four last digits",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderReference",
            "required": false,
            "in": "query",
            "description": "Payment order reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settledStatus",
            "required": false,
            "in": "query",
            "description": "Settled status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Settlement id from where to start getting settlements",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Settlement id from where to end getting settlements",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAuditTrackSettlementsHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when one of the filters is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Audit track settlements"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/audit-track/payment-orders": {
      "get": {
        "operationId": "listPaymentOrders",
        "summary": "List payment orders",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Payment order id",
            "example": "01K47JG137K8W2E2PQMPJJW6JG",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "acquirer",
            "required": true,
            "in": "query",
            "description": "Acquirer name",
            "example": "DPO",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderDateFrom",
            "required": true,
            "in": "query",
            "description": "Date from where to start getting payment orders",
            "example": "2025-09-03T10:38:24.872Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentOrderDateTo",
            "required": true,
            "in": "query",
            "description": "Date from where to end getting payment orders",
            "example": "2025-09-03T10:38:24.872Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "required": false,
            "in": "query",
            "description": "File name",
            "example": "Settlement_GLOBAL_10_2024-08-27T14.00.00Z.csv",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Payment order id from where to start getting payment orders",
            "example": "01K47JG138QZPCF5HWCZSESBRC",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "payment order id from where to end getting payment orders",
            "example": "01K47JG138ED88XGZKCP7ZKCSJ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "bankedStatus",
            "required": false,
            "in": "query",
            "description": "Banked status",
            "example": 1,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAuditTrackPaymentOrdersHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when id has an invalid format <br>when payment order date from/to has an invalid format <br>when afterId and beforeId are both provided <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Audit track payment orders"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/audit-track/sales": {
      "get": {
        "operationId": "listSales",
        "summary": "List sales with advanced filters",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Sale id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateFrom",
            "required": true,
            "in": "query",
            "description": "Payment start time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentDateTo",
            "required": true,
            "in": "query",
            "description": "Payment end time",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "saleSource",
            "required": true,
            "in": "query",
            "description": "Sale source id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "required": false,
            "in": "query",
            "description": "Country",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pnrReference",
            "required": false,
            "in": "query",
            "description": "Pnr Reference",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "required": false,
            "in": "query",
            "description": "Document number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileName",
            "required": false,
            "in": "query",
            "description": "File name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopCode",
            "required": false,
            "in": "query",
            "description": "Form of payment code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fopSubCode",
            "required": false,
            "in": "query",
            "description": "Form of payment sub code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": false,
            "in": "query",
            "description": "Payment id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccBin",
            "required": false,
            "in": "query",
            "description": "cc Bin",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ccFourLastDigits",
            "required": false,
            "in": "query",
            "description": "cc four last digits",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "approvalCode",
            "required": false,
            "in": "query",
            "description": "Approval code",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "settledStatus",
            "required": false,
            "in": "query",
            "description": "Settled status",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Sale id from where to start getting sales",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Sale id from where to end getting sales",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAuditTrackSalesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when one of the filters is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Audit track sales"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/payment-feed/start": {
      "post": {
        "operationId": "startPaymentFeedGeneration",
        "summary": "Start payment feed generation",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when payment feed generation started successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Payment feed generation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tenant-settings/settlement-reconciliation-thresholds": {
      "post": {
        "operationId": "changeSettlementReconciliationThresholdSettings",
        "summary": "Change settlement reconciliation Mono and MCP discrepancy thresholds",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSettlementReconciliationThresholdSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when settlement reconciliation thresholds are updated successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tenant-settings/accounting": {
      "get": {
        "operationId": "getAccountingTenantSettings",
        "summary": "Get accounting tenant settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccountingTenantSettingsHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when an accounting tenant parameter is missing"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tenant-settings/settlement-reconciliation": {
      "get": {
        "operationId": "getSettlementReconciliationTenantSettings",
        "summary": "Get settlement reconciliation tenant settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSettlementReconciliationTenantSettingsHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when a settlement reconciliation tenant parameter is missing"
          },
          "500": {
            "description": "when an internal error occured"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tenant-settings/web-params": {
      "get": {
        "operationId": "getWebParamsTenantSettings",
        "summary": "Get web params tenant settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebParamsTenantSettingsHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when a web tenant parameter is missing"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/info": {
      "get": {
        "operationId": "getInfo",
        "summary": "Get app info",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInfoHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occured"
          }
        },
        "tags": [
          "Info"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/form-of-payments": {
      "get": {
        "operationId": "listFormOfPayments",
        "summary": "List form of payments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFormOfPaymentsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Form Of Payment"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createFormOfPayment",
        "summary": "Create form of payment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFormOfPaymentHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the form of payment is created successfully"
          },
          "400": {
            "description": "when the form of payment id is invalid.<br>\n                  when the form of payment type id is invalid.<br>\n                  when the form of payment name is empty.<br>\n                  when the form of payment code is empty."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the form of payment type does not exist."
          },
          "409": {
            "description": "when a form of payment with the same name already exists.<br>\n                  when a form of payment with the same code already exists."
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Form Of Payment"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/form-of-payment-types": {
      "get": {
        "operationId": "listFormOfPaymentTypes",
        "summary": "List form of payment types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListFormOfPaymentTypesHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Form Of Payment Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources/{saleSourceId}/form-of-payments": {
      "get": {
        "operationId": "listSaleSourceFormOfPaymentsBySaleSourceId",
        "summary": "List sale source form of payments by saleSourceId",
        "parameters": [
          {
            "name": "saleSourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SaleSourceFormOfPaymentResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the sale source id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the sale source id does not exist."
          }
        },
        "tags": [
          "Sale Source"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirers/{acquirerId}/form-of-payments/{formOfPaymentId}/associate": {
      "post": {
        "operationId": "associateFormOfPaymentToAcquirer",
        "summary": "Associate form of payment to acquirer",
        "parameters": [
          {
            "name": "acquirerId",
            "required": true,
            "in": "path",
            "description": "Acquirer Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentId",
            "required": true,
            "in": "path",
            "description": "Form Of Payment Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociateFormOfPaymentToAcquirerHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the form of payment is associated to an acquirer successfully"
          },
          "400": {
            "description": "when the datasource form of payment id is invalid.<br>\n                  when the alternate code is empty."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the datasource form of payment does not exist.<br>\n                  when the acquirer does not exist."
          },
          "409": {
            "description": "when the alternate code is already used for the acquirer"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Acquirer"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirers/{acquirerId}/form-of-payments": {
      "get": {
        "operationId": "listAcquirerFormOfPaymentsByAcquirerId",
        "summary": "List acquirer form of payments by acquirerId",
        "parameters": [
          {
            "name": "acquirerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AcquirerFormOfPaymentResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when the acquirer id is invalid."
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the acquirer does not exist."
          },
          "500": {
            "description": "when an internal error occurred"
          }
        },
        "tags": [
          "Acquirer"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources/{saleSourceId}/form-of-payments/{formOfPaymentId}/associate": {
      "post": {
        "operationId": "associateFormOfPaymentToSaleSource",
        "summary": "Associate form of payment to sale source",
        "parameters": [
          {
            "name": "saleSourceId",
            "required": true,
            "in": "path",
            "description": "Sale Source Id",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "formOfPaymentId",
            "required": true,
            "in": "path",
            "description": "Form Of Payment Id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociateFormOfPaymentToSaleSourceHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the form of payment is associated to sale source sucessfully"
          },
          "400": {
            "description": "when the sale source Id is invalid.</br>\n                  when the alternate code is empty.</br>\n                  when the form of payment Id is invalid.</br>\n                  when the sale source Id is invalid.</br>"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the form of payement is not found.</br>\n                  when the sale source is not found.</br>"
          },
          "409": {
            "description": "when the alternate code is already used for the sale source"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sale Source"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/form-of-payments/reconciliation-consider-status": {
      "get": {
        "operationId": "listReconciliationConsiderStatues",
        "summary": "List form of payments reconciliation consider status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListReconciliationConsiderStatusResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Form Of Payment"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/alternative-method-of-payments": {
      "get": {
        "operationId": "listAlternativeMethodOfPayments",
        "summary": "List alternative method of payments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAlternativeMethodOfPaymentsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Alternative Method Of Payment"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sales-on-hold-detection/start": {
      "post": {
        "operationId": "startDetectionSaleOnHold",
        "summary": "Start sale on hold detection",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the sale on hold detection starts successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Sales on hold"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sales-on-hold-detection/reschedule": {
      "post": {
        "operationId": "rescheduleDetectionSaleOnHold",
        "summary": "Reschdule sale on hold detection",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RescheduleSaleOnHoldDetectionHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the sale on hold detection has been rescheduled"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Sales on hold"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/scheduled-jobs/reschedule-all": {
      "post": {
        "operationId": "rescheduleAllJobs",
        "summary": "Reschedule all jobs",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the scheduled jobs are rescheduled successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Scheduled Jobs"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/scheduled-jobs/kpi-refresh/last-execution": {
      "get": {
        "operationId": "getKpiRefreshJobLastExecutionDate",
        "summary": "Get refresh kpi job last execution date",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetKpiRefreshJobLastExecutionDateHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurred"
          }
        },
        "tags": [
          "Scheduled Jobs"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/scheduled-jobs/daily-trial-balance-calculation/last-execution": {
      "get": {
        "operationId": "getCalculateDailyTrialBalanceJobLastExecutionDate",
        "summary": "Get calculate daily trial balance job last execution date",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCalculateDailyTrialBalanceJobLastExecutionDateHttpResponse"
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurred"
          }
        },
        "tags": [
          "Scheduled Jobs"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirers/{acquirerId}/transaction-types": {
      "get": {
        "operationId": "getTransactionTypesByAcquirerId",
        "summary": "transaction types",
        "parameters": [
          {
            "name": "acquirerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListTransactionTypesByAcquirerIdHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when transaction  does not exist"
          }
        },
        "tags": [
          "Transaction Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createAcquirerTransactionType",
        "summary": "Create Acquirer transaction type",
        "parameters": [
          {
            "name": "acquirerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Acquirer transaction type create request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAcquirerTransactionTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "when the creation is sucessfully done"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Transaction Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirers/transaction-types": {
      "get": {
        "operationId": "listAcquirerTransactionTypes",
        "summary": "List transaction types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListAcquirerTransactionTypesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when transaction list  does not exist"
          }
        },
        "tags": [
          "Transaction Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources/{saleSourceId}/transaction-types": {
      "get": {
        "operationId": "listTransactionTypesBySaleSourceId",
        "summary": "transaction types",
        "parameters": [
          {
            "name": "saleSourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetTransactionTypesBySaleSourceIdIHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when list transaction  does not exist"
          }
        },
        "tags": [
          "Transaction Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createSaleSourceTransactionType",
        "summary": "Create sale source transaction type",
        "parameters": [
          {
            "name": "saleSourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "SaleSource transaction type create request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSaleSourceTransactionTypeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "when the creation is sucessfully done"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Transaction Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources/transaction-types": {
      "get": {
        "operationId": "listSaleSourceTransactionTypes",
        "summary": "List transaction types",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListSaleSourceTransactionTypesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when transaction list  does not exist"
          }
        },
        "tags": [
          "Transaction Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/acquirers/{acquirerId}/transaction-types/{transactionTypeId}": {
      "put": {
        "operationId": "updateTransactionTypeByAcquirerId",
        "summary": "update acquirer transaction type by id",
        "parameters": [
          {
            "name": "acquirerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Transaction type update requests",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionTypeByAcquirerIdRequestHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the update is successfully done"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when transaction type does not exist"
          }
        },
        "tags": [
          "Transaction Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/sale-sources/{saleSourceId}/transaction-types/{transactionTypeId}": {
      "put": {
        "operationId": "updateTransactionTypeBySaleSourceId",
        "summary": "update sale source transaction type by id",
        "parameters": [
          {
            "name": "saleSourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionTypeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Transaction type update requests",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTransactionTypeBySaleSourceIdHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when the update is sucessfully done"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when transaction type does not exist"
          }
        },
        "tags": [
          "Transaction Type"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/tenant-settings/bank-reconciliation": {
      "get": {
        "operationId": "getBankReconciliationSettings",
        "summary": "Get bank reconciliation settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetBankReconciliationSettingsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when bank reconciliation settings not exist"
          }
        },
        "tags": [
          "Tenant Settings"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-bank-deposits-and-payment-orders/{moleculeId}": {
      "get": {
        "operationId": "getMatchedBankDepositsAndPaymentOrdersByMoleculeId",
        "summary": "Get matched-bank-deposits-and-payment-order molecule",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMatchedBankDepositsAndPaymentOrdersByMoleculeIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the moleculeId is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when no bank-deposits and payment orders molecule is found for the given moleculeId"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched bank deposits and payment orders"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation-resolution-alert-reasons": {
      "get": {
        "operationId": "listBankReconciliationResolutionAlertReasons",
        "summary": "List bank reconciliation resolution alert reasons",
        "parameters": [
          {
            "name": "discrepancySign",
            "required": true,
            "in": "query",
            "description": "Discrepancy sign",
            "example": "GAIN / LOSS",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListBankReconciliationResolutionAlertReasonsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when discrepancy sign is invalid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Reconciliation Resolution Alert Reason"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-bank-deposits-and-payment-orders": {
      "get": {
        "operationId": "listMatchedBankDepositsAndPaymentOrdersMolecules",
        "summary": "List matched bank deposits and payment orders molecules",
        "parameters": [
          {
            "name": "creationDateFrom",
            "required": false,
            "in": "query",
            "description": "Date from where to start getting matched bank deposits and payment orders molecule",
            "example": "2025-09-03T10:38:25.827Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "creationDateTo",
            "required": false,
            "in": "query",
            "description": "Date from where to end getting matched bank deposits and payment orders molecule",
            "example": "2025-09-03T10:38:25.827Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "afterId",
            "required": false,
            "in": "query",
            "description": "Matched bank deposits and payment orders molecule id from where to start getting molecules",
            "example": "01K47JG2135XCGJASYVWQEZSQF",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "beforeId",
            "required": false,
            "in": "query",
            "description": "Matched bank deposits and payment orders molecule id from where to end getting molecules",
            "example": "01K47JG213228ZFWTJG4MFXEJZ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Number of returned items by page",
            "example": 10,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Matched bank deposits and payment orders molecule id",
            "example": "01K47JG213AXP59RSSNXGXFPFF",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "matchingStatus",
            "required": false,
            "in": "query",
            "description": "Matched bank deposits and payment orders molecule matching status",
            "example": "Partial",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reconciliationStatus",
            "required": false,
            "in": "query",
            "description": "Matched bank deposits and payment orders molecule reconciliation status",
            "example": "ACCEPTED",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMatchedBankDepositsAndPaymentOrdersMoleculesHttpResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "when afterId has an invalid format <br>when beforeId has an invalid format <br>when created date from/to has an invalid format <br>when created date from/to provided whithout created date to/from <br>when afterId and beforeId are both set <br>when id has invalid format <br>when reconciliation status has invalid format <br>when matching status has invalid format <br>when page size is lower than 1"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched bank deposits and payment orders"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "matchManuallyBankDepositsAndPaymentOrders",
        "summary": "Match manually bank deposits and payment orders",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchManuallyBankDepositsAndPaymentOrdersRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When the manual matching starts successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Matched bank deposits and payment orders"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/payment-orders/replay-on-hold": {
      "post": {
        "operationId": "replayOnHoldPaymentOrder",
        "summary": "Replay on hold payment orders",
        "parameters": [],
        "responses": {
          "204": {
            "description": "When payment orders replay has been triggered successfully"
          },
          "401": {
            "description": "When no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "When the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Payment Order"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation/reschedule": {
      "post": {
        "operationId": "rescheduleBankReconciliation",
        "summary": "Reschedule bank reconciliation",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RescheduleBankReconciliationHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "When bank reconciliation has been rescheduled"
          },
          "401": {
            "description": "When no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "When the current user does not have the right permissions to access this endpoint"
          }
        },
        "tags": [
          "Bank Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/matched-bank-deposits-and-payment-orders/{moleculeId}/resolve": {
      "post": {
        "operationId": "resolveMatchedBankDepositsAndPaymentOrdersMolecule",
        "summary": "resolve bank deposits and payment orders molecule",
        "parameters": [
          {
            "name": "moleculeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveMatchedBankDepositsAndPaymentOrdersMoleculeHttpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "when bank deposits and payment orders molecule is resolved successfully"
          },
          "400": {
            "description": "vwhen bank deposits and payment orders molecule id has no valid format <br>when resolution reason id is not present"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when bank deposits and payment orders molecule is not found <br>when alertReason is not found <br>when the molecule task is not found"
          },
          "422": {
            "description": "when bank deposits and payment orders molecule is already resolved"
          }
        },
        "tags": [
          "Matched bank deposits and payment orders"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation/start": {
      "post": {
        "operationId": "startAdvancedBankReconciliation",
        "summary": "Start bank reconciliation",
        "parameters": [],
        "responses": {
          "204": {
            "description": "when the bank reconciliation starts successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation-matching-stacks": {
      "get": {
        "operationId": "listMatchingStacks",
        "summary": "List matching stacks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMatchingStacksHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation-keys": {
      "get": {
        "operationId": "listBankReconciliationKeys",
        "summary": "List bank reconciliation keys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListBankReconciliationKeysHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation-matching-stacks/{matchingStackId}": {
      "get": {
        "operationId": "getBankReconciliationMatchingStackById",
        "summary": "Get bank reconciliation matching stack by id",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBankReconciliationMatchingStackByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when no bank reconciliation matching stack is found for the given id"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "delete": {
        "operationId": "deleteBankReconciliationMatchingStack",
        "summary": "Delete a matching stack",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "when a matching stack is deleted successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the matching stack to delete is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "put": {
        "operationId": "changeMatchingStack",
        "summary": "Change a matching stack (Only Matching Stack with status \"DRAFT\" can be changed)",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeBankReconciliationMatchingStackHttpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "when a matching stack is changed successfully"
          },
          "400": {
            "description": "when the matching stack id provided is empty or invalid<br>\n                  when the list of rule ids provided is empty<br>\n                  when the rule ids provided are not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the matching stack to change is not found<br>\n                  when the rule ids provided are not found"
          },
          "422": {
            "description": "when the matching stack to change is not a draft"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation-matching-stacks/{matchingStackId}/clone": {
      "post": {
        "operationId": "cloneBankReconciliationMatchingStack",
        "summary": "Clone a matching stack",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "when a matching stack is cloned successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the matching stack to clone is not found"
          },
          "422": {
            "description": "when a draft or activating matching stack already exists"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation-matching-rules/{matchingRuleId}": {
      "get": {
        "operationId": "getBankReconciliationMatchingRuleById",
        "summary": "Get bank reconciliation matching rule by id",
        "parameters": [
          {
            "name": "matchingRuleId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBankReconciliationMatchingRuleByIdHttpResponse"
                }
              }
            }
          },
          "400": {
            "description": "when the id is not valid"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when no bank reconciliation matching rule is found for the given id"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation-matching-stacks/{matchingStackId}/activate": {
      "post": {
        "operationId": "activateBankReconciliationMatchingStack",
        "summary": "Activate a matching stack",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateBankReconciliationMatchingStackRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "when a matching stack is activated successfully"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when the matching stack to activate is not found"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Stack"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    },
    "/v1/bank-reconciliation-matching-rules": {
      "get": {
        "operationId": "listMatchingRules",
        "parameters": [
          {
            "name": "matchingStackId",
            "required": true,
            "in": "query",
            "description": "ID of the matching stack where the matching rules are grouped.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListMatchingRulesHttpResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "when the current user does not have the right permissions to access this endpoint"
          },
          "404": {
            "description": "when no matching stack is found with the provided id"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      },
      "post": {
        "operationId": "createBankReconciliationMatchingRule",
        "summary": "Create matching rule",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBankReconciliationMatchingRuleHttpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "when matching rule is created successfully"
          },
          "400": {
            "description": "when one of the matching rule required fields is empty or not provided"
          },
          "401": {
            "description": "when no authorization token is provided or the token has expired"
          },
          "403": {
            "description": "if the current user does not have the right permissions to access this endpoint"
          },
          "409": {
            "description": "when a matching rule with the given id already exists"
          },
          "500": {
            "description": "when an internal error occurs"
          }
        },
        "tags": [
          "Bank Reconciliation Matching Rule"
        ],
        "security": [
          {
            "jwt-token": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Adad API",
    "description": "Adad API.",
    "version": "1.25.3",
    "contact": {},
    "x-logo": {
      "url": "",
      "href": ""
    }
  },
  "tags": [],
  "servers": [
    {
      "url": "https://8x.dev.adad.io/api",
      "variables": {
        "adad_dns": {
          "default": "8x.dev.adad.io/api",
          "description": "adad API DNS"
        },
        "version": {
          "default": "v2",
          "description": "Version for an adad API domain"
        }
      }
    },
    {
      "url": "https://6x.dev.adad.io/api",
      "variables": {
        "adad_dns": {
          "default": "6x.dev.adad.io/api",
          "description": "adad API DNS"
        },
        "version": {
          "default": "v2",
          "description": "Version for an adad API domain"
        }
      }
    },
    {
      "url": "https://7x.dev.adad.io/api",
      "variables": {
        "adad_dns": {
          "default": "7x.dev.adad.io/api",
          "description": "adad API DNS"
        },
        "version": {
          "default": "v2",
          "description": "Version for an adad API domain"
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "jwt-token": {
        "scheme": "Bearer",
        "bearerFormat": "Bearer",
        "description": "Please enter token, without Bearer prefix",
        "name": "Authorization",
        "type": "http",
        "in": "Header"
      }
    },
    "schemas": {
      "ApiHealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "UP/DOWN"
          },
          "version": {
            "type": "string",
            "example": "1.19.0"
          },
          "details": {
            "type": "object",
            "example": {
              "components": {
                "db": {
                  "status": "UP"
                }
              }
            }
          }
        },
        "required": [
          "status",
          "version",
          "details"
        ]
      },
      "UpstreamHealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "UP/DOWN"
          },
          "version": {
            "type": "string",
            "example": "1.19.0"
          },
          "error": {
            "type": "string",
            "example": "Error message"
          },
          "details": {
            "type": "object",
            "example": {
              "components": {
                "db": {
                  "status": "UP"
                },
                "broker": {
                  "status": "UP"
                }
              }
            }
          }
        },
        "required": [
          "status",
          "version",
          "error",
          "details"
        ]
      },
      "GetHealthHttpResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "UP/DOWN"
          },
          "api": {
            "description": "Api module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/ApiHealthResponse"
              }
            ]
          },
          "keycloak": {
            "description": "Keycloak health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "integrationFactoryCore": {
            "description": "Integration factory core module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "featurization": {
            "description": "Featurization module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "settlementReconciliation": {
            "description": "Settlement reconciliation module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "fees": {
            "description": "Fees module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "accounting": {
            "description": "Accounting module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "kpi": {
            "description": "Kpi module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "reporting": {
            "description": "Reporting module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "fileWatcher": {
            "description": "File watcher module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "auditTrack": {
            "description": "Audit track module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          },
          "bankReconciliation": {
            "description": "Bank reconciliation module health",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpstreamHealthResponse"
              }
            ]
          }
        },
        "required": [
          "status",
          "api",
          "keycloak",
          "integrationFactoryCore",
          "featurization",
          "settlementReconciliation",
          "fees",
          "accounting",
          "kpi",
          "reporting",
          "fileWatcher",
          "auditTrack",
          "bankReconciliation"
        ]
      },
      "ChangePendingItemsExpirationThresholdInAcquirerMarketRequestHTTPRequest": {
        "type": "object",
        "properties": {
          "pendingItemsExpirationThreshold": {
            "type": "number",
            "example": "604800",
            "description": "Pending items expiration threshold in seconds"
          }
        },
        "required": [
          "pendingItemsExpirationThreshold"
        ]
      },
      "ChangePendingItemsExpirationThresholdInSaleSourceMarketRequestHTTPRequest": {
        "type": "object",
        "properties": {
          "pendingItemsExpirationThreshold": {
            "type": "number",
            "example": "604800",
            "description": "Pending items expiration threshold in seconds"
          }
        },
        "required": [
          "pendingItemsExpirationThreshold"
        ]
      },
      "DatasourceTypeHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "89d927b6-8a3f-4c37-8d94-b03a3a573820",
            "description": "Datasource type unique id"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "name": {
            "type": "string",
            "example": "Sales",
            "description": "Datasource type name"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name"
        ]
      },
      "DatasourceHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "89d927b6-8a3f-4c37-8d94-b03a3a573820",
            "description": "Datasource unique id"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "name": {
            "type": "string",
            "example": "Sales",
            "description": "Datasource name"
          },
          "namingConvention": {
            "type": "string",
            "example": "xxx.yyy.zzz",
            "description": "Datasource naming convention"
          },
          "datasourceType": {
            "type": "string",
            "example": "6e2ca204-229e-470e-aaea-e6395ad7c183",
            "description": "Datasource type id"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "namingConvention",
          "datasourceType"
        ]
      },
      "DateVO": {
        "type": "object",
        "properties": {}
      },
      "MarketHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "89d927b6-8a3f-4c37-8d94-b03a3a573820",
            "description": "Market unique id"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "marketName": {
            "type": "string",
            "example": "ROM",
            "description": "Market name"
          },
          "datasourceId": {
            "type": "string",
            "example": "6e2ca204-229e-470e-aaea-e6395ad7c183",
            "description": "Datasource id"
          },
          "fileReceptionMissingThreshold": {
            "type": "number",
            "example": "3800",
            "description": "File Reception missing threshold in seconds"
          },
          "fileReceptionFrequency": {
            "type": "string",
            "example": "* 10 15 * * *",
            "description": "File reception frequency"
          },
          "effectiveDate": {
            "example": "2021-05-09T08:23:17.000Z",
            "description": "Effective date of the market",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateVO"
              }
            ]
          },
          "expirationDate": {
            "example": "2022-07-10T08:23:17.000Z",
            "description": "Expiration date of the market",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateVO"
              }
            ]
          },
          "version": {
            "type": "number",
            "example": "1",
            "description": "Version of the market"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "marketName",
          "datasourceId",
          "fileReceptionMissingThreshold",
          "fileReceptionFrequency",
          "effectiveDate",
          "expirationDate",
          "version"
        ]
      },
      "ChangeNamingConventionHttpRequest": {
        "type": "object",
        "properties": {
          "namingConvention": {
            "type": "string",
            "example": "$AX_Merchant_Number$_EPA_AMEX_$UTC_DATE$_$UTC_TIME$",
            "description": "Datasource naming convention"
          }
        },
        "required": [
          "namingConvention"
        ]
      },
      "ChangeMarketNameHttpRequest": {
        "type": "object",
        "properties": {
          "marketName": {
            "type": "string",
            "example": "ROM",
            "description": "Market name"
          }
        },
        "required": [
          "marketName"
        ]
      },
      "ChangeFileReceptionMissingThresholdHttpRequest": {
        "type": "object",
        "properties": {
          "fileReceptionMissingThreshold": {
            "type": "number",
            "example": "145230",
            "description": "Market File Reception Missing Threshold"
          }
        },
        "required": [
          "fileReceptionMissingThreshold"
        ]
      },
      "ChangeFileReceptionFrequencyHttpRequest": {
        "type": "object",
        "properties": {
          "fileReceptionFrequency": {
            "type": "string",
            "example": "* 45 11 * * *",
            "description": "Market file reception frequency"
          }
        },
        "required": [
          "fileReceptionFrequency"
        ]
      },
      "ChangeExpirationDateHttpRequest": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "example": "2022-05-09T08:23:17.000Z",
            "description": "Market Expiration Date"
          }
        },
        "required": [
          "expirationDate"
        ]
      },
      "ChangeMarketEffectiveDateRequest": {
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "example": "2021-05-09T08:23:17.000Z",
            "description": "Market effective date"
          }
        },
        "required": [
          "effectiveDate"
        ]
      },
      "ListSaleSourceChannelTypesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFRKE3JBVRRHAJE1102EE",
            "description": "Sale source channel type id"
          },
          "name": {
            "type": "string",
            "example": "DIRECT",
            "description": "Sale source channel type name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CreateSaleSourceHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "649fe252-5a3b-4feb-a545-e1c64ab80aff",
            "description": "sale source id"
          },
          "name": {
            "type": "string",
            "example": "CAT",
            "description": "sale source name"
          },
          "saleChannelTypeId": {
            "type": "string",
            "example": "01HCZT5ZAW0FSWANFJCJ6MH7PG",
            "description": "sale source sale channel type id"
          }
        },
        "required": [
          "id",
          "name",
          "saleChannelTypeId"
        ]
      },
      "SaleSourceChannelTypeDTO": {
        "type": "object",
        "properties": {}
      },
      "ListSaleSourcesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "d60109d2-91a1-4752-abbc-e56948cbe51f",
            "description": "Sale source ID"
          },
          "name": {
            "type": "string",
            "example": "HOT",
            "description": "Sale source name"
          },
          "saleChannelType": {
            "example": {
              "id": "01HB5NYZYQFXNBHAYTR2CY43Y8",
              "name": "Direct"
            },
            "description": "Sale channel type",
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleSourceChannelTypeDTO"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "saleChannelType"
        ]
      },
      "SaleSourceMarketsBySaleSourceIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "d4ee1bb5-2d8b-4609-981a-11be4582c448",
            "description": "Sale Source Market Id"
          },
          "name": {
            "type": "string",
            "example": "LON",
            "description": "Sale Source Market name"
          },
          "pendingItemsExpirationThreshold": {
            "type": "number",
            "example": "604800",
            "description": "The threshold duration, in seconds, for the transition from a pending state to an expired state for sales items"
          }
        },
        "required": [
          "id",
          "name",
          "pendingItemsExpirationThreshold"
        ]
      },
      "CreatePointOfSaleHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HDH0A9VRHGRVF4KF5P48XN3K",
            "description": "Point of sale id"
          },
          "saleSourceMarketId": {
            "type": "string",
            "example": "70af862d-3415-43fc-a03a-59baa74014f0",
            "description": "Sale source market id"
          },
          "officeId": {
            "type": "string",
            "example": "R200562",
            "description": "Office id"
          },
          "country": {
            "type": "string",
            "example": "PAR",
            "description": "Country"
          },
          "defaultPaymentCurrency": {
            "type": "string",
            "example": "R200562",
            "description": "Default payment currency"
          },
          "officeEmail": {
            "type": "string",
            "example": "office.email@exemple.com",
            "description": "Office email"
          },
          "officeName": {
            "type": "string",
            "example": "Office name",
            "description": "Office name"
          },
          "officeAddress": {
            "type": "string",
            "example": "Office address",
            "description": "Office address"
          },
          "alternateOfficeId": {
            "type": "string",
            "example": "NCE1A02REV",
            "description": "Alternate office id"
          }
        },
        "required": [
          "id",
          "saleSourceMarketId",
          "officeId",
          "country",
          "defaultPaymentCurrency",
          "officeEmail",
          "officeName",
          "officeAddress",
          "alternateOfficeId"
        ]
      },
      "ListAcquirersResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "b3d5ef0c-f8e3-46d4-a172-240f81b2ea14",
            "description": "Acquirer ID"
          },
          "name": {
            "type": "string",
            "example": "AMEX",
            "description": "Acquirer Name"
          },
          "defaultSettlementCurrency": {
            "type": "string",
            "example": "USD",
            "description": "Acquirer Default Currency"
          },
          "subAccount": {
            "type": "string",
            "example": "7896584",
            "description": "Acquirer Sub Account"
          }
        },
        "required": [
          "id",
          "name",
          "defaultSettlementCurrency",
          "subAccount"
        ]
      },
      "CreateAcquirerHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "8464bf53-b053-4e97-922c-25b501359f16",
            "description": "Acquirer id"
          },
          "name": {
            "type": "string",
            "example": "Amex",
            "description": "acquirer name"
          },
          "defaultSettlementCurrency": {
            "type": "string",
            "example": "USD",
            "description": "acquirer default settlement currency"
          },
          "subAccount": {
            "type": "string",
            "example": "794256849",
            "description": "acquirer sub account"
          }
        },
        "required": [
          "id",
          "name",
          "defaultSettlementCurrency",
          "subAccount"
        ]
      },
      "ListMarketsByAcquirerIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5a15d744-9efd-4044-9906-69cb3aa833c7",
            "description": "Market ID"
          },
          "name": {
            "type": "string",
            "example": "PAR",
            "description": "Market Name"
          },
          "pendingItemsExpirationThreshold": {
            "type": "number",
            "example": "604800",
            "description": "The threshold duration, in seconds, for the transition from a pending state to an expired state for settlements items"
          }
        },
        "required": [
          "id",
          "name",
          "pendingItemsExpirationThreshold"
        ]
      },
      "CreateAcquirerMerchantHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HDH0A9VRHGRVF4KF5P48XN3K",
            "description": "acquirer merchant id"
          },
          "mid": {
            "type": "string",
            "example": "7001",
            "description": "mid"
          },
          "acquirerMarketId": {
            "type": "string",
            "example": "70af862d-3415-43fc-a03a-59baa74014f0",
            "description": "acquirer market id"
          },
          "defaultSettlementCurrency": {
            "type": "string",
            "example": "USD",
            "description": "default settlement currency"
          },
          "merchantCompanyId": {
            "type": "string",
            "example": "01HV93PZ3ARRJNMCT0G4521ARR",
            "description": "merchant company id"
          },
          "country": {
            "type": "string",
            "example": "TU",
            "description": "country"
          },
          "serviceType": {
            "type": "string",
            "example": "PASSENGER",
            "description": "service type"
          },
          "defaultPaymentCurrency": {
            "type": "string",
            "example": "EUR",
            "description": "default payment currency"
          },
          "midName": {
            "type": "string",
            "example": "mid name",
            "description": "mid name"
          }
        },
        "required": [
          "id",
          "mid",
          "acquirerMarketId",
          "defaultSettlementCurrency",
          "merchantCompanyId",
          "country",
          "serviceType",
          "defaultPaymentCurrency",
          "midName"
        ]
      },
      "ListFileReceptionConfigurationsByDatasourceIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "89d927b6-8a3f-4c37-8d94-b03a3a573820",
            "description": "Market unique id"
          },
          "name": {
            "type": "string",
            "example": "ROM",
            "description": "Market Name"
          },
          "fileReceptionMissingThreshold": {
            "type": "number",
            "example": 3800,
            "description": "File Reception missing threshold in seconds"
          },
          "fileReceptionFrequency": {
            "type": "string",
            "example": "* 10 15 * * *",
            "description": "File reception frequency"
          },
          "effectiveDate": {
            "type": "string",
            "example": "2021-05-09T08:23:17.000Z",
            "description": "Effective date of the file reception configuration"
          },
          "expirationDate": {
            "type": "string",
            "example": "2022-07-10T08:23:17.000Z",
            "description": "Expiration date of the file reception configuration"
          },
          "version": {
            "type": "number",
            "example": 1,
            "description": "Version of the file reception configurations"
          }
        },
        "required": [
          "id",
          "name",
          "fileReceptionMissingThreshold",
          "fileReceptionFrequency",
          "effectiveDate",
          "expirationDate",
          "version"
        ]
      },
      "AssociatePointOfSaleToAcquirerMerchantHttpRequest": {
        "type": "object",
        "properties": {
          "pointOfSaleId": {
            "type": "string",
            "example": "01HE7VD8RCHA405QY5JYD1SZ2H",
            "description": "Point of sale id"
          },
          "saleCompanyId": {
            "type": "string",
            "example": "01HE7VD8RCHA405QY5JYD1SZ2H",
            "description": "Company id"
          }
        },
        "required": [
          "pointOfSaleId"
        ]
      },
      "ListAcquirerMerchantsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFRQGXVAZKJEASJAY4YQ5",
            "description": "acquirer merchant id"
          },
          "mid": {
            "type": "string",
            "example": "7001",
            "description": "acquirer merchant mid"
          },
          "acquirerName": {
            "type": "string",
            "example": "Amex",
            "description": "Acquirer name"
          },
          "acquirerMarketName": {
            "type": "string",
            "example": "TUN",
            "description": "Acquirer market name"
          },
          "defaultSettlementCurrency": {
            "type": "string",
            "example": "USD",
            "description": "Default settlement currency"
          },
          "pointOfSaleId": {
            "type": "string",
            "example": "01K47JFRQHVP9EQCPA97R2DNNT",
            "description": "Point of sale id"
          },
          "saleCompanyId": {
            "type": "string",
            "example": "01K47JFRQHYSMYGFQHBV6XAECJ",
            "description": "Sale company id"
          },
          "serviceType": {
            "type": "string",
            "example": "PASSENGER",
            "description": "Service type"
          },
          "midName": {
            "type": "string",
            "example": "mid name",
            "description": "Mid name"
          },
          "defaultPaymentCurrency": {
            "type": "string",
            "example": "01K47JFRQH8CAR33WTBHDRVM8B",
            "description": "Default payment currency"
          },
          "merchantCompanyCode": {
            "type": "string",
            "example": "7005",
            "description": "Merchant company code"
          },
          "merchantAirlineCode": {
            "type": "string",
            "example": "7088",
            "description": "Merchant airline code"
          },
          "country": {
            "type": "string",
            "example": "TU",
            "description": "Country"
          }
        },
        "required": [
          "id",
          "mid",
          "acquirerName",
          "acquirerMarketName",
          "defaultSettlementCurrency",
          "pointOfSaleId",
          "saleCompanyId",
          "serviceType",
          "midName",
          "defaultPaymentCurrency",
          "merchantCompanyCode",
          "merchantAirlineCode",
          "country"
        ]
      },
      "GetPointOfSaleByIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFRPNXS04Z2XFS6E2ERFR",
            "description": "Point of sale Id"
          },
          "saleSourceMarketId": {
            "type": "string",
            "example": "f61202b1-533f-438d-b239-993540bd6e0c",
            "description": "Sale source market Id"
          },
          "saleSourceMarketName": {
            "type": "string",
            "example": "TUN",
            "description": "Sale source market name"
          },
          "saleSourceId": {
            "type": "string",
            "example": "76626a39-f513-404a-9dd2-a8d6ba9f4b1b",
            "description": "Sale source Id"
          },
          "saleSourceName": {
            "type": "string",
            "example": "BSP",
            "description": "Sale source name"
          },
          "officeId": {
            "type": "string",
            "example": "FFDGDRY",
            "description": "Office Id"
          }
        },
        "required": [
          "id",
          "saleSourceMarketId",
          "saleSourceMarketName",
          "saleSourceId",
          "saleSourceName",
          "officeId"
        ]
      },
      "ListPointOfSalesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFRRHV2H6D21R17S2KQ2J",
            "description": "Point of sale id"
          },
          "saleSourceName": {
            "type": "string",
            "example": "HOT",
            "description": "Sale source name"
          },
          "saleSourceMarketName": {
            "type": "string",
            "example": "TUN",
            "description": "Sale source market name"
          },
          "officeId": {
            "type": "string",
            "example": "FFDGDRY",
            "description": "Office Id"
          },
          "country": {
            "type": "string",
            "example": "PAR",
            "description": "Country"
          },
          "defaultPaymentCurrency": {
            "type": "string",
            "example": "EUR",
            "description": "Point of sale default payment currency"
          },
          "officeEmail": {
            "type": "string",
            "example": "office.email@exemple.com",
            "description": "Office email"
          },
          "officeName": {
            "type": "string",
            "example": "office name",
            "description": "Office name"
          },
          "officeAddress": {
            "type": "string",
            "example": "Suzy Queue\n                  4455 Landing Lange, APT 4\n                  Louisville, KY 40018-1234",
            "description": "Office address"
          },
          "alternateOfficeId": {
            "type": "string",
            "example": "NCE1A065REV",
            "description": "Alternate office id "
          }
        },
        "required": [
          "id",
          "saleSourceName",
          "saleSourceMarketName",
          "officeId",
          "country",
          "defaultPaymentCurrency",
          "officeEmail",
          "officeName",
          "officeAddress",
          "alternateOfficeId"
        ]
      },
      "ListFxRateSourcesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "0100a31d-5107-4081-bc6d-16dd6ca0f03a",
            "description": "Fx Rate Source ID"
          },
          "name": {
            "type": "string",
            "example": "ICER",
            "description": "Fx Rate Source Name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListAirlinesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFRVQ6RQ4XAXTVKG0BQ31",
            "description": "Airline id"
          },
          "airlineCode": {
            "type": "string",
            "example": "7001",
            "description": "Airline code"
          }
        },
        "required": [
          "id",
          "airlineCode"
        ]
      },
      "ListCompaniesByAirlineIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFRX6ETMANHP53A46DJ7P",
            "description": "Company id"
          },
          "companyCode": {
            "type": "string",
            "example": "212",
            "description": "Company code"
          }
        },
        "required": [
          "id",
          "companyCode"
        ]
      },
      "ListCompaniesByPointOfSaleIdResponse": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "example": "01K47JFRXZ276KVW98YC2M9GFT",
            "description": "companyId"
          },
          "airlineCode": {
            "type": "string",
            "example": "LA",
            "description": "airline code"
          },
          "companyCode": {
            "type": "string",
            "example": "LACL",
            "description": "company code"
          }
        },
        "required": [
          "companyId",
          "airlineCode",
          "companyCode"
        ]
      },
      "ListServiceTypesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Service type id"
          },
          "name": {
            "type": "string",
            "example": "PASSENGER",
            "description": "Service type name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GetCompanyByIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFRZRKW3FY96D8APZ5JZK",
            "description": "id"
          },
          "companyCode": {
            "type": "string",
            "example": "LACL",
            "description": "Company code"
          }
        },
        "required": [
          "id",
          "companyCode"
        ]
      },
      "ListPendingItemsDeletionReasonsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "REASON_CODE_X",
            "description": "pending item deletion reason id"
          },
          "cannedMessage": {
            "type": "string",
            "example": "Reason x",
            "description": "Canned message"
          }
        },
        "required": [
          "id",
          "cannedMessage"
        ]
      },
      "GetAcquirerMerchantByIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFS2RXKR3GPWVQ4N4ZCSY",
            "description": "acquirer merchant id"
          },
          "mid": {
            "type": "string",
            "example": "7001",
            "description": "acquirer merchant mid"
          },
          "acquirerName": {
            "type": "string",
            "example": "Amex",
            "description": "Acquirer name"
          },
          "acquirerMarketName": {
            "type": "string",
            "example": "TUN",
            "description": "Acquirer market name"
          },
          "defaultSettlementCurrency": {
            "type": "string",
            "example": "USD",
            "description": "Default settlement currency"
          },
          "pointOfSaleId": {
            "type": "string",
            "example": "01K47JFS2SXXDMX81HS1ZDA6SM",
            "description": "Point of sale id"
          },
          "saleCompanyId": {
            "type": "string",
            "example": "01K47JFS2S6YMTNJJNR5SKATTY",
            "description": "Sale company id"
          },
          "serviceType": {
            "type": "string",
            "example": "PASSENGER",
            "description": "Service type"
          },
          "midName": {
            "type": "string",
            "example": "mid name",
            "description": "Mid name"
          },
          "defaultPaymentCurrency": {
            "type": "string",
            "example": "01K47JFS2S1YTA93ZD5FN7V3KW",
            "description": "Default payment currency"
          },
          "merchantCompanyCode": {
            "type": "string",
            "example": "7005",
            "description": "Merchant company code"
          },
          "merchantAirlineCode": {
            "type": "string",
            "example": "7088",
            "description": "Merchant airline code"
          },
          "country": {
            "type": "string",
            "example": "TU",
            "description": "Country"
          }
        },
        "required": [
          "id",
          "mid",
          "acquirerName",
          "acquirerMarketName",
          "defaultSettlementCurrency",
          "pointOfSaleId",
          "saleCompanyId",
          "serviceType",
          "midName",
          "defaultPaymentCurrency",
          "merchantCompanyCode",
          "merchantAirlineCode",
          "country"
        ]
      },
      "ListPointOfSalesMerchantMappingResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01F8MECHZX3TBDSZ7XRAYM1XMP",
            "description": "Point of sale id"
          },
          "saleSourceMarketName": {
            "type": "string",
            "example": "GLOBAL",
            "description": "Sale source market name"
          },
          "saleSourceName": {
            "type": "string",
            "example": "Sale",
            "description": "Sale source  name"
          },
          "channelType": {
            "type": "string",
            "example": "DIRECT",
            "description": "channel type"
          },
          "officeId": {
            "type": "string",
            "example": "604*",
            "description": "Office Id"
          },
          "country": {
            "type": "string",
            "example": "PAR",
            "description": "Country"
          },
          "paymentCurrency": {
            "type": "string",
            "example": "EUR",
            "description": "Point of sale payment currency"
          },
          "saleCurrency": {
            "type": "string",
            "example": "EUR",
            "description": "Point of sale currency"
          },
          "settlementCurrency": {
            "type": "string",
            "example": "USD",
            "description": "settlement currency"
          },
          "alternateOfficeId": {
            "type": "string",
            "example": "8126680636",
            "description": "Alternate office id"
          },
          "fopSubCode": {
            "type": "string",
            "example": "MOBILE | CASH",
            "description": "fopSubCode"
          },
          "expectedSettlementDelay": {
            "type": "number",
            "example": 2,
            "description": "expected settlement delay"
          },
          "acquirer": {
            "type": "string",
            "example": "Adyen",
            "description": "acquirer"
          },
          "acquirerCustomerCode": {
            "type": "string",
            "example": "25000001",
            "description": "acquirer customer code"
          },
          "mid": {
            "type": "string",
            "example": "8126680636",
            "description": "merchant id"
          },
          "fopCode": {
            "type": "string",
            "example": "EXTAAP*",
            "description": "fop code"
          }
        },
        "required": [
          "id",
          "saleSourceMarketName",
          "saleSourceName",
          "channelType",
          "officeId",
          "country",
          "paymentCurrency",
          "saleCurrency",
          "settlementCurrency",
          "alternateOfficeId",
          "fopSubCode",
          "expectedSettlementDelay",
          "acquirer",
          "acquirerCustomerCode",
          "mid",
          "fopCode"
        ]
      },
      "CreatePointOfSaleMerchantMappingHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01JM1YM9C42V0VBAJG6MP9WE31",
            "description": "Point of sale id"
          },
          "saleSourceId": {
            "type": "string",
            "example": "2f0a09ca-64ae-4fa4-bcf5-765e2d6bf25f",
            "description": "Sale source id"
          },
          "channelType": {
            "type": "string",
            "example": "DIRECT",
            "description": "Channel type"
          },
          "officeId": {
            "type": "string",
            "example": "604*",
            "description": "Office id"
          },
          "country": {
            "type": "string",
            "example": "TN",
            "description": "Country"
          },
          "paymentCurrency": {
            "type": "string",
            "example": "TND",
            "description": "Payment currency (Required)"
          },
          "saleCurrency": {
            "type": "string",
            "example": "TND",
            "description": "Sale currency"
          },
          "fopCode": {
            "type": "string",
            "example": "EXTAAP*",
            "description": "FOP Code (Required)"
          },
          "fopSubCode": {
            "type": "string",
            "example": "Mobile",
            "description": "AMOP Code"
          },
          "mid": {
            "type": "string",
            "example": "8126680636",
            "description": "Merchant Identifier (MID) (Required)"
          },
          "acquirerCustomerCode": {
            "type": "string",
            "example": "25000001",
            "description": "Acquirer Customer Code"
          },
          "acquirer": {
            "type": "string",
            "example": "Adyen",
            "description": "Acquirer (Required)"
          },
          "alternateOfficeId": {
            "type": "string",
            "example": "8126680636",
            "description": "Alternate office id"
          },
          "saleSourceMarketId": {
            "type": "string",
            "example": "2f0a09ca-64ae-4fa4-bcf5-765e2d6bf25f",
            "description": "Sale source market id"
          },
          "settlementCurrency": {
            "type": "string",
            "example": "TND",
            "description": "Settlement currency"
          },
          "expectedSettlementDelay": {
            "type": "number",
            "example": 3600,
            "description": "Expected settlement delay in seconds"
          }
        },
        "required": [
          "id",
          "saleSourceId",
          "channelType",
          "officeId",
          "country",
          "paymentCurrency",
          "saleCurrency",
          "fopCode",
          "fopSubCode",
          "mid",
          "acquirerCustomerCode",
          "acquirer",
          "alternateOfficeId",
          "saleSourceMarketId",
          "settlementCurrency",
          "expectedSettlementDelay"
        ]
      },
      "GetFeeRuleByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "2cdc8ab1-6d50-49cc-ba14-54e4ac7ec231"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "applicationCondition": {
            "type": "string",
            "description": "Fee rule application condition (when the global is applied)",
            "enum": [
              "ALWAYS",
              "NEVER",
              "WHEN_NO_MARKET_FEE_IS_DEFINED"
            ]
          },
          "marketName": {
            "type": "string",
            "description": "Market Name",
            "example": "PAR"
          },
          "datasourceName": {
            "type": "string",
            "description": "Datasource Name",
            "example": "SafetyPay"
          },
          "feeType": {
            "type": "string",
            "description": "Fee type",
            "enum": [
              "FIXED",
              "PERCENT"
            ]
          },
          "value": {
            "type": "number",
            "description": "Fee rule value",
            "example": 2
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "applicationCondition",
          "marketName",
          "datasourceName",
          "feeType",
          "value"
        ]
      },
      "GetFeeRulesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "2cdc8ab1-6d50-49cc-ba14-54e4ac7ec231"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "applicationCondition": {
            "type": "string",
            "description": "Fee rule application condition (when the global is applied)",
            "enum": [
              "ALWAYS",
              "NEVER",
              "WHEN_NO_MARKET_FEE_IS_DEFINED"
            ]
          },
          "marketName": {
            "type": "string",
            "description": "Market Name",
            "example": "PAR"
          },
          "datasourceName": {
            "type": "string",
            "description": "Datasource Name",
            "example": "SafetyPay"
          },
          "feeType": {
            "type": "string",
            "description": "Fee type",
            "enum": [
              "FIXED",
              "PERCENT"
            ]
          },
          "value": {
            "type": "number",
            "description": "Fee rule value",
            "example": 2
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "applicationCondition",
          "marketName",
          "datasourceName",
          "feeType",
          "value"
        ]
      },
      "CreateFeeRuleHttpRequest": {
        "type": "object",
        "properties": {
          "datasourceId": {
            "type": "string",
            "example": "fe27940e-f096-4fdd-896b-75a9daaf4143",
            "description": "Datasource Id <br>It should be set when creating a global fee rule"
          },
          "marketId": {
            "type": "string",
            "example": "9cd6c2a6-2160-4e3f-81c9-6d45f9c7b7c8",
            "description": "Market Id <br>It should be set when creating a market fee rule"
          },
          "applicationCondition": {
            "type": "string",
            "enum": [
              "ALWAYS",
              "NEVER",
              "WHEN_NO_MARKET_FEE_IS_DEFINED"
            ],
            "description": "Fee application condition <br>It should be set when creating a global fee rule"
          },
          "feeType": {
            "type": "string",
            "enum": [
              "FIXED",
              "PERCENT"
            ],
            "description": "Fee value Type"
          },
          "value": {
            "type": "number",
            "example": "2",
            "description": "Fee value"
          }
        },
        "required": [
          "feeType",
          "value"
        ]
      },
      "ChangeFeeRuleHttpRequest": {
        "type": "object",
        "properties": {
          "applicationCondition": {
            "type": "string",
            "enum": [
              "ALWAYS",
              "NEVER",
              "WHEN_NO_MARKET_FEE_IS_DEFINED"
            ],
            "description": "Fee application condition"
          },
          "feeType": {
            "type": "string",
            "enum": [
              "FIXED",
              "PERCENT"
            ],
            "description": "Fee value Type"
          },
          "value": {
            "type": "number",
            "example": "2",
            "description": "Fee value"
          }
        },
        "required": [
          "feeType",
          "value"
        ]
      },
      "AmountInAccountingCurrencyResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "example": "315.1365508008",
            "description": "Amount"
          },
          "currency": {
            "type": "string",
            "example": "EUR",
            "description": "Currency"
          }
        },
        "required": [
          "amount",
          "currency"
        ]
      },
      "AmountInAccountingCurrencyHttpResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/AmountInAccountingCurrencyResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency"
        ]
      },
      "ListFilesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01G9YMTPCC1Y0PH8D1D35A5XN3",
            "description": "Operation unique id"
          },
          "fileReceptionConfigurationId": {
            "type": "string",
            "example": "d1ff5a11-cba3-4daa-8d4c-5371d899a9ce",
            "description": "Market id"
          },
          "operationId": {
            "type": "string",
            "example": "01GAH3R3KKF4NXK3K89PJCGGRZ",
            "description": "Operation unique id. Only for file that have been received."
          },
          "name": {
            "type": "string",
            "example": "HOT.TUN.234234.234234.TU.HOT.D.199\"",
            "description": "File name"
          },
          "fileStatus": {
            "type": "string",
            "example": "RECEIVED",
            "description": "File status"
          },
          "expectedFileReceptionDate": {
            "type": "string",
            "example": "2022-08-08T08:55:00.000Z",
            "description": "Expected file reception date"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "File reception date"
          },
          "fileReceptionDelayInSeconds": {
            "type": "number",
            "example": 300,
            "description": "Delay in seconds between expectedFileReceptionDate and fileReceptionDate"
          },
          "sanityCheckStatus": {
            "type": "string",
            "example": "ACCEPTED",
            "description": "level sanity check"
          },
          "duplicationCheckStatus": {
            "type": "string",
            "example": "NEW",
            "description": "Duplication sanity check"
          },
          "totalTransactions": {
            "type": "number",
            "example": 100,
            "description": "Total transactions"
          },
          "failedTransactions": {
            "type": "number",
            "example": 0,
            "description": "Failed transactions"
          },
          "fileReceptionConfigurationName": {
            "type": "string",
            "example": "TUN",
            "description": "Market name"
          },
          "datasourceName": {
            "type": "string",
            "description": "datasource name"
          },
          "rejectionReason": {
            "type": "string",
            "example": "File datasource unknown",
            "description": "rejection reason"
          },
          "corruptedTransactions": {
            "type": "number",
            "description": "corrupted transactions"
          },
          "isRecovery": {
            "type": "boolean",
            "description": "is recovery file"
          },
          "recoveryStatus": {
            "type": "string",
            "description": "file recovery status"
          },
          "notEligibleTransactions": {
            "type": "number",
            "description": "total not eligible transaction"
          },
          "datasourceType": {
            "type": "string",
            "description": "datasource type"
          }
        },
        "required": [
          "id",
          "fileReceptionConfigurationId",
          "operationId",
          "name",
          "fileStatus",
          "expectedFileReceptionDate",
          "fileReceptionDate",
          "fileReceptionDelayInSeconds",
          "sanityCheckStatus",
          "duplicationCheckStatus",
          "totalTransactions",
          "failedTransactions",
          "fileReceptionConfigurationName",
          "datasourceName",
          "rejectionReason",
          "corruptedTransactions",
          "isRecovery",
          "recoveryStatus",
          "notEligibleTransactions",
          "datasourceType"
        ]
      },
      "RateOfExchangeResponse": {
        "type": "object",
        "properties": {
          "fromCurrency": {
            "type": "string",
            "description": "From currency",
            "example": "EUR"
          },
          "fromAmountType": {
            "type": "string",
            "enum": [
              "PAYMENT",
              "SETTLEMENT"
            ],
            "description": "From amount type: PAYMENT or SETTLEMENT",
            "example": "PAYMENT"
          },
          "effectiveDate": {
            "format": "date-time",
            "type": "string",
            "description": "Effective date",
            "example": "01/01/2024"
          },
          "rate": {
            "type": "number",
            "description": "Rate",
            "example": "1.2234345"
          }
        },
        "required": [
          "fromCurrency",
          "fromAmountType",
          "effectiveDate",
          "rate"
        ]
      },
      "MonetaryAmountResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "example": "315.1365508008",
            "description": "Amount"
          },
          "currency": {
            "type": "string",
            "example": "EUR",
            "description": "Currency"
          },
          "isConverted": {
            "type": "boolean",
            "example": "true",
            "description": "Indicates whether the amount has been converted"
          },
          "rateOfExchange": {
            "description": "Rate of exchange to currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/RateOfExchangeResponse"
              }
            ]
          }
        },
        "required": [
          "amount",
          "currency",
          "isConverted"
        ]
      },
      "SaleGrossAmountResponse": {
        "type": "object",
        "properties": {
          "amountInPaymentCurrency": {
            "description": "Gross amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Gross amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Gross amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "ListSalesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAJKKWXY1BKK39PS16X3EFR",
            "description": "sale unique id"
          },
          "marketId": {
            "type": "string",
            "example": "b7b0f252-62b5-417e-8a3d-3613a76a0d01",
            "description": "Market unique id"
          },
          "saleSourceId": {
            "type": "string",
            "example": "6056effb-5b44-4604-ba68-a085176a4223",
            "description": "Sale Source id"
          },
          "salesAndSettlementsMoleculeId": {
            "type": "string",
            "example": "01HZH9W4VJ9D6NVYMTY4FSS62J",
            "description": "Sales and settlements molecule id"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2022-08-11T15:44:00.605Z",
            "description": "File reception date"
          },
          "documentNumber": {
            "type": "string",
            "example": "2125846953651",
            "description": "Document number"
          },
          "paymentDate": {
            "type": "string",
            "example": "2022-12-01T09:54:17.000Z",
            "description": "Payment date"
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "pnrReference": {
            "type": "string",
            "example": "AA/UGZUHQ",
            "description": "PNR reference"
          },
          "marketName": {
            "type": "string",
            "example": "TUN",
            "description": "Market name"
          },
          "saleSource": {
            "type": "string",
            "example": "HOT",
            "description": "Sale Source"
          },
          "atomStatus": {
            "type": "string",
            "example": "PENDING",
            "description": "Atom status indicating whether a sale is matched with exception, matched without exception, expired, or pending for matching"
          },
          "grossAmount": {
            "description": "Gross Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleGrossAmountResponse"
              }
            ]
          },
          "documentType": {
            "type": "string",
            "example": "Ticket | EMD",
            "description": "A string of characters representing the type of the document being reported"
          },
          "ccBin": {
            "type": "string",
            "example": "677189",
            "description": "The 6 First Digits of the Credit Card Number"
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9457",
            "description": "The 4 Last Digits of the Credit Card Number"
          },
          "approvalCode": {
            "type": "string",
            "example": "334827",
            "description": "Characters assigned by the authorization system of the Issuer"
          },
          "isReadyForAccounting": {
            "type": "boolean",
            "description": "is Ready For Accounting"
          },
          "fileReceptionConfigurationName": {
            "type": "string",
            "example": "TUN",
            "description": "File Reception Configuration Name"
          },
          "paymentId": {
            "type": "string",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456"
          },
          "fopSubCode": {
            "type": "string",
            "description": "fop sub code",
            "example": "Mobile"
          },
          "operationId": {
            "type": "string",
            "example": "01K0M4BCQ7GRDW47HBK0RWAQKV",
            "description": "Operation id"
          }
        },
        "required": [
          "id",
          "marketId",
          "saleSourceId",
          "salesAndSettlementsMoleculeId",
          "fileReceptionDate",
          "fileReceptionConfigurationName"
        ]
      },
      "SettlementNetAmountResponse": {
        "type": "object",
        "properties": {
          "amountInSettlementCurrency": {
            "description": "amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInSettlementCurrency"
        ]
      },
      "SettlementDiscountRateAmountResponse": {
        "type": "object",
        "properties": {
          "amountInSettlementCurrency": {
            "description": "amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInSettlementCurrency"
        ]
      },
      "SettlementInterchangeFeeAmountResponse": {
        "type": "object",
        "properties": {
          "amountInSettlementCurrency": {
            "description": "amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInSettlementCurrency"
        ]
      },
      "SettlementAcquirerMarkupAmountResponse": {
        "type": "object",
        "properties": {
          "amountInSettlementCurrency": {
            "description": "amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInSettlementCurrency"
        ]
      },
      "SettlementCardSchemeFeeAmountResponse": {
        "type": "object",
        "properties": {
          "amountInSettlementCurrency": {
            "description": "amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInSettlementCurrency"
        ]
      },
      "SettlementGrossAmountResponse": {
        "type": "object",
        "properties": {
          "amountInPaymentCurrency": {
            "description": "Gross amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Gross amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInSettlementCurrency": {
            "description": "Gross amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Gross amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "ReceptionStatusResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the reception status"
          },
          "value": {
            "type": "string",
            "example": "RECEIVED",
            "description": "The value of the reception status"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "ReconciliationStatusResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the reconciliation status"
          },
          "value": {
            "type": "string",
            "example": "ACCEPTED",
            "description": "The value of the reconciliation status"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "ExpectedAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Expected amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInPaymentCurrency": {
            "description": "Expected amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency",
          "amountInPaymentCurrency"
        ]
      },
      "ReceivedAmountsResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Received amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInSettlementCurrency": {
            "description": "Received amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Received amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "DifferenceAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Difference amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency"
        ]
      },
      "PaymentDiscrepancyAmountResponse": {
        "type": "object",
        "properties": {
          "amountInPaymentCurrency": {
            "description": "Discrepancy amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Discrepancy amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "SettlementDiscrepancyAmountResponse": {
        "type": "object",
        "properties": {
          "amountInSettlementCurrency": {
            "description": "Settlement discrepancy amount in settlment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Settlement discrepancy amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "AccountingAdjustmentAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Accounting adjustment amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency"
        ]
      },
      "DiscrepancyAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Discrepancy amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency"
        ]
      },
      "ExpectedInstallmentDiscrepancyResponse": {
        "type": "object",
        "properties": {
          "paymentDiscrepancyAmount": {
            "description": "Payment discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentDiscrepancyAmountResponse"
              }
            ]
          },
          "settlementDiscrepancyAmount": {
            "description": "Settlement discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementDiscrepancyAmountResponse"
              }
            ]
          },
          "discrepancyAmount": {
            "description": "Discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountResponse"
              }
            ]
          }
        },
        "required": [
          "paymentDiscrepancyAmount",
          "settlementDiscrepancyAmount",
          "discrepancyAmount"
        ]
      },
      "InstallmentPartialDiscrepancyResponse": {
        "type": "object",
        "properties": {
          "paymentDiscrepancyAmount": {
            "description": "Payment discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentDiscrepancyAmountResponse"
              }
            ]
          },
          "settlementDiscrepancyAmount": {
            "description": "Settlement discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementDiscrepancyAmountResponse"
              }
            ]
          },
          "discrepancyAmount": {
            "description": "Discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountResponse"
              }
            ]
          }
        },
        "required": [
          "paymentDiscrepancyAmount",
          "settlementDiscrepancyAmount",
          "discrepancyAmount"
        ]
      },
      "DiscrepancyAmountsResponse": {
        "type": "object",
        "properties": {
          "differenceAmount": {
            "description": "Difference amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DifferenceAmountResponse"
              }
            ]
          },
          "paymentDiscrepancyAmount": {
            "description": "Payment discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentDiscrepancyAmountResponse"
              }
            ]
          },
          "settlementDiscrepancyAmount": {
            "description": "Settlement discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementDiscrepancyAmountResponse"
              }
            ]
          },
          "accountingAdjustmentAmount": {
            "description": "Accounting adjustment amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingAdjustmentAmountResponse"
              }
            ]
          },
          "discrepancyAmount": {
            "description": "Discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountResponse"
              }
            ]
          },
          "expectedInstallmentDiscrepancy": {
            "description": "Expected installment discrepancy",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedInstallmentDiscrepancyResponse"
              }
            ]
          },
          "partialInstallmentDiscrepancy": {
            "description": "Installment partial discrepancy",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstallmentPartialDiscrepancyResponse"
              }
            ]
          }
        },
        "required": [
          "differenceAmount",
          "paymentDiscrepancyAmount",
          "settlementDiscrepancyAmount",
          "accountingAdjustmentAmount",
          "discrepancyAmount",
          "expectedInstallmentDiscrepancy",
          "partialInstallmentDiscrepancy"
        ]
      },
      "TransactionTypeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 2,
            "description": "The id of the transaction type"
          },
          "value": {
            "type": "string",
            "example": "SETTLEMENT",
            "description": "The value of the transaction type"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "ConfirmationStatusResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Confirmation status id"
          },
          "name": {
            "type": "string",
            "example": "PROVISIONAL",
            "description": "Confirmation status name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ConfirmedDiscrepancyAmountsResponse": {
        "type": "object",
        "properties": {
          "paymentDiscrepancyAmount": {
            "description": "Payment discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentDiscrepancyAmountResponse"
              }
            ]
          },
          "settlementDiscrepancyAmount": {
            "description": "Settlement discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementDiscrepancyAmountResponse"
              }
            ]
          },
          "discrepancyAmount": {
            "description": "Discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountResponse"
              }
            ]
          }
        },
        "required": [
          "paymentDiscrepancyAmount",
          "settlementDiscrepancyAmount",
          "discrepancyAmount"
        ]
      },
      "TotalInstallmentAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Total installment amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInSettlementCurrency": {
            "description": "Total installment amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency",
          "amountInSettlementCurrency"
        ]
      },
      "SettlementHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "settlement ULID id."
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "orderId": {
            "type": "string",
            "example": "",
            "description": "order id."
          },
          "netAmount": {
            "description": "settlement net amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementNetAmountResponse"
              }
            ]
          },
          "discountRateAmount": {
            "example": "",
            "description": "settlement discount rate net amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementDiscountRateAmountResponse"
              }
            ]
          },
          "interchangeFeeAmount": {
            "example": "",
            "description": "settlement interchange fee amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementInterchangeFeeAmountResponse"
              }
            ]
          },
          "acquirerMarkupAmount": {
            "example": "",
            "description": "acquirer markup amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementAcquirerMarkupAmountResponse"
              }
            ]
          },
          "cardSchemeFeeAmount": {
            "example": "",
            "description": "settlement card scheme fee amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementCardSchemeFeeAmountResponse"
              }
            ]
          },
          "transactionId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Transaction ULID id."
          },
          "mcpFxRate": {
            "type": "number",
            "example": "",
            "description": "mcp fx rate."
          },
          "pnrReference": {
            "type": "string",
            "example": "UGZUHQ",
            "description": "A string of up to 6 Characters representing the PNR (Booking reservation) code."
          },
          "midName": {
            "type": "string",
            "example": ""
          },
          "arn": {
            "type": "string",
            "example": ""
          },
          "documentNumber": {
            "type": "string",
            "description": "The number to identify the accountable document."
          },
          "transactionCode": {
            "type": "string",
            "example": "SALES",
            "description": "A code to indicate the type of transaction being reported."
          },
          "settlementDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date on which the funds for this payment are available in your bank account."
          },
          "documentType": {
            "type": "string",
            "example": "Ticket",
            "description": "A string of up to 4 Characters representing the type of the document being reported."
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "grossAmount": {
            "description": "The settlement gross amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementGrossAmountResponse"
              }
            ]
          },
          "paymentDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date on which the charge was incurred by the card member."
          },
          "serviceFeeRate": {
            "type": "number",
            "example": "10",
            "description": "Percentage discount applied to the charges."
          },
          "ccNumber": {
            "type": "string",
            "example": "6771-8990-7882-9457",
            "description": "The account number of the card member that incurred this charge."
          },
          "approvalCode": {
            "type": "string",
            "description": "The first 6 characters of a series of characters assigned by the authorisation system of the Issuer"
          },
          "merchantId": {
            "type": "string",
            "example": "9429515695",
            "description": "To be retrieved from the file Name"
          },
          "ccBin": {
            "type": "string",
            "example": "677189",
            "description": "The 6 First Digits of the Credit Card Number defined in the field “Card Member Account "
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9457",
            "description": "The 4 Last Digits of the Credit Card Number defined in the field “Card Member Account Number”"
          },
          "acquirer": {
            "type": "string",
            "example": "AMEX",
            "description": "Acquirer Name from which the settlement has been received”"
          },
          "marketName": {
            "type": "string",
            "example": "LON",
            "description": "Market name from which the settlement has been received”"
          },
          "isInstallmentPayment": {
            "type": "boolean",
            "example": false,
            "description": "Is Installment Payment"
          },
          "installmentNumber": {
            "type": "number",
            "example": 1,
            "description": "Installment Number"
          },
          "receptionStatus": {
            "description": "Settlement reception status if its missing or received",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceptionStatusResponseDto"
              }
            ]
          },
          "reconciliationStatus": {
            "description": "Settlement reconciliation status indicating whether a sale is matched or pending for matching",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReconciliationStatusResponseDto"
              }
            ]
          },
          "expectedAmount": {
            "description": "Expected amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedAmountResponse"
              }
            ]
          },
          "receivedAmount": {
            "description": "Received amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivedAmountsResponse"
              }
            ]
          },
          "discrepancyAmounts": {
            "description": "Discrepancy amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountsResponse"
              }
            ]
          },
          "transactionType": {
            "description": "Transaction type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeResponse"
              }
            ]
          },
          "confirmationStatus": {
            "description": "Settlement confirmation status indicating whether a settlement is not applicable , provisional or confirmed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfirmationStatusResponseDTO"
              }
            ]
          },
          "associatedSettlementId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Associated Settlement id depending on the confirmation status."
          },
          "paymentOrderId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Payment order id related to the settlement"
          },
          "confirmedDiscrepancyAmounts": {
            "description": "Confirmed Discrepancy Amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfirmedDiscrepancyAmountsResponse"
              }
            ]
          },
          "totalInstallmentAmount": {
            "description": "Total installment amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalInstallmentAmountResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "orderId",
          "netAmount",
          "discountRateAmount",
          "interchangeFeeAmount",
          "acquirerMarkupAmount",
          "cardSchemeFeeAmount",
          "transactionId",
          "mcpFxRate",
          "isInstallmentPayment",
          "reconciliationStatus",
          "transactionType",
          "confirmationStatus"
        ]
      },
      "ReceptionStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the reception status"
          },
          "value": {
            "type": "string",
            "example": "RECEIVED",
            "description": "The value of the reception status"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "ReconciliationStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the reconciliation status"
          },
          "value": {
            "type": "string",
            "example": "ACCEPTED",
            "description": "The value of the reconciliation status"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "ReceivedAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Received amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInSettlementCurrency": {
            "description": "Received amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Received amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "ConfirmationStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Confirmation status id"
          },
          "name": {
            "type": "string",
            "example": "PROVISIONAL",
            "description": "Confirmation status name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "BankMatchingStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "bank matching status id"
          },
          "name": {
            "type": "string",
            "example": "PARTIAL",
            "description": "bank matching status name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GetSettlementByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "settlement ULID id."
          },
          "orderId": {
            "type": "string",
            "example": "",
            "description": "order id."
          },
          "netAmount": {
            "description": "settlement net amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementNetAmountResponse"
              }
            ]
          },
          "discountRateAmount": {
            "example": "",
            "description": "settlement discount rate net amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementDiscountRateAmountResponse"
              }
            ]
          },
          "interchangeFeeAmount": {
            "example": "",
            "description": "settlement interchange fee amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementInterchangeFeeAmountResponse"
              }
            ]
          },
          "acquirerMarkupAmount": {
            "example": "",
            "description": "acquirer markup amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementAcquirerMarkupAmountResponse"
              }
            ]
          },
          "cardSchemeFeeAmount": {
            "example": "",
            "description": "settlement card scheme fee amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementCardSchemeFeeAmountResponse"
              }
            ]
          },
          "transactionId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Transaction ULID id."
          },
          "mcpFxRate": {
            "type": "number",
            "example": "",
            "description": "mcp fx rate."
          },
          "pnrReference": {
            "type": "string",
            "example": "UGZUHQ",
            "description": "A string of up to 6 Characters representing the PNR (Booking reservation) code."
          },
          "midName": {
            "type": "string",
            "example": ""
          },
          "arn": {
            "type": "string",
            "example": ""
          },
          "documentNumber": {
            "type": "string",
            "description": "The number to identify the accountable document."
          },
          "transactionCode": {
            "type": "string",
            "example": "SALES",
            "description": "A code to indicate the type of transaction being reported."
          },
          "settlementDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date on which the funds for this payment are available in your bank account."
          },
          "documentType": {
            "type": "string",
            "example": "Ticket",
            "description": "A string of up to 4 Characters representing the type of the document being reported."
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "grossAmount": {
            "description": "The settlement gross amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementGrossAmountResponse"
              }
            ]
          },
          "paymentDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date on which the charge was incurred by the card member."
          },
          "serviceFeeRate": {
            "type": "number",
            "example": "10",
            "description": "Percentage discount applied to the charges."
          },
          "ccNumber": {
            "type": "string",
            "example": "6771-8990-7882-9457",
            "description": "The account number of the card member that incurred this charge."
          },
          "approvalCode": {
            "type": "string",
            "description": "The first 6 characters of a series of characters assigned by the authorisation system of the Issuer"
          },
          "merchantId": {
            "type": "string",
            "example": "9429515695",
            "description": "To be retrieved from the file Name"
          },
          "ccBin": {
            "type": "string",
            "example": "677189",
            "description": "The 6 First Digits of the Credit Card Number defined in the field “Card Member Account "
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9457",
            "description": "The 4 Last Digits of the Credit Card Number defined in the field “Card Member Account Number”"
          },
          "acquirer": {
            "type": "string",
            "example": "AMEX",
            "description": "Acquirer Name from which the settlement has been received”"
          },
          "marketName": {
            "type": "string",
            "example": "LON",
            "description": "Market name from which the settlement has been received”"
          },
          "isInstallmentPayment": {
            "type": "boolean",
            "example": false,
            "description": "Is Installment Payment"
          },
          "installmentNumber": {
            "type": "number",
            "example": 1,
            "description": "Installment Number"
          },
          "receptionStatus": {
            "description": "Settlement reception status if its missing or received",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceptionStatusResponse"
              }
            ]
          },
          "reconciliationStatus": {
            "description": "Settlement reconciliation status indicating whether a sale is matched or pending for matching",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReconciliationStatusResponse"
              }
            ]
          },
          "expectedAmount": {
            "description": "Expected amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedInstallmentDiscrepancyResponse"
              }
            ]
          },
          "receivedAmount": {
            "description": "Received amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivedAmountResponse"
              }
            ]
          },
          "discrepancyAmounts": {
            "description": "Discrepancy amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountsResponse"
              }
            ]
          },
          "transactionType": {
            "description": "Transaction type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeResponse"
              }
            ]
          },
          "confirmationStatus": {
            "description": "Settlement confirmation status indicating whether a settlement is not applicable, provisional, or confirmed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfirmationStatusResponse"
              }
            ]
          },
          "bankMatchingStatus": {
            "description": "bank matching status",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankMatchingStatusResponse"
              }
            ]
          },
          "associatedSettlementId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Associated Settlement id depending on the confirmation status."
          },
          "paymentOrderId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Payment order id related to the settlement"
          },
          "confirmedDiscrepancyAmounts": {
            "description": "Confirmed Discrepancy Amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfirmedDiscrepancyAmountsResponse"
              }
            ]
          },
          "totalInstallmentAmount": {
            "description": "Total installment amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalInstallmentAmountResponse"
              }
            ]
          },
          "paymentId": {
            "type": "string",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456"
          },
          "fopSubCode": {
            "type": "string",
            "description": "fop sub code",
            "example": "Mobile"
          },
          "batchId": {
            "type": "string",
            "description": "batch id",
            "example": "FGE"
          },
          "fileName": {
            "type": "string",
            "description": "file name",
            "example": "Settlement_GLOBAL_10_2024-08-27T14.00.00Z.csv"
          },
          "fileReceptionDate": {
            "type": "string",
            "description": "settlement file reception date",
            "example": "2025-09-03T10:38:17.951Z"
          }
        },
        "required": [
          "id",
          "orderId",
          "netAmount",
          "discountRateAmount",
          "interchangeFeeAmount",
          "acquirerMarkupAmount",
          "cardSchemeFeeAmount",
          "transactionId",
          "mcpFxRate",
          "isInstallmentPayment",
          "reconciliationStatus",
          "transactionType",
          "confirmationStatus",
          "bankMatchingStatus"
        ]
      },
      "SaleHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "sale ULID id."
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "transactionId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Transaction ULID id."
          },
          "agentCode": {
            "type": "string",
            "example": "91401936",
            "description": "A string of up to 8 Characters representing the agent who is accredited and authorised to issue standard traffic documents (STDs) on behalf of ticketing airlines."
          },
          "pnrReference": {
            "type": "string",
            "example": "MO6VR9",
            "description": "A string of up to 6 Characters representing the PNR (Booking reservation) code."
          },
          "passengerType": {
            "type": "string",
            "example": "ADT",
            "description": "A string of up to 3 Characters representing a code indicating the individual passenger type code"
          },
          "documentNumber": {
            "type": "string",
            "example": "2125842307877",
            "description": "The number to identify the accountable document."
          },
          "documentType": {
            "type": "string",
            "example": "Ticket",
            "description": "A string of up to 4 Characters representing the type of the document being reported."
          },
          "transactionCode": {
            "type": "string",
            "example": "TKTT",
            "description": "A code to indicate the type of transaction being reported."
          },
          "reasonForIssuanceCode": {
            "type": "string",
            "example": "D",
            "description": "A primary single character code, which defines the reason for issuance of the sale"
          },
          "paymentDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date of the transaction."
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "remittanceAmount": {
            "description": "The amount due by the agent to the airline or vice-versa for an accountable transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "approvalCode": {
            "type": "string",
            "example": "334827",
            "description": "The first 6 characters of a series of characters assigned by the authorisation system of the Issuer."
          },
          "invoiceNumber": {
            "type": "string",
            "example": "AX065220425324",
            "description": "An invoice number to identify a list of items submitted for settlement."
          },
          "ccNumber": {
            "type": "string",
            "example": "6771-8990-7882-9457",
            "description": "The account number of the card member that incurred this charge."
          },
          "ccBin": {
            "type": "string",
            "example": "677189",
            "description": "The 6 First Digits of the Credit Card Number defined in the field “Card Member Account."
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9457",
            "description": "The 4 Last Digits of the Credit Card Number defined in the field “Card Member Account Number."
          },
          "grossAmount": {
            "description": "Gross Amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleGrossAmountResponse"
              }
            ]
          },
          "transactionType": {
            "description": "Transaction type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeResponse"
              }
            ]
          },
          "totalInstallmentCount": {
            "type": "number",
            "example": 3,
            "description": "The total number of installments for a sale paid in installments"
          },
          "officeId": {
            "type": "string",
            "description": "Point of sale office id"
          },
          "customerProfileId": {
            "type": "string",
            "description": "Customer profile id"
          },
          "paymentId": {
            "type": "string",
            "description": "Payment Id"
          },
          "saleChannelType": {
            "type": "string",
            "description": "Sale channel Type",
            "example": "DIRECT"
          },
          "marketName": {
            "type": "string",
            "description": "Market Name",
            "example": "PAR"
          },
          "acquirerName": {
            "type": "string",
            "description": "Acquirer Name",
            "example": "SafetyPay"
          },
          "isReadyForAccounting": {
            "type": "boolean",
            "description": "is Ready For Accounting"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "transactionId",
          "transactionType",
          "marketName",
          "acquirerName"
        ]
      },
      "GetSaleByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "sale ULID id."
          },
          "transactionId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Transaction ULID id."
          },
          "agentCode": {
            "type": "string",
            "example": "91401936",
            "description": "A string of up to 8 Characters representing the agent who is accredited and authorised to issue standard traffic documents (STDs) on behalf of ticketing airlines."
          },
          "pnrReference": {
            "type": "string",
            "example": "MO6VR9",
            "description": "A string of up to 6 Characters representing the PNR (Booking reservation) code."
          },
          "passengerType": {
            "type": "string",
            "example": "ADT",
            "description": "A string of up to 3 Characters representing a code indicating the individual passenger type code"
          },
          "documentNumber": {
            "type": "string",
            "example": "2125842307877",
            "description": "The number to identify the accountable document."
          },
          "documentType": {
            "type": "string",
            "example": "Ticket",
            "description": "A string of up to 4 Characters representing the type of the document being reported."
          },
          "transactionCode": {
            "type": "string",
            "example": "TKTT",
            "description": "A code to indicate the type of transaction being reported."
          },
          "reasonForIssuanceCode": {
            "type": "string",
            "example": "D",
            "description": "A primary single character code, which defines the reason for issuance of the sale"
          },
          "paymentDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date of the transaction."
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "remittanceAmount": {
            "description": "The amount due by the agent to the airline or vice-versa for an accountable transaction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "approvalCode": {
            "type": "string",
            "example": "334827",
            "description": "The first 6 characters of a series of characters assigned by the authorisation system of the Issuer."
          },
          "invoiceNumber": {
            "type": "string",
            "example": "AX065220425324",
            "description": "An invoice number to identify a list of items submitted for settlement."
          },
          "ccNumber": {
            "type": "string",
            "example": "6771-8990-7882-9457",
            "description": "The account number of the card member that incurred this charge."
          },
          "ccBin": {
            "type": "string",
            "example": "677189",
            "description": "The 6 First Digits of the Credit Card Number defined in the field “Card Member Account."
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9457",
            "description": "The 4 Last Digits of the Credit Card Number defined in the field “Card Member Account Number."
          },
          "grossAmount": {
            "description": "Gross Amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleGrossAmountResponse"
              }
            ]
          },
          "transactionType": {
            "description": "Transaction type.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeResponse"
              }
            ]
          },
          "totalInstallmentCount": {
            "type": "number",
            "example": 3,
            "description": "The total number of installments for a sale paid in installments"
          },
          "officeId": {
            "type": "string",
            "description": "Point of sale office id"
          },
          "customerProfileId": {
            "type": "string",
            "description": "Customer profile id"
          },
          "paymentId": {
            "type": "string",
            "description": "Payment Id"
          },
          "saleChannelType": {
            "type": "string",
            "description": "Sale channel Type",
            "example": "DIRECT"
          },
          "marketName": {
            "type": "string",
            "description": "Market Name",
            "example": "PAR"
          },
          "acquirerName": {
            "type": "string",
            "description": "Acquirer Name",
            "example": "SafetyPay"
          },
          "isReadyForAccounting": {
            "type": "boolean",
            "description": "is Ready For Accounting"
          },
          "fopSubCode": {
            "type": "string",
            "description": "fop sub code",
            "example": "Mobile"
          },
          "fileName": {
            "type": "string",
            "description": "Sale file name",
            "example": "HOT"
          },
          "fileReceptionDate": {
            "type": "string",
            "description": "Sale file reception sade",
            "example": "2025-09-03T10:38:18.188Z"
          },
          "saleSource": {
            "type": "string",
            "description": "Sale data source",
            "example": "HOT"
          },
          "settlementCurrency": {
            "type": "string",
            "description": "Settlement currency",
            "example": "EUR"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant id",
            "example": "01K47JFTJCEXSBBQ39KT7R7WVV"
          },
          "expectedSettlementDate": {
            "type": "string",
            "description": "Expected settlement date",
            "example": "2025-09-03T10:38:18.188Z"
          }
        },
        "required": [
          "id",
          "transactionId",
          "transactionType",
          "marketName",
          "acquirerName",
          "fileName",
          "fileReceptionDate",
          "saleSource",
          "settlementCurrency",
          "merchantId",
          "expectedSettlementDate"
        ]
      },
      "ListSettlementsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Settlement ULID id."
          },
          "transactionId": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Transaction ULID id."
          },
          "pnrReference": {
            "type": "string",
            "example": "UGZUHQ",
            "description": "A string of up to 6 Characters representing the PNR (Booking reservation) code."
          },
          "documentNumber": {
            "type": "string",
            "description": "The number to identify the accountable document."
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "settlementDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date on which the charge was settled by the card member."
          },
          "paymentDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date on which the charge was incurred by the card member."
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2022-10-10T15:30:00.000Z",
            "description": "The date on which the charge was incurred by the card member."
          },
          "marketId": {
            "type": "string",
            "example": "d1ff5a11-cba3-4daa-8d4c-5371d899a9ce",
            "description": "Market id"
          },
          "marketName": {
            "type": "string",
            "example": "TUN",
            "description": "Market name"
          },
          "acquirerId": {
            "type": "string",
            "example": "6e2ca204-229e-470e-aaea-e6395ad7c183",
            "description": "Acquirer id"
          },
          "acquirer": {
            "type": "string",
            "example": "HOT",
            "description": "Acquirer name"
          },
          "operationId": {
            "type": "string",
            "example": "01K0M4BCQ7GRDW47HBK0RWAQKV",
            "description": "Operation id"
          },
          "atomStatus": {
            "type": "string",
            "example": "PENDING",
            "description": "Atom status indicating whether a sale is matched with exception, matched without exception, expired, or pending for matching"
          },
          "isInstallmentPayment": {
            "type": "boolean",
            "example": "true",
            "description": "Indicates whether the settlement is an installment or not."
          },
          "totalInstallmentCount": {
            "type": "number",
            "example": 10,
            "description": "The total count of installments to be received and reconciled, provided if isInstallmentPayment equals to true."
          },
          "installmentNumber": {
            "type": "number",
            "example": 4,
            "description": "The installment number, provided if isInstallmentPayment equals to true. "
          },
          "grossAmount": {
            "description": "Gross amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementGrossAmountResponse"
              }
            ]
          },
          "confirmationStatus": {
            "description": "Settlement confirmation status indicating whether a settlement is not applicable , provisional or confirmed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfirmationStatusResponse"
              }
            ]
          },
          "age": {
            "type": "number",
            "description": "The age of a settlement, calculated from the settlement date to the present"
          },
          "approvalCode": {
            "type": "string",
            "example": "046686",
            "description": "Settlement approval code"
          },
          "ccBin": {
            "type": "string",
            "example": "465770",
            "description": "Settlement credit card bin"
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "8535",
            "description": "Settlement credit card four last digits"
          },
          "fileReceptionConfigurationName": {
            "type": "string",
            "example": "TUN",
            "description": "File reception configuration name"
          },
          "paymentOrderReference": {
            "type": "string",
            "example": "123456",
            "description": "Payment order reference"
          },
          "paymentId": {
            "type": "string",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456"
          },
          "fopSubCode": {
            "type": "string",
            "description": "fop sub code",
            "example": "Mobile"
          }
        },
        "required": [
          "isInstallmentPayment"
        ]
      },
      "ListRatesOfExchangeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAJKKWXY1BKK39PS16X3EFR",
            "description": "Rate of exchange unique id"
          },
          "currency": {
            "type": "string",
            "example": "EUR",
            "description": "Foreign currency"
          },
          "value": {
            "type": "string",
            "example": "0.0987",
            "description": "Value of the rate of exchange from or to original currency"
          },
          "effectiveDate": {
            "type": "string",
            "example": "2022-09-01T00:00:00.000Z",
            "description": "Effective date of the rate of exchange"
          },
          "expirationDate": {
            "type": "string",
            "example": "2022-09-30T00:00:00.000Z",
            "description": "Expiration date of the rate of exchange"
          }
        },
        "required": [
          "id",
          "currency",
          "value",
          "effectiveDate",
          "expirationDate"
        ]
      },
      "DeleteSaleHttpRequest": {
        "type": "object",
        "properties": {
          "deletionReasonId": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Deletion reason id"
          }
        },
        "required": [
          "deletionReasonId"
        ]
      },
      "DeleteSettlementHttpRequest": {
        "type": "object",
        "properties": {
          "deletionReasonId": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Delete reason id"
          }
        },
        "required": [
          "deletionReasonId"
        ]
      },
      "ListErrorCodesHttpResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "example": "TRANSACTION.ON_HOLD_FOR_ROE",
            "description": "error code"
          },
          "errorMessage": {
            "type": "string",
            "example": "On Hold For ROE",
            "description": "error message"
          }
        },
        "required": [
          "errorCode",
          "errorMessage"
        ]
      },
      "ListFailedTransactionsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTCCWB1YKQ4DS9F3AFJN",
            "description": "Failed transaction id"
          },
          "errorCode": {
            "type": "string",
            "example": "HOT.ERROR.CODE.30",
            "description": "Error code"
          },
          "cannedMessage": {
            "type": "string",
            "example": "HOT Transaction without currency",
            "description": "Canned message"
          },
          "context": {
            "type": "string",
            "example": "HOT transaction with DocumentNumber= xxxxx, PnrReference= and TransactionDate= 220222",
            "description": "Context"
          },
          "fileName": {
            "type": "string",
            "example": "HOT_PAR",
            "description": "File name"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "File reception date"
          },
          "datasourceName": {
            "type": "string",
            "example": "HOT",
            "description": "Datasource name"
          },
          "sanityCheckStatus": {
            "type": "string",
            "example": "CORRUPTED",
            "description": "Sanity check status"
          },
          "duplicationCheckStatus": {
            "type": "string",
            "example": "NEW",
            "description": "Duplication check status"
          },
          "relatedTo": {
            "type": "string",
            "example": "01K47JFTCD3WFAZGJ6G5GVJP3H",
            "description": "Related transaction id of a duplicated marked one"
          }
        },
        "required": [
          "id",
          "errorCode",
          "cannedMessage",
          "context",
          "fileName",
          "fileReceptionDate",
          "datasourceName",
          "sanityCheckStatus",
          "duplicationCheckStatus",
          "relatedTo"
        ]
      },
      "MonetaryAmountVO": {
        "type": "object",
        "properties": {}
      },
      "ListFailedSettlementsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTK2VCWXE8PA8QA9QJ82",
            "description": "Failed settlement id"
          },
          "source": {
            "type": "string",
            "example": "Settlement",
            "description": "Failed settlement source"
          },
          "documentNumber": {
            "type": "string",
            "example": "0459313902321",
            "description": "Document number"
          },
          "pnrReference": {
            "type": "string",
            "example": "P5Y1MN",
            "description": "PNR"
          },
          "ccBin": {
            "type": "string",
            "example": "45717360",
            "description": "First eight digits of credit card"
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9920",
            "description": "Last four digits of credit card"
          },
          "approvalCode": {
            "type": "string",
            "example": "179812",
            "description": "Approval code"
          },
          "settlementDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Settlement date"
          },
          "receptionDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Reception date"
          },
          "amountInSettlementCurrency": {
            "example": "315.1365508008",
            "description": "Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountVO"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "example": "315.1365508008",
            "description": "Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountVO"
              }
            ]
          },
          "status": {
            "type": "string",
            "example": "Duplicate",
            "description": "settlement status"
          },
          "errorCode": {
            "type": "string",
            "example": "Duplicated",
            "description": "Error code"
          },
          "errorMessage": {
            "type": "string",
            "example": "Duplicated settlement",
            "description": "Error code description"
          },
          "operationId": {
            "type": "string",
            "example": "01K47JFTK294WP389W47W3J59T",
            "description": "operation id"
          },
          "errorValue": {
            "type": "string",
            "example": "CCCB",
            "description": "Error value"
          },
          "paymentOrderReference": {
            "type": "string",
            "example": "123456",
            "description": "Payment order reference"
          }
        },
        "required": [
          "id",
          "source",
          "documentNumber",
          "pnrReference",
          "ccBin",
          "ccFourLastDigits",
          "approvalCode",
          "settlementDate",
          "receptionDate",
          "amountInSettlementCurrency",
          "amountInAccountingCurrency",
          "status",
          "errorCode",
          "errorMessage",
          "operationId",
          "errorValue"
        ]
      },
      "GetFailedTransactionByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTDT0BWQC8GPXNA39Y3D",
            "description": "Failed transaction id"
          },
          "operationId": {
            "type": "string",
            "example": "ed89c3a4-2d35-4bc7-bda3-0d6c4311682d",
            "description": "Failed transaction operation id"
          },
          "fileName": {
            "type": "string",
            "example": "HOT_PAR",
            "description": "File name"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "File reception date"
          },
          "datasourceName": {
            "type": "string",
            "example": "HOT",
            "description": "Datasource name"
          },
          "sanityCheckStatus": {
            "type": "string",
            "example": "CORRUPTED",
            "description": "Sanity check status"
          },
          "duplicationCheckStatus": {
            "type": "string",
            "example": "NEW",
            "description": "Duplication check status"
          },
          "relatedTo": {
            "type": "string",
            "example": "01K47JFTDTTVD788Z015WK5ZB2",
            "description": "Related transaction id of a duplicated marked one"
          },
          "errorCode": {
            "type": "string",
            "example": "HOT.ERROR.CODE.30",
            "description": "Error code"
          },
          "data": {
            "type": "string",
            "example": "{\"dateOfIssue\":\"221114\",\"recordType\":\"BKS0000000739\",\"invoiceNumber\":\"AX232220609938\",documentAmount:{ \"taxes\": [{\"taxFeeType\": \"YQ\",\"taxFeeAmount\": 0},...],...},...}",
            "description": "Data"
          }
        },
        "required": [
          "id",
          "operationId",
          "fileName",
          "fileReceptionDate",
          "datasourceName",
          "sanityCheckStatus",
          "duplicationCheckStatus",
          "relatedTo",
          "errorCode",
          "data"
        ]
      },
      "GetAcceptedTransactionByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTE8D00G2WKSJE7X3SEG",
            "description": "Accepted transaction id"
          },
          "operationId": {
            "type": "string",
            "example": "01K47JFTE8XR46VSJVE32N5GBG",
            "description": "Operation id"
          },
          "createdAt": {
            "type": "string",
            "example": "2025-09-03T10:38:18.057Z",
            "description": "Created At date time format"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-09-03T10:38:18.057Z",
            "description": "Updated At date time format"
          },
          "fileName": {
            "type": "string",
            "example": "HOT_PAR",
            "description": "File name"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "File reception date"
          },
          "datasourceName": {
            "type": "string",
            "example": "HOT",
            "description": "Datasource name"
          }
        },
        "required": [
          "id",
          "operationId",
          "createdAt",
          "updatedAt",
          "fileName",
          "fileReceptionDate",
          "datasourceName"
        ]
      },
      "BankDepositAmountResponse": {
        "type": "object",
        "properties": {
          "amountInDepositCurrency": {
            "description": "Amount in deposit currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInDepositCurrency",
          "amountInGlobalCurrency",
          "amountInAccountingCurrency"
        ]
      },
      "GetBankDepositByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Bank Deposit id."
          },
          "bankAccountNumber": {
            "type": "string",
            "example": "123456789",
            "description": "Bank Account Number."
          },
          "depositAmount": {
            "description": "Bank deposit amounts in different currencies.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankDepositAmountResponse"
              }
            ]
          },
          "depositDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date of the deposit."
          },
          "bankSourceName": {
            "type": "string",
            "example": "LATAM_SAP",
            "description": "The Bank Source Name."
          },
          "acquirerName": {
            "type": "string",
            "example": "AMEX",
            "description": "The Acquirer Name."
          },
          "bankDepositReference": {
            "type": "string",
            "example": "TX-050430",
            "description": "The association key between payment order and bank deposit."
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2024-10-14T09:35:37.000Z",
            "description": "File reception date"
          }
        },
        "required": [
          "id",
          "bankAccountNumber",
          "depositAmount",
          "depositDate",
          "bankSourceName",
          "acquirerName",
          "bankDepositReference",
          "fileReceptionDate"
        ]
      },
      "ListBankDepositsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Bank Deposit id."
          },
          "marketName": {
            "type": "string",
            "example": "TUN",
            "description": "Market Name"
          },
          "bankAccountNumber": {
            "type": "string",
            "example": "123456789",
            "description": "Bank Account Number."
          },
          "depositAmount": {
            "description": "Bank deposit amounts in different currencies.",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankDepositAmountResponse"
              }
            ]
          },
          "depositDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date of the deposit."
          },
          "bankSourceName": {
            "type": "string",
            "example": "LATAM_SAP",
            "description": "The Bank Source Name."
          },
          "receptionDate": {
            "type": "string",
            "example": "2022-09-08T09:00:00.000Z",
            "description": "Reception date"
          },
          "bankDepositReference": {
            "type": "string",
            "example": "TX123123153XT",
            "description": "Bank deposit reference"
          },
          "acquirer": {
            "type": "string",
            "example": "DPO",
            "description": "Acquirer Name"
          }
        },
        "required": [
          "id",
          "marketName",
          "bankAccountNumber",
          "depositAmount",
          "depositDate",
          "bankSourceName",
          "receptionDate",
          "bankDepositReference",
          "acquirer"
        ]
      },
      "ListFailedSalesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTN71PNE4270AXE6V81C",
            "description": "Failed Sale id"
          },
          "grossAmount": {
            "description": "Gross Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleGrossAmountResponse"
              }
            ]
          },
          "approvalCode": {
            "type": "string",
            "example": "179812",
            "description": "Approval code"
          },
          "ccBin": {
            "type": "string",
            "example": "45717360",
            "description": "First eight digits of credit card"
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9920",
            "description": "Last four digits of credit card"
          },
          "documentNumber": {
            "type": "string",
            "example": "0459313902321",
            "description": "Document number"
          },
          "errorCode": {
            "type": "string",
            "example": "Duplicated",
            "description": "Error code"
          },
          "errorMessage": {
            "type": "string",
            "example": "Duplicated sale",
            "description": "Error code description"
          },
          "pnrReference": {
            "type": "string",
            "example": "P5Y1MN",
            "description": "PNR"
          },
          "receptionDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Reception date"
          },
          "paymentDate": {
            "type": "string",
            "example": "2024-08-08T09:00:00.000Z",
            "description": "Sale date"
          },
          "source": {
            "type": "string",
            "example": "Sale",
            "description": "Failed sale source"
          },
          "status": {
            "type": "string",
            "example": "Accepted",
            "description": "sale status"
          },
          "orderId": {
            "type": "string",
            "example": "",
            "description": "order id."
          },
          "documentType": {
            "type": "string",
            "example": "Ticket | EMD",
            "description": "A string of characters representing the type of the document being reported"
          },
          "formOfPaymentCode": {
            "type": "string",
            "description": "Form Of Payment Code"
          },
          "operationId": {
            "type": "string",
            "example": "01K47JFTN8V02W8RPR1SKWXV2C",
            "description": "operation id"
          },
          "errorValue": {
            "type": "string",
            "example": "CCCB",
            "description": "Error value"
          }
        },
        "required": [
          "id",
          "approvalCode",
          "ccBin",
          "ccFourLastDigits",
          "documentNumber",
          "errorCode",
          "errorMessage",
          "pnrReference",
          "receptionDate",
          "paymentDate",
          "source",
          "status",
          "orderId",
          "formOfPaymentCode",
          "operationId",
          "errorValue"
        ]
      },
      "ListFailedBankDepositsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTP34V5Q8EM3QKA325KQ",
            "description": "Failed Bank Deposit id"
          },
          "amountInAccountingCurrency": {
            "description": "Failed Bank Deposit Amount In Accounting Currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInDepositCurrency": {
            "description": "Failed Bank Deposit Amount In Deposit Currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "Bank Account Number"
          },
          "depositDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "deposit date"
          },
          "bankSourceName": {
            "type": "string",
            "example": "BANK",
            "description": "bank source name"
          },
          "status": {
            "type": "string",
            "example": "ON_HOLD"
          },
          "errorCode": {
            "type": "string",
            "example": "Duplicated",
            "description": "Error code"
          },
          "errorMessage": {
            "type": "string",
            "example": "Duplicated sale",
            "description": "Error code description"
          },
          "errorValue": {
            "type": "string",
            "example": "CCCB",
            "description": "Error value"
          }
        },
        "required": [
          "id",
          "amountInAccountingCurrency",
          "amountInDepositCurrency",
          "bankAccountNumber",
          "depositDate",
          "bankSourceName",
          "status",
          "errorCode",
          "errorMessage",
          "errorValue"
        ]
      },
      "DeletionReasonResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "deletion reason id"
          },
          "cannedMessage": {
            "type": "string",
            "description": "deletion reason message"
          }
        }
      },
      "ListDeletedSalesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTQNNR07SSYDYM5JMCX7",
            "description": "Failed Sale id"
          },
          "saleSourceId": {
            "type": "string",
            "example": "3c9be06b-152e-4517-a6a4-a2f9e6eed50a",
            "description": "Sale source id"
          },
          "saleSource": {
            "type": "string",
            "example": "Sale",
            "description": "Sale source name"
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "grossAmount": {
            "description": "Gross Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SaleGrossAmountResponse"
              }
            ]
          },
          "approvalCode": {
            "type": "string",
            "example": "179812",
            "description": "Approval code"
          },
          "ccBin": {
            "type": "string",
            "example": "45717360",
            "description": "First eight digits of credit card"
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9920",
            "description": "Last four digits of credit card"
          },
          "documentNumber": {
            "type": "string",
            "example": "0459313902321",
            "description": "Document number"
          },
          "pnrReference": {
            "type": "string",
            "example": "P5Y1MN",
            "description": "PNR"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "File reception date"
          },
          "paymentDate": {
            "type": "string",
            "example": "2024-08-08T09:00:00.000Z",
            "description": "Sale date"
          },
          "deletionDate": {
            "type": "string",
            "example": "2024-08-08T09:00:00.000Z",
            "description": "Sale deletion date"
          },
          "deletedBy": {
            "type": "string",
            "example": "user",
            "description": "Sale deleted by"
          },
          "deletionReason": {
            "example": "user",
            "description": "Sale Transaction With Invalid CCBin",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeletionReasonResponse"
              }
            ]
          },
          "documentType": {
            "type": "string",
            "example": "Ticket | EMD",
            "description": "A string of characters representing the type of the document being reported"
          },
          "paymentId": {
            "type": "string",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456"
          },
          "fopSubCode": {
            "type": "string",
            "description": "fop sub code",
            "example": "Mobile"
          },
          "operationId": {
            "type": "string",
            "example": "01K0M4BCQ7GRDW47HBK0RWAQKV",
            "description": "Operation id"
          }
        },
        "required": [
          "id",
          "saleSourceId",
          "saleSource",
          "approvalCode",
          "ccBin",
          "ccFourLastDigits",
          "documentNumber",
          "pnrReference",
          "fileReceptionDate",
          "paymentDate",
          "deletionDate",
          "deletedBy",
          "deletionReason"
        ]
      },
      "ListDeletedSettlementsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTRV1SA757Q49VY1TX3G",
            "description": "Failed Settlement id"
          },
          "saleSourceId": {
            "type": "string",
            "example": "4a7faadc-1fc1-44c7-b03e-9ad8affc5d12",
            "description": "Settlement source id"
          },
          "acquirer": {
            "type": "string",
            "example": "Settlement",
            "description": "Settlement source name"
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "grossAmount": {
            "description": "Gross Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementGrossAmountResponse"
              }
            ]
          },
          "approvalCode": {
            "type": "string",
            "example": "179812",
            "description": "Approval code"
          },
          "ccBin": {
            "type": "string",
            "example": "45717360",
            "description": "First eight digits of credit card"
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9920",
            "description": "Last four digits of credit card"
          },
          "documentNumber": {
            "type": "string",
            "example": "0459313902321",
            "description": "Document number"
          },
          "pnrReference": {
            "type": "string",
            "example": "P5Y1MN",
            "description": "PNR"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "File reception date"
          },
          "settlementDate": {
            "type": "string",
            "example": "2024-08-08T09:00:00.000Z",
            "description": "Settlement date"
          },
          "deletionDate": {
            "type": "string",
            "example": "2024-08-08T09:00:00.000Z",
            "description": "Settlement deletion date"
          },
          "deletedBy": {
            "type": "string",
            "example": "user",
            "description": "Settlement deleted by"
          },
          "deletionReason": {
            "example": "user",
            "description": "Settlement Transaction With Invalid CCBin",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeletionReasonResponse"
              }
            ]
          },
          "paymentOrderReference": {
            "type": "string",
            "example": "123456",
            "description": "Payment order reference"
          },
          "paymentId": {
            "type": "string",
            "description": "payment Id",
            "example": "PAY20250429XYZ123456"
          },
          "fopSubCode": {
            "type": "string",
            "description": "fop sub code",
            "example": "Mobile"
          },
          "transactionType": {
            "description": "Transaction type",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeResponse"
              }
            ]
          },
          "operationId": {
            "type": "string",
            "example": "01K0M4BCQ7GRDW47HBK0RWAQKV",
            "description": "Operation id"
          }
        },
        "required": [
          "id",
          "saleSourceId",
          "acquirer",
          "approvalCode",
          "ccBin",
          "ccFourLastDigits",
          "documentNumber",
          "pnrReference",
          "fileReceptionDate",
          "settlementDate",
          "deletionDate",
          "deletedBy",
          "deletionReason",
          "paymentId",
          "fopSubCode",
          "transactionType"
        ]
      },
      "DeletedSaleGrossAmountResponse": {
        "type": "object",
        "properties": {
          "amountInPaymentCurrency": {
            "description": "Gross amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Gross amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Gross amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "GetDeletedSaleByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Sale id."
          },
          "marketId": {
            "type": "string",
            "example": "b7b0f252-62b5-417e-8a3d-3613a76a0d01",
            "description": "Market id."
          },
          "saleSourceId": {
            "type": "string",
            "example": "6056effb-5b44-4604-ba68-a085176a4223",
            "description": "Sale source id."
          },
          "documentNumber": {
            "type": "string",
            "example": "2125842307877",
            "description": "The number to identify the accountable document."
          },
          "paymentDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date of the transaction."
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "pnrReference": {
            "type": "string",
            "example": "MO6VR9",
            "description": "A string of up to 6 Characters representing the PNR (Booking reservation) code."
          },
          "marketName": {
            "type": "string",
            "description": "Market Name",
            "example": "PAR"
          },
          "saleSource": {
            "type": "string",
            "description": "Sale source Name",
            "example": "HOT"
          },
          "grossAmount": {
            "description": "Gross Amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/DeletedSaleGrossAmountResponse"
              }
            ]
          },
          "documentType": {
            "type": "string",
            "example": "Ticket",
            "description": "A string of up to 4 Characters representing the type of the document being reported."
          },
          "ccBin": {
            "type": "string",
            "example": "677189",
            "description": "The 6 First Digits of the Credit Card Number defined in the field “Card Member Account."
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9457",
            "description": "The 4 Last Digits of the Credit Card Number defined in the field “Card Member Account Number."
          },
          "approvalCode": {
            "type": "string",
            "example": "334827",
            "description": "The first 6 characters of a series of characters assigned by the authorisation system of the Issuer."
          },
          "passengerType": {
            "type": "string",
            "example": "ADT",
            "description": "A string of up to 3 Characters representing a code indicating the individual passenger type code"
          },
          "paymentId": {
            "type": "string",
            "example": "125478956647895",
            "description": "Payment Id"
          },
          "customerProfileId": {
            "type": "string",
            "example": "01GBAJKKWXY1BKK39PS16X3EFR",
            "description": "Customer profile id"
          },
          "saleChannelType": {
            "type": "string",
            "description": "Sale channel Type",
            "example": "DIRECT"
          },
          "officeId": {
            "type": "string",
            "example": "2D555DF",
            "description": "Point of sale office id"
          },
          "acquirerName": {
            "type": "string",
            "description": "Acquirer Name",
            "example": "SafetyPay"
          },
          "totalInstallmentCount": {
            "type": "number",
            "example": 3,
            "description": "The total number of installments for a sale paid in installments"
          }
        },
        "required": [
          "id",
          "marketId",
          "saleSourceId",
          "acquirerName"
        ]
      },
      "FailedSaleGrossAmountResponse": {
        "type": "object",
        "properties": {
          "amountInPaymentCurrency": {
            "description": "Gross amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Gross amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Gross amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "GetFailedSaleByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GB4YRDS2BWEEZ04YSBP1WRPK",
            "description": "Sale id."
          },
          "marketId": {
            "type": "string",
            "example": "b7b0f252-62b5-417e-8a3d-3613a76a0d01",
            "description": "Market id."
          },
          "saleSourceId": {
            "type": "string",
            "example": "6056effb-5b44-4604-ba68-a085176a4223",
            "description": "Sale source id."
          },
          "documentNumber": {
            "type": "string",
            "example": "2125842307877",
            "description": "The number to identify the accountable document."
          },
          "paymentDate": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "The date of the transaction."
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "pnrReference": {
            "type": "string",
            "example": "MO6VR9",
            "description": "A string of up to 6 Characters representing the PNR (Booking reservation) code."
          },
          "marketName": {
            "type": "string",
            "description": "Market Name",
            "example": "PAR"
          },
          "saleSource": {
            "type": "string",
            "description": "Sale source Name",
            "example": "HOT"
          },
          "grossAmount": {
            "description": "Gross Amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/FailedSaleGrossAmountResponse"
              }
            ]
          },
          "documentType": {
            "type": "string",
            "example": "Ticket",
            "description": "A string of up to 4 Characters representing the type of the document being reported."
          },
          "ccBin": {
            "type": "string",
            "example": "677189",
            "description": "The 6 First Digits of the Credit Card Number defined in the field “Card Member Account."
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "9457",
            "description": "The 4 Last Digits of the Credit Card Number defined in the field “Card Member Account Number."
          },
          "approvalCode": {
            "type": "string",
            "example": "334827",
            "description": "The first 6 characters of a series of characters assigned by the authorisation system of the Issuer."
          },
          "passengerType": {
            "type": "string",
            "example": "ADT",
            "description": "A string of up to 3 Characters representing a code indicating the individual passenger type code"
          },
          "paymentId": {
            "type": "string",
            "example": "125478956647895",
            "description": "Payment Id"
          },
          "customerProfileId": {
            "type": "string",
            "example": "01GBAJKKWXY1BKK39PS16X3EFR",
            "description": "Customer profile id"
          },
          "saleChannelType": {
            "type": "string",
            "description": "Sale channel Type",
            "example": "DIRECT"
          },
          "officeId": {
            "type": "string",
            "example": "2D555DF",
            "description": "Point of sale office id"
          },
          "acquirerName": {
            "type": "string",
            "description": "Acquirer Name",
            "example": "SafetyPay"
          },
          "orderId": {
            "type": "string",
            "description": "Order id",
            "example": "334"
          },
          "totalInstallmentCount": {
            "type": "number",
            "example": 3,
            "description": "The total number of installments for a sale paid in installments"
          }
        },
        "required": [
          "id",
          "marketId",
          "saleSourceId",
          "acquirerName",
          "orderId"
        ]
      },
      "ReplayOnHoldTransactionsHttpRequest": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "example": "TRANSACTION.ON_HOLD_FOR_ROE",
            "description": "On-Hold Transaction error"
          }
        },
        "required": [
          "errorCode"
        ]
      },
      "PaymentOrderAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "amountInAccountingCurrency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInSettlementCurrency": {
            "description": "amountInSettlementCurrency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "amountInGlobalCurrency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "MiscellaneousFeesAmountResponse": {
        "type": "object",
        "properties": {
          "amountInSettlementCurrency": {
            "description": "amountInSettlementCurrency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "GetPaymentOrderByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHTYPQAN778WB4D7K1BE6",
            "description": "id"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "fileReceptionDate"
          },
          "acquirer": {
            "type": "string",
            "example": "AMEX",
            "description": "acquirerName"
          },
          "paymentOrderAmount": {
            "description": "total Net Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentOrderAmountResponse"
              }
            ]
          },
          "paymentOrderReference": {
            "type": "string",
            "example": "123456",
            "description": "Payment Order reference"
          },
          "bankDepositReference": {
            "type": "string",
            "example": "eddzef785454yh5hty45hty4j",
            "description": "Bank deposit reference"
          },
          "bankAccountNumber": {
            "type": "string",
            "example": "86515684",
            "description": "Bank account number"
          },
          "bankDepositsAndPaymentOrdersMoleculeId": {
            "type": "string",
            "example": "01GBAPHTYPQAN778WB4D7K1BE6",
            "description": "bank Deposit And Payment Orders Molecule Id"
          },
          "paymentOrderDate": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "payment order date"
          },
          "settlementTransactionsCount": {
            "type": "number",
            "example": 20,
            "description": "settlement transactions count"
          },
          "miscellaneousFeesAmount": {
            "example": 20,
            "description": "miscellaneous fees amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiscellaneousFeesAmountResponse"
              }
            ]
          },
          "fileName": {
            "type": "string",
            "example": "HOT",
            "description": "file name"
          },
          "batchId": {
            "type": "string",
            "example": "01K47JFTXNTDRVR39WD1JDSKQ5",
            "description": "batch id"
          },
          "merchantId": {
            "type": "string",
            "example": "01K47JFTXNN22J7N6PHHNAX0Q5",
            "description": "merchant id"
          }
        },
        "required": [
          "id",
          "fileReceptionDate",
          "paymentOrderReference",
          "bankDepositReference",
          "bankAccountNumber",
          "bankDepositsAndPaymentOrdersMoleculeId",
          "paymentOrderDate",
          "settlementTransactionsCount",
          "miscellaneousFeesAmount",
          "fileName",
          "batchId",
          "merchantId"
        ]
      },
      "ListPaymentOrdersResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTYBTRFDVDQYBBTFG9JX",
            "description": "Payment order id"
          },
          "acquirerId": {
            "type": "string",
            "example": "01K47JFTYBXX9YBZJ4FDMP6XKC",
            "description": "Acquirer id"
          },
          "airline": {
            "type": "string",
            "example": "Finnair",
            "description": "Airline"
          },
          "operationId": {
            "type": "string",
            "example": "01K47JFTYBS3CMH4Y232FW12MD",
            "description": "Operation id"
          },
          "fileName": {
            "type": "string",
            "example": "File name",
            "description": "File name"
          },
          "paymentOrderAmount": {
            "description": "Payment Order Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentOrderAmountResponse"
              }
            ]
          },
          "acquirer": {
            "type": "string",
            "example": "AMEX",
            "description": "Acquirer name"
          },
          "bankDepositReference": {
            "type": "string",
            "example": "eddzef785454yh5hty45hty4j",
            "description": "Bank deposit reference"
          },
          "paymentOrderReference": {
            "type": "string",
            "example": "IJFVNSD",
            "description": "payment order reference"
          },
          "paymentOrderDate": {
            "type": "string",
            "example": "2025-09-03T10:38:18.571Z",
            "description": "payment order date"
          },
          "creationDate": {
            "type": "string",
            "example": "2025-09-03T10:38:18.571Z",
            "description": "payment order creation date"
          },
          "bankAccountNumber": {
            "type": "string",
            "example": "4555544IHD5566",
            "description": "bank account number"
          },
          "batchId": {
            "type": "string",
            "example": "01K47JFTYB2632490ET8EW1CYM",
            "description": "batch id"
          }
        },
        "required": [
          "id",
          "acquirerId",
          "airline",
          "operationId",
          "fileName",
          "bankDepositReference",
          "paymentOrderReference",
          "paymentOrderDate",
          "creationDate",
          "bankAccountNumber",
          "batchId"
        ]
      },
      "ListFailedPaymentOrdersResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFTZBFGRKNFXD9500X9HF",
            "description": "Payment order id"
          },
          "acquirerId": {
            "type": "string",
            "example": "01K47JFTZBGFPD6H2CAFY3SAF1",
            "description": "Acquirer id"
          },
          "acquirer": {
            "type": "string",
            "example": "AMEX",
            "description": "Acquirer name"
          },
          "creationDate": {
            "type": "string",
            "example": "2025-09-03T10:38:18.603Z",
            "description": "creation date"
          },
          "paymentOrderAmount": {
            "description": "payment order amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentOrderAmountResponse"
              }
            ]
          },
          "errorCode": {
            "type": "string",
            "description": "The error code of the failed payment order"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message of the failed payment order"
          },
          "errorValue": {
            "type": "string",
            "description": "The error value of the failed payment order"
          },
          "status": {
            "type": "string",
            "example": "Duplicate",
            "description": "payment order status"
          },
          "paymentOrderReference": {
            "type": "string",
            "description": "payment order reference"
          },
          "paymentOrderDate": {
            "type": "string",
            "description": "payment order date"
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "bank Account Number"
          },
          "bankDepositReference": {
            "type": "string",
            "description": "bank Deposit Reference"
          }
        },
        "required": [
          "id",
          "acquirerId",
          "acquirer",
          "creationDate",
          "paymentOrderAmount",
          "errorCode",
          "errorMessage",
          "errorValue",
          "status",
          "paymentOrderReference",
          "paymentOrderDate",
          "bankAccountNumber",
          "bankDepositReference"
        ]
      },
      "MiscellaneousFeeAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "amountInAccountingCurrency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInSettlementCurrency": {
            "description": "amountInSettlementCurrency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "ListFailedMiscellaneousFeesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFV0KHRVACXGQYRB0N9BG",
            "description": "Failed Miscellaneous fee id"
          },
          "acquirer": {
            "type": "string",
            "example": "AMEX",
            "description": "acquirerName"
          },
          "creationDate": {
            "type": "string",
            "example": "2025-09-03T10:38:18.643Z",
            "description": "creation date"
          },
          "feeCode": {
            "type": "string",
            "example": "Miscellaneous Fee",
            "description": "miscellaneous fee Code"
          },
          "miscellaneousFeeAmount": {
            "description": "miscellaneous fee Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiscellaneousFeeAmountResponse"
              }
            ]
          },
          "status": {
            "type": "string",
            "example": "Duplicate",
            "description": "miscellaneous fee status"
          },
          "errorCode": {
            "type": "string",
            "example": "TRANSACTION.ON_HOLD_FOR_ROE",
            "description": "Error code"
          },
          "errorMessage": {
            "type": "string",
            "example": "Missing ROE",
            "description": "Error code description"
          },
          "errorValue": {
            "type": "string",
            "example": "From EUR -> USD",
            "description": "Error value"
          }
        },
        "required": [
          "id",
          "creationDate",
          "status",
          "errorCode",
          "errorMessage",
          "errorValue"
        ]
      },
      "ListMiscellaneousFeesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFV1GYY468BP53D5SXR8B",
            "description": "Miscellaneous fee id"
          },
          "feeCode": {
            "type": "string",
            "example": "feeCode",
            "description": "Fee code"
          },
          "miscellaneousFeeAmount": {
            "description": "Miscellaneous Fee Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/MiscellaneousFeeAmountResponse"
              }
            ]
          },
          "acquirer": {
            "type": "string",
            "example": "AMEX",
            "description": "Acquirer name"
          },
          "creationDate": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "creation date"
          },
          "settlementDate": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "settlement date"
          },
          "paymentOrderReference": {
            "type": "string",
            "example": "AN5M-GHJK-DSLG",
            "description": "payment order"
          },
          "batchId": {
            "type": "string",
            "example": "01K47JFV1G7YBNH5RZ958M0WHH",
            "description": "batch ID"
          }
        },
        "required": [
          "id",
          "feeCode",
          "creationDate",
          "settlementDate",
          "paymentOrderReference",
          "batchId"
        ]
      },
      "ListFailedCapturesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01JVAB5NGBJ6XA5R6SEQ3Q0YBA",
            "description": "Unique identifier of the failed capture"
          },
          "datasourceId": {
            "type": "string",
            "example": "409bcc25-6b48-4160-852f-a1fee6416f3f",
            "description": "Identifier of the data source"
          },
          "datasourceName": {
            "type": "string",
            "example": "CSP_v23",
            "description": "Name of the data source"
          },
          "documentNumber": {
            "type": "string",
            "example": "2125846953651",
            "description": "Document number associated with the failed capture"
          },
          "operationId": {
            "type": "string",
            "example": "01K0NYPMPYT6Y0ZYZAFY0MXVAR",
            "description": "Operation Id"
          },
          "amountInCaptureCurrency": {
            "description": "amount in capture currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "ccBin": {
            "type": "string",
            "example": "545465",
            "description": "First six digits (BIN) of the credit card used"
          },
          "ccFourLastDigits": {
            "type": "string",
            "example": "1234",
            "description": "Last four digits of the credit card used"
          },
          "approvalCode": {
            "type": "string",
            "example": "284048",
            "description": "Approval code"
          },
          "captureDate": {
            "type": "string",
            "example": "2025-05-16T09:00:00.000Z",
            "description": "Date and time when the capture occurred"
          },
          "fileReceptionDate": {
            "type": "string",
            "example": "2025-05-01T12:00:00.000Z",
            "description": "Date and time the file was received"
          },
          "status": {
            "type": "string",
            "example": "CORRUPTED",
            "description": "Processing status of the failed capture"
          },
          "errorCode": {
            "type": "string",
            "example": "CAPTURE_ERROR",
            "description": "Error code if the capture failed validation or processing"
          },
          "errorMessage": {
            "type": "string",
            "example": "CAPTURE",
            "description": "Detailed error message if available"
          }
        },
        "required": [
          "id",
          "datasourceId",
          "datasourceName",
          "documentNumber",
          "operationId",
          "amountInCaptureCurrency",
          "amountInAccountingCurrency",
          "ccBin",
          "ccFourLastDigits",
          "approvalCode",
          "captureDate",
          "fileReceptionDate",
          "status",
          "errorCode",
          "errorMessage"
        ]
      },
      "ChangeMatchingRuleNameHttpRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "New matching rule name"
          }
        },
        "required": [
          "name"
        ]
      },
      "ListMatchingRulesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5296b575-64ce-4b23-b1a8-9689c03d8472",
            "description": "Matching rule id."
          },
          "name": {
            "type": "string",
            "description": "User Input to name the rule"
          },
          "reconciliationKeys": {
            "example": "[\"transactionDate\"]",
            "description": "List of the Reconciliation Keys.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkType": {
            "type": "string",
            "example": "MANY_TO_MANY",
            "description": "Link type"
          },
          "dateRangeInSeconds": {
            "type": "number",
            "example": "360000",
            "description": "Maximum period duration between matched items expressed in seconds"
          },
          "acquirerCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific acquirers. If `isApplicable` is `false`, the rule applies to all acquirers without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "reconciliationKeys",
          "linkType",
          "dateRangeInSeconds",
          "acquirerCondition"
        ]
      },
      "MatchingRuleHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5296b575-64ce-4b23-b1a8-9689c03d8472",
            "description": "Matching rule id."
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "name": {
            "type": "string",
            "description": "User Input to name the rule"
          },
          "reconciliationKeys": {
            "example": "[\"transactionDate\"]",
            "description": "List of the Reconciliation Keys.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkType": {
            "type": "string",
            "example": "MANY_TO_MANY",
            "description": "link type",
            "enum": [
              "ONE_TO_ONE",
              "ONE_TO_MANY",
              "MANY_TO_MANY",
              "MANY_TO_ONE"
            ]
          },
          "dateRangeInSeconds": {
            "type": "number",
            "example": "360000",
            "description": "Number of Maximum Days between Matched Items."
          },
          "version": {
            "type": "number",
            "example": "1",
            "description": "matching rule version number."
          },
          "transactionType1": {
            "type": "number",
            "example": 1,
            "description": "Matching rule transaction type key referring to SALE"
          },
          "transactionType2": {
            "type": "number",
            "example": 2,
            "description": "Matching rule transaction type key referring to SETTLEMENT"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "reconciliationKeys",
          "linkType",
          "dateRangeInSeconds",
          "version",
          "transactionType1",
          "transactionType2"
        ]
      },
      "ListMatchingStacksHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Matching stack id.",
            "example": "01GQES1HY2V25Q7XHGSTMBGM4X"
          },
          "name": {
            "type": "string",
            "description": "Matching stack name.",
            "example": "V1"
          },
          "status": {
            "type": "string",
            "description": "Matching stack status.",
            "enum": [
              "DRAFT",
              "ACTIVATING",
              "ACTIVE",
              "INACTIVE"
            ],
            "example": "ACTIVE"
          },
          "ruleIds": {
            "example": "[\"3cd10d6e-ed8a-4a04-9f91-cd23503bd556\"]",
            "description": "List of rule ids related to the matching stack.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "The date when the matching stack is created",
            "example": "2022-08-08T09:00:00.000Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the matching stack",
            "example": "Santina"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "The date when the matching stack is last modified",
            "example": "2022-09-09T10:00:00.000Z"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The user who last modified the matching stack",
            "example": "Lillie"
          },
          "activatedAt": {
            "type": "string",
            "description": "The date when the matching stack is activated",
            "example": "2022-10-10T11:00:00.000Z"
          },
          "activatedBy": {
            "type": "string",
            "description": "The user who activated the matching stack",
            "example": "Sarai"
          },
          "activationRequestedAt": {
            "type": "string",
            "description": "The date when the activation of the matching stack was requested",
            "example": "2022-11-11T12:00:00.000Z"
          },
          "effectiveDate": {
            "type": "string",
            "description": "The date when the matching stack was/will be activated",
            "example": "2022-11-16T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "ruleIds",
          "createdAt",
          "createdBy",
          "lastModifiedAt",
          "lastModifiedBy"
        ]
      },
      "MatchingStackHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Matching stack id.",
            "example": "01GQES1HY2V25Q7XHGSTMBGM4X"
          },
          "name": {
            "type": "string",
            "description": "Matching stack name.",
            "example": "V1"
          },
          "status": {
            "type": "string",
            "description": "Matching stack status.",
            "enum": [
              "DRAFT",
              "ACTIVATING",
              "ACTIVE",
              "INACTIVE"
            ],
            "example": "ACTIVE"
          },
          "ruleIds": {
            "example": "[\"3cd10d6e-ed8a-4a04-9f91-cd23503bd556\"]",
            "description": "List of rule ids related to the matching stack.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "The date when the matching stack is created",
            "example": "2022-08-08T09:00:00.000Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the matching stack",
            "example": "Myrtie"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "The date when the matching stack is last modified",
            "example": "2022-09-09T10:00:00.000Z"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The user who last modified the matching stack",
            "example": "Bianka"
          },
          "activatedAt": {
            "type": "string",
            "description": "The date when the matching stack is activated",
            "example": "2022-10-10T11:00:00.000Z"
          },
          "activatedBy": {
            "type": "string",
            "description": "The user who activated the matching stack",
            "example": "Elton"
          },
          "activationRequestedAt": {
            "type": "string",
            "description": "The date when the activation of the matching stack is requested",
            "example": "2022-11-11T12:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "ruleIds",
          "createdAt",
          "createdBy",
          "lastModifiedAt",
          "lastModifiedBy"
        ]
      },
      "ChangeMatchingStackHttpRequest": {
        "type": "object",
        "properties": {
          "ruleIds": {
            "description": "New rule Ids to update the matching stack with",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ruleIds"
        ]
      },
      "MatchingStackActivationHttpRequest": {
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "example": "2025-09-05T10:38:20.314Z",
            "description": "Matching stack becomes effective after this date"
          }
        },
        "required": [
          "effectiveDate"
        ]
      },
      "RescheduleAdvancedMatchingRequest": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "string",
            "example": "0 0 1 * * *",
            "description": "Frequency of settlement reconciliation advanced matching (example means: Every day at 1am)"
          }
        },
        "required": [
          "frequency"
        ]
      },
      "GrossAmountResponse": {
        "type": "object",
        "properties": {
          "amountInPaymentCurrency": {
            "description": "Gross amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Gross amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInSettlementCurrency": {
            "description": "Gross amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Gross amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "ListSettlementReconciliationAlertsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01G5JMSC298PZVEB9JMKSF9W7P_01G5V40JE9J22Q1QTESA1BMAKV",
            "description": "Settlement reconciliation alert unique id: moleculeId_settlementId"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "settlementId": {
            "type": "string",
            "example": "1G5V40JE9J22Q1QTESA1BMAKV",
            "description": "Settlement unique id"
          },
          "moleculeId": {
            "type": "string",
            "example": "01G5JMSC298PZVEB9JMKSF9W7P",
            "description": "Molecule unique id"
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form Of Payment Code"
          },
          "documentNumber": {
            "type": "string",
            "example": "21212312323423",
            "description": "Document number"
          },
          "pnrReference": {
            "type": "string",
            "example": "7489M",
            "description": "PnrReference"
          },
          "settlementDate": {
            "type": "string",
            "example": "2022-10-13T00:00:00.000Z",
            "description": "Settlement date: the date when the settlement is created"
          },
          "matchingDate": {
            "type": "string",
            "example": "2022-10-17T00:00:00.000Z",
            "description": "Matching date: the date when the molecule is created"
          },
          "moleculeStatus": {
            "type": "string",
            "example": "AMOUNT_MISMATCH",
            "description": "Molecule status : the type of alert"
          },
          "discrepancyAmount": {
            "description": "Discrepancy amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountResponse"
              }
            ]
          },
          "grossAmount": {
            "description": "Gross amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/GrossAmountResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "settlementId",
          "moleculeId",
          "formOfPaymentCode",
          "documentNumber",
          "pnrReference",
          "settlementDate",
          "matchingDate",
          "moleculeStatus"
        ]
      },
      "SettlementFeeAlertHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "2cdc8ab1-6d50-49cc-ba14-54e4ac7ec231"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "feeRuleId": {
            "type": "string",
            "example": "6fb42a55-c9b3-4e15-bb0e-0c70042af76d",
            "description": "Fee rule id."
          },
          "settlementId": {
            "type": "string",
            "example": "01K47JFY5SC4M4YZ3NKYT52DT8",
            "description": "Settlement id."
          },
          "settlementCurrency": {
            "type": "string",
            "example": "EUR",
            "description": "Settlement currency."
          },
          "formOfPaymentAmountInSettlementCurrency": {
            "type": "number",
            "example": 123.23423,
            "description": "Form of payment amount in settlement currency."
          },
          "appliedFeeAmountInSettlementCurrency": {
            "type": "number",
            "example": 1.23423,
            "description": "Applied fee amount in settlement currency."
          },
          "expectedFeeAmountInSettlementCurrency": {
            "type": "number",
            "example": 1,
            "description": "Expected fee amount in settlement currency."
          },
          "feeDiscrepancyAmountInSettlementCurrency": {
            "type": "number",
            "example": 0.23423,
            "description": "Fee discrepancy amount in settlement currency."
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "feeRuleId",
          "settlementId",
          "settlementCurrency",
          "formOfPaymentAmountInSettlementCurrency",
          "appliedFeeAmountInSettlementCurrency",
          "expectedFeeAmountInSettlementCurrency",
          "feeDiscrepancyAmountInSettlementCurrency"
        ]
      },
      "ReconciliationAlertStatsResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "example": 10,
            "description": "The total count of alerts raised during the date range for a reconciliation alert type"
          },
          "totalAmountInAccountingCurrency": {
            "type": "number",
            "example": 4820,
            "description": "The total amount in accounting currency for a reconciliation alert type during the date range"
          }
        },
        "required": [
          "count",
          "totalAmountInAccountingCurrency"
        ]
      },
      "GetSettlementReconciliationAlertsHttpResponse": {
        "type": "object",
        "properties": {
          "mcpMismatch": {
            "description": "Settlement Reconciliation Alert : MCP Amount Mismatch stats summary for a given molecule creation date range",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReconciliationAlertStatsResponse"
              }
            ]
          },
          "monoCurrencyAmountMismatch": {
            "description": "Settlement Reconciliation Alert : MonoCurrency Amount Mismatch stats summary for a given molecule creation date range",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReconciliationAlertStatsResponse"
              }
            ]
          }
        },
        "required": [
          "mcpMismatch",
          "monoCurrencyAmountMismatch"
        ]
      },
      "TotalSalesAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Total sales amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInPaymentCurrency": {
            "description": "Total sales amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "TotalSettlementsAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Total settlements amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInSettlementCurrency": {
            "description": "Total settlements amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "MatchingStatusResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the matching status"
          },
          "value": {
            "type": "string",
            "example": "PARTIAL",
            "description": "The value of the matching status"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "GetSalesAndSettlementsMoleculeHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Molecule unique id"
          },
          "matchedRuleId": {
            "type": "string",
            "example": "519298af-7091-4cf8-8b85-2ce11f4e09ef",
            "description": "Matched rule id"
          },
          "matchedRuleName": {
            "type": "string",
            "example": "MANY_TO_ONE: PNR",
            "description": "Matched rule name"
          },
          "sales": {
            "example": "[\"01GBAPHTYPQAN778WB4D7K1BE6\"]",
            "description": "Sales",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "settlements": {
            "example": "[\"01GBAPJ6R5BSE3XBDAG5RAPJ9P\"]",
            "description": "Settlements",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reconciliationStatus": {
            "type": "string",
            "example": "ACCEPTED",
            "description": "Molecule Reconciliation status"
          },
          "isInstallmentPayment": {
            "type": "boolean",
            "example": true,
            "description": ""
          },
          "totalInstallmentCount": {
            "type": "number",
            "example": 10,
            "description": "Total Installment Count"
          },
          "disputedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who manually disputed the molecule. It will be set when the molecule is manually disputed"
          },
          "acceptedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who manually accepted the molecule. It will be set when the molecule is manually accepted"
          },
          "matchedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who manually matched the molecule. It will be set when the molecule is manually matched"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "discrepancyAmounts": {
            "description": "Discrepancy amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountsResponse"
              }
            ]
          },
          "totalSalesAmount": {
            "description": "Total sales amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalSalesAmountResponse"
              }
            ]
          },
          "totalSettlementsAmount": {
            "description": "Total settlements amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalSettlementsAmountResponse"
              }
            ]
          },
          "matchingStatus": {
            "description": "The molecule matching status",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchingStatusResponseDto"
              }
            ]
          },
          "unmatchedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who unmatched the molecule. It will be set when the molecule is manually unmatched"
          },
          "isLocked": {
            "type": "boolean",
            "example": false,
            "description": "True when the molecule is locked during the update from partial to complete"
          },
          "editedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who edited the molecule. It will be set when the molecule is edited"
          }
        },
        "required": [
          "id",
          "matchedRuleId",
          "matchedRuleName",
          "sales",
          "settlements",
          "reconciliationStatus",
          "isInstallmentPayment",
          "totalInstallmentCount",
          "createdAt",
          "updatedAt",
          "discrepancyAmounts",
          "totalSalesAmount",
          "totalSettlementsAmount",
          "matchingStatus",
          "isLocked"
        ]
      },
      "AcceptSalesAndSettlementsHttpRequest": {
        "type": "object",
        "properties": {
          "resolutionReasonId": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Id of resolution reason"
          }
        },
        "required": [
          "resolutionReasonId"
        ]
      },
      "DisputeSalesAndSettlementsHttpRequest": {
        "type": "object",
        "properties": {
          "resolutionReasonId": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Id of resolution reason"
          }
        },
        "required": [
          "resolutionReasonId"
        ]
      },
      "ListSalesAndSettlementsMoleculeHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Molecule unique id"
          },
          "matchedRuleId": {
            "type": "string",
            "example": "519298af-7091-4cf8-8b85-2ce11f4e09ef",
            "description": "Matched rule id"
          },
          "maximumSealingDate": {
            "type": "string",
            "example": "2024-07-24T11:13:56.599Z",
            "description": "Maximum sealing date"
          },
          "matchedRuleName": {
            "type": "string",
            "example": "MANY_TO_ONE: PNR",
            "description": "Matched rule name"
          },
          "sales": {
            "example": "[\"01GBAPHTYPQAN778WB4D7K1BE6\"]",
            "description": "Sales",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "settlements": {
            "example": "[\"01GBAPJ6R5BSE3XBDAG5RAPJ9P\"]",
            "description": "Settlements",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reconciliationStatus": {
            "type": "string",
            "example": "ACCEPTED",
            "description": "Molecule Reconciliation status"
          },
          "discrepancyAmounts": {
            "description": "Discrepancy Amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountsResponse"
              }
            ]
          },
          "disputedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who manually disputed the molecule. It will be set when the molecule is manually disputed"
          },
          "acceptedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who manually accepted the molecule. It will be set when the molecule is manually accepted"
          },
          "matchedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who manually matched the molecule. It will be set when the molecule is manually matched"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "matchingStatus": {
            "description": "The matching status of the molecule",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchingStatusResponseDto"
              }
            ]
          },
          "isInstallmentPayment": {
            "type": "boolean",
            "example": "true",
            "description": "Indicates whether the molecule is related to an installment payment or not."
          },
          "totalSalesAmount": {
            "description": "The total sales amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalSalesAmountResponse"
              }
            ]
          },
          "totalSettlementsAmount": {
            "description": "The total settlements amount.",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalSettlementsAmountResponse"
              }
            ]
          },
          "confirmationStatus": {
            "description": "Settlement confirmation status indicating whether a settlement is not applicable , provisional or confirmed",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfirmationStatusResponse"
              }
            ]
          },
          "isLocked": {
            "type": "boolean",
            "description": "True when the molecule is locked during the update from partial to complete"
          }
        },
        "required": [
          "id",
          "matchedRuleId",
          "maximumSealingDate",
          "matchedRuleName",
          "sales",
          "settlements",
          "reconciliationStatus",
          "discrepancyAmounts",
          "createdAt",
          "updatedAt",
          "matchingStatus",
          "isInstallmentPayment",
          "isLocked"
        ]
      },
      "ListSettlementDisputeStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Settlement dispute status id given as a value in the Enum in matching module."
          },
          "name": {
            "type": "string",
            "example": "NOT_STARTED",
            "description": "Status of the settlement dispute."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ChangeAcquirerDisputeIdHttpRequest": {
        "type": "object",
        "properties": {
          "acquirerDisputeId": {
            "type": "string",
            "example": "acquirerDisputeId",
            "description": "acquirer dispute id"
          }
        },
        "required": [
          "acquirerDisputeId"
        ]
      },
      "ResolveSettlementDisputeHttpRequest": {
        "type": "object",
        "properties": {
          "agreedUponAmountInAccountingCurrency": {
            "type": "number",
            "example": 58,
            "description": "settlement dispute agreed upon amount in accounting currency"
          }
        },
        "required": [
          "agreedUponAmountInAccountingCurrency"
        ]
      },
      "SettlementDisputeStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Settlement dispute status id given as a value in the Enum in matching module."
          },
          "name": {
            "type": "string",
            "example": "NOT_STARTED",
            "description": "Status of the settlement dispute."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListSettlementDisputesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HEQQ22H2J22DSE53ECBG7VXQ",
            "description": "Settlement dispute id"
          },
          "reference": {
            "type": "string",
            "example": "CVXA-ABBV-DGTE",
            "description": "Settlement dispute reference"
          },
          "utcCreationDay": {
            "type": "string",
            "example": "01/01/2023",
            "description": "Settlement dispute creation day in UTC time zone"
          },
          "acquirerId": {
            "type": "string",
            "example": "5cf796c4-b1e9-4490-9e22-2da2bf8e07c4",
            "description": "Acquirer id of the settlement dispute"
          },
          "acquirerDisputeId": {
            "type": "string",
            "example": "ab1cdls",
            "description": "Acquirer dispute id which is given by the acquirer"
          },
          "isGroupingPeriodClosed": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if we are still in the grouping period or not"
          },
          "disputeAmountInAccountingCurrency": {
            "type": "number",
            "example": 30.2,
            "description": "Settlement dispute amount in accounting currency"
          },
          "taskCount": {
            "type": "number",
            "example": 30,
            "description": "Settlement dispute task count"
          },
          "status": {
            "description": "Settlement dispute status",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementDisputeStatusResponse"
              }
            ]
          },
          "owner": {
            "type": "object",
            "example": "Toto",
            "description": "Settlement dispute owner"
          },
          "agreedUponAmountInAccountingCurrency": {
            "type": "number",
            "example": 30.2,
            "description": "Settlement dispute agreed upon amount in accounting currency"
          }
        },
        "required": [
          "id",
          "reference",
          "utcCreationDay",
          "acquirerId",
          "acquirerDisputeId",
          "isGroupingPeriodClosed",
          "disputeAmountInAccountingCurrency",
          "taskCount",
          "status",
          "owner",
          "agreedUponAmountInAccountingCurrency"
        ]
      },
      "GetSettlementDisputeBySettlementDisputeIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HEWM8ZHRXB9M0PHPKKP6WB6J",
            "description": "Settlement dispute id"
          },
          "reference": {
            "type": "string",
            "example": "CVBA-ABBC-AAKE",
            "description": "Settlement dispute reference"
          },
          "acquirerDisputeId": {
            "type": "string",
            "example": "acbxx58",
            "description": "Acquirer dispute id"
          },
          "disputeAmountInAccountingCurrency": {
            "type": "number",
            "example": 58.5,
            "description": "Settlement dispute amount in accounting currency"
          },
          "status": {
            "description": "Settlement dispute status",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettlementDisputeStatusResponse"
              }
            ]
          },
          "taskCount": {
            "type": "number",
            "description": "Settlement dispute task count"
          },
          "owner": {
            "type": "object",
            "example": "Toto",
            "description": "settlement dispute owner"
          },
          "note": {
            "type": "string",
            "example": "This settlement dispute amount is not correct",
            "description": "settlement dispute note"
          }
        },
        "required": [
          "id",
          "reference",
          "acquirerDisputeId",
          "disputeAmountInAccountingCurrency",
          "status",
          "taskCount",
          "owner",
          "note"
        ]
      },
      "ListSettlementDisputeDetailsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HF6GMKNT6SE7E1CRGRCNGP8P",
            "description": "Settlement dispute detail id"
          },
          "settlementDisputeId": {
            "type": "string",
            "example": "01HF6GMV2F1GRVQ0FTVD6REJ9Z",
            "description": "Settlement dispute id"
          },
          "taskId": {
            "type": "string",
            "example": "01HF6GNV00AGSPBH5Y6M375KYN",
            "description": "Task id"
          },
          "taskType": {
            "type": "string",
            "example": "SETTLEMENT_RECONCILIATION_ALERT",
            "description": "Task type"
          },
          "taskReference": {
            "type": "string",
            "example": "8DDQ-8YLW-LXJA",
            "description": "Task reference"
          },
          "disputeAmountInAccountingCurrency": {
            "type": "number",
            "example": 10.14,
            "description": "Dispute amount in accounting currency"
          }
        },
        "required": [
          "id",
          "settlementDisputeId",
          "taskId",
          "taskType",
          "taskReference",
          "disputeAmountInAccountingCurrency"
        ]
      },
      "ChangeSettlementDisputeNoteHttpRequest": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "example": "Note",
            "description": "settlement dispute note"
          }
        },
        "required": [
          "note"
        ]
      },
      "GetInstallmentReconciliationAlertsByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Installment Reconciliation Alert unique id"
          },
          "installmentId": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Installment unique id"
          },
          "moleculeId": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Molecule unique id"
          }
        },
        "required": [
          "id",
          "installmentId",
          "moleculeId"
        ]
      },
      "LatestInstallmentResponse": {
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "example": 1,
            "description": "The number of the installment"
          },
          "receptionDate": {
            "type": "string",
            "example": "06/11/2023",
            "description": "The reception date of the installment"
          },
          "expectedReceptionDate": {
            "type": "string",
            "example": "05/11/2023",
            "description": "The expected installment reception date"
          },
          "expectedAmount": {
            "description": "The expected installment amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedAmountResponse"
              }
            ]
          },
          "receivedAmount": {
            "description": "The received installment amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceivedAmountResponse"
              }
            ]
          },
          "receptionStatus": {
            "description": "The reception status of the installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceptionStatusResponse"
              }
            ]
          },
          "reconciliationStatus": {
            "description": "The reconciliation status of the installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReconciliationStatusResponse"
              }
            ]
          }
        },
        "required": [
          "number",
          "receptionDate",
          "expectedReceptionDate",
          "expectedAmount",
          "receivedAmount",
          "receptionStatus",
          "reconciliationStatus"
        ]
      },
      "GetInstallmentPaymentStateByMoleculeIdHttpResponse": {
        "type": "object",
        "properties": {
          "expectedTotalInstallmentsCount": {
            "type": "number",
            "example": 15,
            "description": "The expected total installments count"
          },
          "acceptedInstallmentsCount": {
            "type": "number",
            "example": 7,
            "description": "The count of accepted installments"
          },
          "mcpAmountMismatchInstallmentsCount": {
            "type": "number",
            "example": 2,
            "description": "The count of mcp amount mismatch installments count"
          },
          "amountMismatchInstallmentsCount": {
            "type": "number",
            "example": 1,
            "description": "The count of amount mismatch installments count"
          },
          "missingInstallmentsCount": {
            "type": "number",
            "example": 5,
            "description": "The count of missing installments"
          },
          "latestInstallment": {
            "description": "The latest installment details",
            "allOf": [
              {
                "$ref": "#/components/schemas/LatestInstallmentResponse"
              }
            ]
          }
        },
        "required": [
          "expectedTotalInstallmentsCount",
          "acceptedInstallmentsCount",
          "mcpAmountMismatchInstallmentsCount",
          "amountMismatchInstallmentsCount",
          "missingInstallmentsCount",
          "latestInstallment"
        ]
      },
      "MergeSettlementDisputesHttpRequest": {
        "type": "object",
        "properties": {
          "settlementDisputeIds": {
            "example": [
              "01GM81G2XQ1D3YFBGFFY6XHQV5",
              "01HFEWA0JV5VSMC7FDT9E88E54"
            ],
            "description": "List of settlement disputes ids to merge",
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "settlementDisputeIds"
        ]
      },
      "ExpectedInstallmentAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Expected installment amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInPaymentCurrency": {
            "description": "Expected installment amount in payment currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency",
          "amountInPaymentCurrency"
        ]
      },
      "InstallmentDiscrepancyAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Installment discrepancy amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency"
        ]
      },
      "ConfirmedDiscrepancyAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "Confirmed discrepancy amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency"
        ]
      },
      "ListInstallmentsByMoleculeIdResponse": {
        "type": "object",
        "properties": {
          "installmentId": {
            "type": "string",
            "example": "01HHF35BKP4TW9ZKWJ0PJE8VV6",
            "description": "The installment id"
          },
          "installmentNumber": {
            "type": "number",
            "example": 7,
            "description": "The installment number"
          },
          "settlementDate": {
            "type": "string",
            "example": "2023-12-12T12:45:35.795Z",
            "description": "The settlement date of the installment"
          },
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "The form of payment code of the installment"
          },
          "receptionStatus": {
            "description": "The reception status of the installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReceptionStatusResponse"
              }
            ]
          },
          "reconciliationStatus": {
            "description": "The reconciliation status of the installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReconciliationStatusResponse"
              }
            ]
          },
          "grossAmount": {
            "description": "Gross amount of an installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/GrossAmountResponse"
              }
            ]
          },
          "expectedInstallmentAmount": {
            "description": "Expected installment amount of an installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpectedInstallmentAmountResponse"
              }
            ]
          },
          "installmentDiscrepancyAmount": {
            "description": "Discrepancy amount of an installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstallmentDiscrepancyAmountResponse"
              }
            ]
          },
          "settlementCurrency": {
            "type": "string",
            "description": "The settlement currency of the installment "
          },
          "confirmationStatus": {
            "description": "Confirmation status of the installment",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfirmationStatusResponse"
              }
            ]
          },
          "associatedSettlementId": {
            "type": "string",
            "description": "Associated settlement id"
          },
          "confirmedDiscrepancyAmount": {
            "description": "Confirmed discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfirmedDiscrepancyAmountResponse"
              }
            ]
          }
        },
        "required": [
          "installmentId",
          "installmentNumber",
          "settlementDate",
          "formOfPaymentCode",
          "receptionStatus",
          "reconciliationStatus",
          "grossAmount",
          "installmentDiscrepancyAmount",
          "settlementCurrency",
          "confirmationStatus",
          "associatedSettlementId",
          "confirmedDiscrepancyAmount"
        ]
      },
      "DisputeInstallmentReconciliationAlertHttpRequest": {
        "type": "object",
        "properties": {
          "resolutionReasonId": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Id of resolution reason"
          }
        },
        "required": [
          "resolutionReasonId"
        ]
      },
      "AcceptInstallmentReconciliationAlertHttpRequest": {
        "type": "object",
        "properties": {
          "resolutionReasonId": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Id of resolution reason"
          }
        },
        "required": [
          "resolutionReasonId"
        ]
      },
      "ListSettlementReconciliationResolutionAlertReasonsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Matched bank deposit and payment orders molecule alert reason id"
          },
          "cannedMessage": {
            "type": "string",
            "example": "False discrepancy",
            "description": "Canned message"
          }
        },
        "required": [
          "id",
          "cannedMessage"
        ]
      },
      "GetSettlementReconciliationTenantSettingsResponse": {
        "type": "object",
        "properties": {
          "advancedMatchingFrequency": {
            "type": "string",
            "example": "0 0 8 * * *",
            "description": "Frequency of settlement reconciliation advanced matching (example means: Every day at 8am)"
          },
          "settlementReconciliationThresholdMcpFixedAmountInGlobalCurrency": {
            "type": "number",
            "example": 0.09,
            "description": "Settlement reconciliation threshold fixed amount in multi currency"
          },
          "settlementReconciliationThresholdMonoFixedAmountInGlobalCurrency": {
            "type": "number",
            "example": 0.01,
            "description": "Settlement reconciliation threshold fixed amount in mono currency"
          },
          "maximumSealingAmountPercentage": {
            "type": "number",
            "example": 5,
            "description": "Maximum sealing amount percentage"
          },
          "maximumSealingDurationInDays": {
            "type": "number",
            "example": 60,
            "description": "Maximum sealing duration in days"
          }
        },
        "required": [
          "advancedMatchingFrequency",
          "settlementReconciliationThresholdMcpFixedAmountInGlobalCurrency",
          "settlementReconciliationThresholdMonoFixedAmountInGlobalCurrency",
          "maximumSealingAmountPercentage",
          "maximumSealingDurationInDays"
        ]
      },
      "RescheduleSettlementReconciliationHttpRequest": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "string",
            "example": "0 0 8 * * *",
            "description": "New frequency of settlement reconciliation advanced matching (example means: Every day at 8am)"
          }
        },
        "required": [
          "frequency"
        ]
      },
      "ChangeSettlementReconciliationThresholdSettingsRequest": {
        "type": "object",
        "properties": {
          "settlementReconciliationThresholdMonoFixedAmountInGlobalCurrency": {
            "type": "number",
            "example": 10.3,
            "description": "Settlement Reconciniliation Mono Currency discrepancy threshold fixed amount in global currency"
          },
          "settlementReconciliationThresholdMcpFixedAmountInGlobalCurrency": {
            "type": "number",
            "example": 5.6,
            "description": "Settlement Reconciniliation MCP Currency discrepancy threshold fixed amount in global currency"
          }
        },
        "required": [
          "settlementReconciliationThresholdMonoFixedAmountInGlobalCurrency",
          "settlementReconciliationThresholdMcpFixedAmountInGlobalCurrency"
        ]
      },
      "DetachSalesAndSettlementsMoleculeRequest": {
        "type": "object",
        "properties": {
          "sales": {
            "description": "list of detached sales",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "settlements": {
            "description": "list of detached settlements",
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "sales",
          "settlements"
        ]
      },
      "MatchingStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "The id of the matching status"
          },
          "value": {
            "type": "string",
            "example": "PARTIAL",
            "description": "The value of the matching status"
          }
        },
        "required": [
          "id",
          "value"
        ]
      },
      "ListFailedSalesAndSettlementsMoleculesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFZN5A7SXE8YFD1YDSSBH",
            "description": "Failed sales and settlements molecule id"
          },
          "matchedRuleId": {
            "type": "string",
            "example": "72c343fd-3df5-495d-ab5a-526073b5f6f5",
            "description": "Matched rule id"
          },
          "matchedRuleName": {
            "type": "string",
            "example": "01K47JFZN53K15802HB9YK1CSN",
            "description": "Matched rule name"
          },
          "sales": {
            "example": [
              "01K47JFZN5HCXP0V52HW4RH0T3"
            ],
            "description": "Sales",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "settlements": {
            "example": [
              "01K47JFZN5CFCNKNHPX7J66K2H"
            ],
            "description": "Settlements",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "example": "01K47JFZN5BMGBXT3KN0M9XEPD",
            "description": "Creation date of the molecule"
          },
          "matchedBy": {
            "type": "string",
            "example": "Zied",
            "description": "User who has matched the molecule"
          },
          "exceptionReasons": {
            "description": "Exception reasons list",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matchingStatus": {
            "description": "Matching status",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchingStatusResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "matchedRuleId",
          "matchedRuleName",
          "sales",
          "settlements",
          "createdAt",
          "matchedBy",
          "exceptionReasons",
          "matchingStatus"
        ]
      },
      "GetFailedSalesAndSettlementsMoleculesCountHttpResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "example": 10,
            "description": "Failed sales and settlements molecules count"
          }
        },
        "required": [
          "count"
        ]
      },
      "ListFailedExceptionReasonsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "PAYMENT_CURRENCY_MISMATCH",
            "description": "Failed exception error code"
          },
          "cannedMessage": {
            "type": "string",
            "example": "Payment currency mismatch",
            "description": "Failed exception error message"
          }
        },
        "required": [
          "id",
          "cannedMessage"
        ]
      },
      "GetFailedSalesAndSettlementsMoleculeByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFZPT952YHWNZCX6CHHCH",
            "description": "Failed sales and settlements molecule id"
          },
          "matchedRuleId": {
            "type": "string",
            "example": "6f91c815-5386-4a96-b569-0492d2933eee",
            "description": "Matched rule id"
          },
          "matchedRuleName": {
            "type": "string",
            "example": "01K47JFZPV8GWRWV2YJ4QBV59Q",
            "description": "Matched rule name"
          },
          "sales": {
            "example": [
              "01K47JFZPVFT9RHPJR6P69HXTH"
            ],
            "description": "Sales",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "settlements": {
            "example": [
              "01K47JFZPVVS99MJZVXDCDPV9P"
            ],
            "description": "Settlements",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "example": "01K47JFZPVNV74A54FSG8YDFK7",
            "description": "Creation date of the molecule"
          },
          "matchedBy": {
            "type": "string",
            "example": "Zied",
            "description": "User who has matched the molecule"
          },
          "exceptionReasons": {
            "description": "Exception reasons list",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "matchingStatus": {
            "description": "Matching status",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchingStatusResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "matchedRuleId",
          "matchedRuleName",
          "sales",
          "settlements",
          "createdAt",
          "matchedBy",
          "exceptionReasons",
          "matchingStatus"
        ]
      },
      "ListSettlementReconciliationKeysHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AIRLINE",
            "description": "Settlement Reconciliation Key"
          },
          "cannedMessage": {
            "type": "string",
            "example": "Airline"
          }
        },
        "required": [
          "id",
          "cannedMessage"
        ]
      },
      "RuleConditionDto": {
        "type": "object",
        "properties": {}
      },
      "CreateMatchingRuleHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ec5158e-c94e-4d75-bb08-c8d4b847eab1",
            "description": "matching rule id"
          },
          "name": {
            "type": "string",
            "example": "Name",
            "description": "Matching rule name"
          },
          "reconciliationKeys": {
            "example": [
              "TRANSACTION_DATE"
            ],
            "description": "Reconciliation keys",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "linkType": {
            "type": "string",
            "example": "MANY_TO_MANY",
            "description": "Link type"
          },
          "dateRangeInSeconds": {
            "type": "number",
            "example": 360000,
            "description": "Maximum period duration between matched items expressed in seconds"
          },
          "transactionType1": {
            "type": "number",
            "example": 1,
            "description": "Matching rule transaction type key referring to SALE"
          },
          "transactionType2": {
            "type": "number",
            "example": 2,
            "description": "Matching rule transaction type key referring to SETTLEMENT"
          },
          "fopCondition": {
            "example": {
              "isApplicable": true,
              "values": [
                "CCAX"
              ]
            },
            "description": "Indicates whether the matching rule applies to specific form of payment codes. If `isApplicable` is `false`, the rule applies to all form of payment codes without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          },
          "acquirerCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific acquirers. If `isApplicable` is `false`, the rule applies to all acquirers without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          },
          "alternativeMethodOfPaymentCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific alternative method of payment codes. If `isApplicable` is `false`, the rule applies to all of them without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "reconciliationKeys",
          "linkType",
          "dateRangeInSeconds",
          "transactionType1",
          "transactionType2",
          "fopCondition",
          "acquirerCondition",
          "alternativeMethodOfPaymentCondition"
        ]
      },
      "MatchManuallySalesAndSettlementsRequest": {
        "type": "object",
        "properties": {
          "sales": {
            "example": [
              "01GM81FA0N6MCT38G0ZPCTYAER",
              "01GM81FRYKJRYH73CMV18KA3FX"
            ],
            "description": "List of sales ids to match",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "settlements": {
            "example": [
              "01GM81G2XQ1D3YFBGFFY6XHQV5"
            ],
            "description": "List of settlements ids to match",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "tag": {
            "type": "string",
            "description": "Id used by recovery scripts",
            "example": "#1"
          }
        },
        "required": [
          "sales",
          "settlements"
        ]
      },
      "ListSettlementReconciliationMatchingRulesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5296b575-64ce-4b23-b1a8-9689c03d8472",
            "description": "Matching rule id."
          },
          "name": {
            "type": "string",
            "description": "User Input to name the rule"
          },
          "reconciliationKeys": {
            "example": "[\"transactionDate\"]",
            "description": "List of the Reconciliation Keys.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkType": {
            "type": "string",
            "example": "MANY_TO_MANY",
            "description": "Link type"
          },
          "dateRangeInSeconds": {
            "type": "number",
            "example": "360000",
            "description": "Maximum period duration between matched items expressed in seconds"
          },
          "transactionType1": {
            "type": "number",
            "example": 1,
            "description": "Matching rule transaction type key referring to SALE"
          },
          "transactionType2": {
            "type": "number",
            "example": 2,
            "description": "Matching rule transaction type key referring to SETTLEMENT"
          },
          "fopCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific form of payment codes. If `isApplicable` is `false`, the rule applies to all form of payment codes without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          },
          "acquirerCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific acquirers. If `isApplicable` is `false`, the rule applies to all acquirers without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          },
          "alternativeMethodOfPaymentCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific alternative method of payment codes. If `isApplicable` is `false`, the rule applies to all alternative method of payment codes without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "reconciliationKeys",
          "linkType",
          "dateRangeInSeconds",
          "transactionType1",
          "transactionType2",
          "fopCondition",
          "acquirerCondition",
          "alternativeMethodOfPaymentCondition"
        ]
      },
      "GetMatchingRuleByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5296b575-64ce-4b23-b1a8-9689c03d8472",
            "description": "Matching rule id."
          },
          "name": {
            "type": "string",
            "description": "User Input to name the rule"
          },
          "reconciliationKeys": {
            "example": "[\"transactionDate\"]",
            "description": "List of the Reconciliation Keys.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkType": {
            "type": "string",
            "example": "MANY_TO_MANY",
            "description": "link type",
            "enum": [
              "ONE_TO_ONE",
              "ONE_TO_MANY",
              "MANY_TO_MANY",
              "MANY_TO_ONE"
            ]
          },
          "dateRangeInSeconds": {
            "type": "number",
            "example": "360000",
            "description": "Number of Maximum Days between Matched Items."
          },
          "version": {
            "type": "number",
            "example": "1",
            "description": "matching rule version number."
          },
          "transactionType1": {
            "type": "number",
            "example": 1,
            "description": "Matching rule transaction type key referring to SALE"
          },
          "transactionType2": {
            "type": "number",
            "example": 2,
            "description": "Matching rule transaction type key referring to SETTLEMENT"
          },
          "fopCondition": {
            "example": {
              "isApplicable": true,
              "values": [
                "CCAX"
              ]
            },
            "description": "Indicates whether the matching rule applies to specific form of payment codes. If `isApplicable` is `false`, the rule applies to all form of payment codes without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          },
          "acquirerCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific acquirers. If `isApplicable` is `false`, the rule applies to all acquirers without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          },
          "alternativeMethodOfPaymentCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific alternative method of payment codes. If `isApplicable` is `false`, the rule applies to all alternative method of payment codes without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "reconciliationKeys",
          "linkType",
          "dateRangeInSeconds",
          "version",
          "transactionType1",
          "transactionType2",
          "fopCondition",
          "acquirerCondition",
          "alternativeMethodOfPaymentCondition"
        ]
      },
      "AssignTaskToUserHttpRequest": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "string",
            "example": "airline-user",
            "description": "The username to whom the task will be assigned"
          }
        },
        "required": [
          "assignee"
        ]
      },
      "TaskTypeResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": 1,
            "description": "Task id"
          },
          "name": {
            "type": "string",
            "example": "Settlement fee discrepancy",
            "description": "Task type name"
          },
          "categoryId": {
            "type": "string",
            "example": 1,
            "description": "task Category Id"
          }
        },
        "required": [
          "id",
          "name",
          "categoryId"
        ]
      },
      "GetTasksHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": {
              "props": {
                "value": "01K47JFZ2FXZP6KBK1SNTTWA3Z"
              }
            },
            "description": "Task ID"
          },
          "reference": {
            "type": "string",
            "example": "CgrS-8rpj-iGVN",
            "description": "Task reference"
          },
          "status": {
            "type": "string",
            "example": "ASSIGNED",
            "description": "Task status"
          },
          "taskType": {
            "description": "Task type",
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskTypeResponseDTO"
              }
            ]
          },
          "assignee": {
            "type": "string",
            "description": "Task assignee's username"
          },
          "resolutionDate": {
            "type": "string",
            "example": "2025-09-03T10:38:22.799Z",
            "description": "Task resolution date"
          },
          "createdAt": {
            "type": "string",
            "example": "2025-09-03T10:38:22.799Z",
            "description": "Task resolution date"
          },
          "resolutionReasonId": {
            "type": "string",
            "description": "resolutionReasonId"
          },
          "resolutionReasonCannedMessage": {
            "type": "string",
            "description": "resolutionReasonCannedMessage"
          }
        },
        "required": [
          "id",
          "reference",
          "status",
          "taskType",
          "assignee",
          "resolutionDate",
          "createdAt",
          "resolutionReasonId",
          "resolutionReasonCannedMessage"
        ]
      },
      "GetTasksCountHttpResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number",
            "example": 10,
            "description": "The total count of tasks raised with the specified filters"
          }
        },
        "required": [
          "count"
        ]
      },
      "ListTaskTypesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 5,
            "description": "Task Type ID"
          },
          "name": {
            "type": "string",
            "example": "SETTLEMENT_RECONCILIATION_ALERT",
            "description": "Task Type Name"
          },
          "categoryId": {
            "type": "string",
            "example": "1",
            "description": "Id of the task category"
          }
        },
        "required": [
          "id",
          "name",
          "categoryId"
        ]
      },
      "TeamResponseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "accounting",
            "description": "Team id"
          },
          "name": {
            "type": "string",
            "example": "Accounting",
            "description": "Team name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListTaskTypesTeamsResponseHttpResponse": {
        "type": "object",
        "properties": {
          "taskType": {
            "description": "The task type related to the team",
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskTypeResponseDTO"
              }
            ]
          },
          "team": {
            "description": "The team related to task type",
            "allOf": [
              {
                "$ref": "#/components/schemas/TeamResponseDTO"
              }
            ]
          }
        },
        "required": [
          "taskType",
          "team"
        ]
      },
      "ListUsersByTaskTypeResponseHttpResponse": {
        "type": "object",
        "properties": {
          "assignee": {
            "type": "string",
            "description": "User name related to task type team"
          }
        },
        "required": [
          "assignee"
        ]
      },
      "ListTaskCategoriesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "2",
            "description": "Task Category Id"
          },
          "name": {
            "type": "string",
            "example": "ACCOUNTING",
            "description": "Task Category Name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GetTaskByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": {
              "props": {
                "value": "01K47JFZ04MXWB8CPHHWNCH516"
              }
            },
            "description": "Task ID"
          },
          "status": {
            "type": "string",
            "description": "Task status",
            "enum": [
              "AVAILABLE",
              "ASSIGNED",
              "RESOLVED"
            ]
          },
          "assignee": {
            "type": "string",
            "description": "Username"
          },
          "taskType": {
            "description": "Task type",
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskTypeResponseDTO"
              }
            ]
          },
          "reference": {
            "type": "string",
            "description": "Task reference: Alternative Id"
          },
          "resolutionDate": {
            "type": "string",
            "description": "Task resolution date"
          },
          "resolutionReasonId": {
            "type": "string",
            "description": "resolutionReasonId"
          },
          "resolutionReasonCannedMessage": {
            "type": "string",
            "description": "resolutionReasonCannedMessage"
          }
        },
        "required": [
          "id",
          "status",
          "assignee",
          "taskType",
          "reference",
          "resolutionDate",
          "resolutionReasonId",
          "resolutionReasonCannedMessage"
        ]
      },
      "AffiliateTaskTypeTeamRequestHttpRequest": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "example": "adad_team",
            "description": "TeamId"
          }
        },
        "required": [
          "teamId"
        ]
      },
      "ListTeamsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "settlement_reconciliation",
            "description": "Team id in lower snake case"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "name": {
            "type": "string",
            "example": "Accounting",
            "description": "Team name"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name"
        ]
      },
      "ReportHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "report id",
            "example": "01K47JG0B66CPMCWH5SS3790SC"
          },
          "reportType": {
            "type": "string",
            "description": "report type",
            "example": "SETTLEMENT_RECONCILIATION_ALERTS"
          },
          "fileName": {
            "type": "string",
            "description": "file name"
          },
          "generationDate": {
            "type": "string",
            "description": "report generation date",
            "example": "2025-09-03T10:38:24.103Z"
          },
          "expirationDate": {
            "type": "string",
            "description": "report expiration date",
            "example": "2025-09-13T10:38:24.103Z"
          },
          "status": {
            "type": "string",
            "description": "report status",
            "example": "READY"
          },
          "downloadUrl": {
            "type": "string",
            "description": "the download URL"
          }
        },
        "required": [
          "id",
          "reportType",
          "fileName",
          "generationDate",
          "expirationDate",
          "status",
          "downloadUrl"
        ]
      },
      "ListReportsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Report id",
            "example": "01K47JG0C6AGA4VVC12FYB23EF"
          },
          "reportType": {
            "type": "string",
            "description": "Report type",
            "example": "SETTLEMENT_RECONCILIATION_ALERTS"
          },
          "fileName": {
            "type": "string",
            "description": "File name"
          },
          "generationDate": {
            "type": "string",
            "description": "Report generation date",
            "example": "2025-09-03T10:38:24.134Z"
          },
          "expirationDate": {
            "type": "string",
            "description": "Report expiration date",
            "example": "2025-09-13T10:38:24.134Z"
          },
          "status": {
            "type": "string",
            "description": "Report status",
            "example": "READY"
          },
          "fileReferenceId": {
            "type": "string",
            "description": "File reference id"
          }
        },
        "required": [
          "id",
          "reportType",
          "fileName",
          "generationDate",
          "expirationDate",
          "status",
          "fileReferenceId"
        ]
      },
      "CreateReportHttpRequest": {
        "type": "object",
        "properties": {
          "reportType": {
            "type": "string",
            "example": "FILES",
            "description": "report type",
            "enum": [
              "DETAILED_JOURNAL_ENTRIES_REPORT",
              "ETL_CONFIGURATION",
              "FEE_BUSINESS_RULES",
              "FILES",
              "GENERAL_LEDGER",
              "MATCHED_ITEMS",
              "PENDING_SALES",
              "PENDING_SETTLEMENTS",
              "SETTLEMENT_RECONCILIATION_ALERTS",
              "TASKS",
              "TRIAL_BALANCE",
              "DETAILED_TRIAL_BALANCE_JOURNAL_ENTRIES",
              "DETAILED_IMBALANCED_JOURNAL_ENTRIES",
              "EXPIRED_SETTLEMENTS",
              "EXPIRED_SALES",
              "DELETED_SALES",
              "DELETED_SETTLEMENTS",
              "FAILED_SETTLEMENTS",
              "FAILED_SALES",
              "DETAILED_PAYMENT_ORDER",
              "OUTSTANDING_SALES_AGING_BY_ACQUIRER",
              "ACCOUNTING_RULES",
              "AUDIT_TRACK_SETTLEMENTS",
              "AUDIT_TRACK_PAYMENT_ORDERS",
              "AUDIT_TRACK_SALES"
            ]
          },
          "fileName": {
            "type": "string",
            "description": "file name to apply if provided",
            "example": "deploy_invoice.rp9"
          },
          "parameters": {
            "type": "object",
            "description": "report filters to apply"
          }
        }
      },
      "CreateReportV2HttpRequest": {
        "type": "object",
        "properties": {
          "reportType": {
            "type": "string",
            "example": "FILES",
            "description": "report type",
            "enum": [
              "DETAILED_JOURNAL_ENTRIES_REPORT",
              "ETL_CONFIGURATION",
              "FEE_BUSINESS_RULES",
              "FILES",
              "GENERAL_LEDGER",
              "MATCHED_ITEMS",
              "PENDING_SALES",
              "PENDING_SETTLEMENTS",
              "SETTLEMENT_RECONCILIATION_ALERTS",
              "TASKS",
              "TRIAL_BALANCE",
              "DETAILED_TRIAL_BALANCE_JOURNAL_ENTRIES",
              "DETAILED_IMBALANCED_JOURNAL_ENTRIES",
              "EXPIRED_SETTLEMENTS",
              "EXPIRED_SALES",
              "DELETED_SALES",
              "DELETED_SETTLEMENTS",
              "FAILED_SETTLEMENTS",
              "FAILED_SALES",
              "DETAILED_PAYMENT_ORDER",
              "OUTSTANDING_SALES_AGING_BY_ACQUIRER",
              "ACCOUNTING_RULES",
              "AUDIT_TRACK_SETTLEMENTS",
              "AUDIT_TRACK_PAYMENT_ORDERS",
              "AUDIT_TRACK_SALES"
            ]
          },
          "fileName": {
            "type": "string",
            "description": "file name to apply if provided",
            "example": "css_borders_feed.apr"
          },
          "parameters": {
            "type": "object",
            "description": "report filters to apply"
          }
        }
      },
      "ChangeAccountingRuleContentHttpRequest": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "example": "14562478901",
            "description": "Account number to be posted"
          },
          "signing": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT"
            ],
            "description": "To perform a CREDIT or DEBIT"
          },
          "amountType": {
            "type": "string",
            "enum": [
              "CONFIRMED_GROSS_AMOUNT",
              "CONTROL_AMOUNT",
              "EXPECTED_INSTALLMENT_AMOUNT",
              "FEE",
              "GAIN_CONTROL_AMOUNT",
              "GAIN_DISCREPANCY",
              "GAIN_INSTALLMENT_DISCREPANCY",
              "GROSS",
              "LOSS_CONTROL_AMOUNT",
              "LOSS_DISCREPANCY",
              "LOSS_INSTALLMENT_DISCREPANCY",
              "NEGATIVE_ACCOUNTING_ADJUSTMENT",
              "NEGATIVE_CONTROL_ADJUSTMENT",
              "NEGATIVE_ROUNDING_ADJUSTMENT",
              "NET",
              "POSITIVE_ACCOUNTING_ADJUSTMENT",
              "POSITIVE_CONTROL_ADJUSTMENT",
              "POSITIVE_ROUNDING_ADJUSTMENT",
              "MDR",
              "WITHHOLDING_TAX",
              "ROLLING_RESERVE",
              "POSITIVE_NET",
              "NEGATIVE_NET",
              "POSITIVE_MDR",
              "NEGATIVE_MDR",
              "POSITIVE_FEE",
              "NEGATIVE_FEE"
            ],
            "description": "Amount type related to this accounting rule content"
          },
          "percentage": {
            "type": "number",
            "example": 10,
            "description": "It is used to split an amount in order to associate each part to a specific Account."
          },
          "referentialKeys": {
            "example": "[\n      {\n        alias: 'referentialKey1',\n        value: '{{marketName}}}',\n      },\n      {\n        alias: 'referentialKey2',\n        value: 'SomeValue',\n      },\n      {\n        alias: 'referentialKey3',\n        value: 'S/{{transactionCurrency}}/{{bspId}}/{{transactionDate}}',\n      },\n    ]",
            "description": "Referential keys related to this accounting rule content",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "costCenter": {
            "type": "string",
            "example": "154",
            "description": "Cost center related to this accounting rule content"
          },
          "profitCenter": {
            "type": "string",
            "example": "100",
            "description": "Profit center related to this accounting rule content"
          }
        },
        "required": [
          "accountNumber",
          "signing",
          "amountType",
          "percentage",
          "referentialKeys",
          "costCenter",
          "profitCenter"
        ]
      },
      "ChangeAccountingRuleHttpRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "example": "9cd6c2a6-2160-4e3f-81c9-6d45f9c7b7c8",
            "description": "Accounting event id related for example to sale received event"
          },
          "filters": {
            "type": "object",
            "example": "{\n      \"marketNames\": [\"PAR\", \"LON\"],\n      \"documentTypes\": [\"Ticket\"]\n    }",
            "description": "Accounting rule filters"
          },
          "isPostponeAccounting": {
            "type": "boolean",
            "example": "true",
            "description": "Accounting rule postpone is enabled or not"
          },
          "eventType": {
            "type": "string",
            "example": "AB",
            "description": "Event type that will be affected to the journal entries related to the accounting rule"
          }
        },
        "required": [
          "eventId",
          "filters",
          "isPostponeAccounting",
          "eventType"
        ]
      },
      "ChangeAccountNameHttpRequest": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "example": "Sale Suspense",
            "description": "Account name"
          }
        },
        "required": [
          "accountName"
        ]
      },
      "CreateAccountHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "e7f992c7-7d8e-434f-a66f-3a732b507862",
            "description": "Account id"
          },
          "accountName": {
            "type": "string",
            "example": "Sale Suspense",
            "description": "Account name"
          },
          "accountNumber": {
            "type": "string",
            "example": "110156001",
            "description": "Account number"
          },
          "creditPostingKey": {
            "type": "string",
            "description": "Credit posting key",
            "example": "50"
          },
          "debitPostingKey": {
            "type": "string",
            "description": "Debit posting key",
            "example": "40"
          }
        },
        "required": [
          "id",
          "accountName",
          "accountNumber",
          "creditPostingKey",
          "debitPostingKey"
        ]
      },
      "CreateAccountingRuleContentHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GQ7B6PWQXPG7P8WR6HEX64BB",
            "description": "Accounting rule content id"
          },
          "accountingRuleId": {
            "type": "string",
            "example": "01D1MF5PWQXAAAP8WR6HEX64FF",
            "description": "Parent accounting rule id"
          },
          "accountNumber": {
            "type": "string",
            "example": "14562478901",
            "description": "Account number to be posted"
          },
          "signing": {
            "type": "string",
            "enum": [
              "DEBIT",
              "CREDIT"
            ],
            "description": "To perform a credit or debit"
          },
          "amountType": {
            "type": "string",
            "enum": [
              "CONFIRMED_GROSS_AMOUNT",
              "CONTROL_AMOUNT",
              "EXPECTED_INSTALLMENT_AMOUNT",
              "FEE",
              "GAIN_CONTROL_AMOUNT",
              "GAIN_DISCREPANCY",
              "GAIN_INSTALLMENT_DISCREPANCY",
              "GROSS",
              "LOSS_CONTROL_AMOUNT",
              "LOSS_DISCREPANCY",
              "LOSS_INSTALLMENT_DISCREPANCY",
              "NEGATIVE_ACCOUNTING_ADJUSTMENT",
              "NEGATIVE_CONTROL_ADJUSTMENT",
              "NEGATIVE_ROUNDING_ADJUSTMENT",
              "NET",
              "POSITIVE_ACCOUNTING_ADJUSTMENT",
              "POSITIVE_CONTROL_ADJUSTMENT",
              "POSITIVE_ROUNDING_ADJUSTMENT",
              "MDR",
              "WITHHOLDING_TAX",
              "ROLLING_RESERVE",
              "POSITIVE_NET",
              "NEGATIVE_NET",
              "POSITIVE_MDR",
              "NEGATIVE_MDR",
              "POSITIVE_FEE",
              "NEGATIVE_FEE"
            ],
            "description": "Amount type related to this accounting rule content"
          },
          "percentage": {
            "type": "number",
            "example": 10,
            "description": "It is used to split an amount in order to associate each part to a specific Account."
          },
          "referentialKeys": {
            "example": "[\n      {\n        alias: 'referentialKey1',\n        value: '{{marketName}}}',\n      },\n      {\n        alias: 'referentialKey2',\n        value: 'SomeValue',\n      },\n      {\n        alias: 'referentialKey3',\n        value: 'S/{{transactionCurrency}}/{{bspId}}/{{transactionDate}}',\n      },\n    ]",
            "description": "referential keys related to this accounting rule content",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "costCenter": {
            "type": "string",
            "example": "154",
            "description": "Cost center related to this accounting rule content"
          },
          "profitCenter": {
            "type": "string",
            "example": "100",
            "description": "Profit center related to this accounting rule content"
          }
        },
        "required": [
          "id",
          "accountingRuleId",
          "accountNumber",
          "signing",
          "amountType",
          "percentage",
          "referentialKeys",
          "costCenter",
          "profitCenter"
        ]
      },
      "CreateAccountingRuleHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GQ7B6PWQXPG7P8WR6HEX64BB",
            "description": "Accounting rule id"
          },
          "eventId": {
            "type": "string",
            "example": "9cd6c2a6-2160-4e3f-81c9-6d45f9c7b7c8",
            "description": "Accounting event id related for example to sale received event"
          },
          "filters": {
            "type": "object",
            "example": "{\n      \"marketNames\": [\"PAR\", \"LON\"],\n      \"documentTypes\": [\"Ticket\"]\n    }",
            "description": "Accounting rule filters"
          },
          "isPostponeAccounting": {
            "type": "boolean",
            "example": "true",
            "description": "Accounting rule postpone is enabled or not"
          },
          "eventType": {
            "type": "string",
            "example": "AB",
            "description": "Event type that will be affected to the journal entries related to the accounting rule"
          }
        },
        "required": [
          "id",
          "eventId",
          "filters",
          "isPostponeAccounting",
          "eventType"
        ]
      },
      "GetUnaccountedEventsCountHttpResponse": {
        "type": "object",
        "properties": {
          "totalUnaccountedEvents": {
            "type": "number",
            "example": 45,
            "description": "The total count of received events that triggers the accounting process but does not match with one accounting rule"
          }
        },
        "required": [
          "totalUnaccountedEvents"
        ]
      },
      "ListAccountingEventsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "2cdc8ab1-6d50-49cc-ba14-54e4ac7ec231"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z"
          },
          "internalName": {
            "type": "string",
            "description": "Accounting event internal name",
            "example": "SALE_CREATED"
          },
          "displayName": {
            "type": "string",
            "description": "Accounting event display name",
            "example": "Sale received"
          },
          "applicableFilters": {
            "description": "Accounting event applicable filters",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "applicableReferentialKeyParams": {
            "description": "Accounting event applicable referential key params",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "applicableAmountTypes": {
            "type": "array",
            "description": "Accounting event applicable amount types",
            "items": {
              "type": "string",
              "enum": [
                "CONFIRMED_GROSS_AMOUNT",
                "CONTROL_AMOUNT",
                "EXPECTED_INSTALLMENT_AMOUNT",
                "FEE",
                "GAIN_CONTROL_AMOUNT",
                "GAIN_DISCREPANCY",
                "GAIN_INSTALLMENT_DISCREPANCY",
                "GROSS",
                "LOSS_CONTROL_AMOUNT",
                "LOSS_DISCREPANCY",
                "LOSS_INSTALLMENT_DISCREPANCY",
                "NEGATIVE_ACCOUNTING_ADJUSTMENT",
                "NEGATIVE_CONTROL_ADJUSTMENT",
                "NEGATIVE_ROUNDING_ADJUSTMENT",
                "NET",
                "POSITIVE_ACCOUNTING_ADJUSTMENT",
                "POSITIVE_CONTROL_ADJUSTMENT",
                "POSITIVE_ROUNDING_ADJUSTMENT",
                "MDR",
                "WITHHOLDING_TAX",
                "ROLLING_RESERVE",
                "POSITIVE_NET",
                "NEGATIVE_NET",
                "POSITIVE_MDR",
                "NEGATIVE_MDR",
                "POSITIVE_FEE",
                "NEGATIVE_FEE"
              ]
            }
          },
          "isApplicable": {
            "type": "boolean",
            "description": "Accounting event applicability indicator ",
            "example": true
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "internalName",
          "displayName",
          "applicableFilters",
          "applicableReferentialKeyParams",
          "applicableAmountTypes",
          "isApplicable"
        ]
      },
      "ListAccountingRuleContentsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Accounting rule content unique id"
          },
          "accountingRuleId": {
            "type": "string",
            "example": "01GXNDN9JV7J12E52M4TJG9K1V",
            "description": "Accounting rule unique id"
          },
          "accountNumber": {
            "type": "string",
            "example": "14562478901",
            "description": "Account number posted"
          },
          "signing": {
            "type": "string",
            "example": "CREDIT",
            "description": "Accounting sign credit or a debit"
          },
          "percentage": {
            "type": "number",
            "example": "100",
            "description": "It is used to split an amount in order to associate each part to a specific Account."
          },
          "amountType": {
            "type": "string",
            "example": "GROSS",
            "description": "Amount type it could be GROSS/NET/FEE"
          },
          "referentialKeys": {
            "example": "[\n      {\n        \"alias\": \"referentialKey1\", \"value\": \"{{marketName}}\"\n      },\n      {\n        \"alias\": \"referentialKey2\", \"value\": \"SomeValue\"\n      },\n      {\n        \"alias\": \"referentialKey3\", \"value\": \"S/{{transactionCurrency}}/{{marketName}}/{{transactionDate}}\"\n      }\n    ]",
            "description": "Referential keys related to this accounting rule content",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "costCenter": {
            "type": "string",
            "example": "154",
            "description": "The cost centre is an account to which costs can be directly attributed, it helps in monitoring and managing expenses related to specific activities or functions"
          },
          "profitCenter": {
            "type": "string",
            "example": "154",
            "description": "The profit center account captures all the financial activities associated to the units that generate revenue and incurs costs"
          }
        },
        "required": [
          "id",
          "accountingRuleId",
          "accountNumber",
          "signing",
          "amountType"
        ]
      },
      "ListAccountingRulesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Accounting rule unique id"
          },
          "reference": {
            "type": "string",
            "example": "K32T-1G8P-VVRK",
            "description": "Accounting rule reference"
          },
          "eventId": {
            "type": "string",
            "example": "ec145531-490f-41e8-b440-d683c961ccc4",
            "description": "Accounting event id"
          },
          "filters": {
            "type": "object",
            "example": "{\n      \"marketNames\": [\"PAR\", \"LON\"],\n      \"documentTypes\": [\"Ticket\"]\n    }",
            "description": "Accounting rule filters"
          },
          "status": {
            "type": "string",
            "example": "Active",
            "description": "Accounting rule status"
          },
          "isPostponeAccounting": {
            "type": "boolean",
            "example": "true",
            "description": "Accounting rule postpone is enabled or not"
          },
          "eventType": {
            "type": "string",
            "example": "AB",
            "description": "Accounting Event Type"
          }
        },
        "required": [
          "id",
          "reference",
          "eventId",
          "filters",
          "status",
          "isPostponeAccounting",
          "eventType"
        ]
      },
      "ListChartOfAccountsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Account id",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "creation date"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "last update date"
          },
          "accountNumber": {
            "type": "string",
            "description": "Account number",
            "example": "14562478901"
          },
          "accountName": {
            "type": "string",
            "description": "Account name",
            "example": "Sale suspense"
          },
          "creditPostingKey": {
            "type": "string",
            "description": "Credit posting key",
            "example": "50"
          },
          "debitPostingKey": {
            "type": "string",
            "description": "Debit posting key",
            "example": "40"
          },
          "accountingReconciliationType": {
            "type": "object",
            "description": "accounting reconciliation type",
            "example": "{\"id\": 1, \"name\": \"Sale Accounting Reconciliation\"}"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "accountNumber",
          "accountName",
          "creditPostingKey",
          "debitPostingKey",
          "accountingReconciliationType"
        ]
      },
      "ListJournalEntriesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Journal entry unique id"
          },
          "accountNumber": {
            "type": "string",
            "example": "14562478901",
            "description": "Account number posted"
          },
          "accountName": {
            "type": "string",
            "example": "Sale Suspense",
            "description": "Account name posted"
          },
          "sign": {
            "type": "string",
            "example": "CREDIT",
            "description": "Journal entry indicated as a credit or a debit"
          },
          "amountInAccountingCurrency": {
            "description": "Amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInTransactionCurrency": {
            "description": "Amount in transaction currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountType": {
            "type": "string",
            "example": "GROSS",
            "description": "Amount type"
          },
          "referentialKeys": {
            "example": "[\n      {\n        \"alias\": \"ReferentialKey1\",\n        \"value\": \"PAR\"\n      } ]",
            "description": "Referential Keys",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventName": {
            "type": "string",
            "example": "Sale Acquisition",
            "description": "Display name for a given received event like sale created"
          },
          "eventOrder": {
            "type": "number",
            "example": "Event Order",
            "description": "The order of the event"
          },
          "accountingDate": {
            "type": "string",
            "example": "2024-06-28T10:15:24.830Z",
            "description": "The accounting date"
          },
          "revertedJournalEntryId": {
            "type": "string",
            "example": "01J6SHK0CHEHJGXX68HWQRDFQC",
            "description": "The reverted journal entry id exists only when the journal entry is the reversal of another journal entry"
          },
          "accountingRuleReference": {
            "type": "string",
            "example": "WW0Z-HW4M-1L3W",
            "description": "The accounting rule reference"
          },
          "balanceStatus": {
            "description": "balanceStatus",
            "allOf": [
              {
                "$ref": "#/components/schemas/BalanceStatusResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "accountNumber",
          "accountName",
          "sign",
          "amountInAccountingCurrency",
          "amountInTransactionCurrency",
          "amountType",
          "referentialKeys",
          "eventName",
          "eventOrder",
          "accountingDate",
          "revertedJournalEntryId",
          "accountingRuleReference",
          "balanceStatus"
        ]
      },
      "ListUnaccountedEventsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Unaccounted event unique id"
          },
          "accountingEventReferenceId": {
            "type": "string",
            "example": "ec145531-490f-41e8-b440-d683c961ccc4",
            "description": "Accounting event reference id"
          },
          "accountingAppliedFilters": {
            "type": "object",
            "example": "{\n      \"marketNames\": \"PAR\",\n      \"documentTypes\": \"Ticket\"\n    }",
            "description": "Accounting applied event reference filters"
          },
          "accountingFailureReason": {
            "type": "string",
            "example": "Accounting rule not found",
            "description": "Accounting failure reason"
          },
          "eventDate": {
            "type": "string",
            "example": "2022-10-13T00:00:00.000Z",
            "description": "The triggering accounting event creation date"
          },
          "itemId": {
            "type": "string",
            "description": "Item id",
            "example": "01JENP61WMPVWJJPACFHA0JD88"
          },
          "itemType": {
            "type": "string",
            "description": "Item type",
            "example": "SALE"
          }
        },
        "required": [
          "id",
          "accountingEventReferenceId",
          "accountingAppliedFilters",
          "accountingFailureReason",
          "eventDate",
          "itemId",
          "itemType"
        ]
      },
      "GetAccountingYearHttpResponse": {
        "type": "object",
        "properties": {
          "accountingYear": {
            "type": "string",
            "example": "2023",
            "description": "The current accounting year"
          }
        },
        "required": [
          "accountingYear"
        ]
      },
      "GetAccountingFailureReasonsResponse": {
        "type": "object",
        "properties": {
          "accountingFailureReasons": {
            "example": [
              "ACCOUNTING_RULE_NOT_FOUND",
              "ACCOUNTING_RULE_OVERLAP"
            ],
            "description": "Accounting failure reasons",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "accountingFailureReasons"
        ]
      },
      "ListAccountingPeriodsHttpResponse": {
        "type": "object",
        "properties": {
          "accountingPeriodNumber": {
            "type": "string",
            "example": "P-YYYY-{1-12}",
            "description": "Accounting period number"
          },
          "accountingPeriodStartDate": {
            "type": "string",
            "example": {
              "props": {
                "value": "2025-09-02T10:38:14.519Z"
              }
            },
            "description": "Accounting period start date"
          },
          "accountingPeriodEndDate": {
            "type": "string",
            "example": {
              "props": {
                "value": "2025-10-01T10:38:14.519Z"
              }
            },
            "description": "Accounting period end date"
          },
          "accountingPeriodStatus": {
            "type": "string",
            "example": "OPEN",
            "description": "Accounting period status"
          }
        },
        "required": [
          "accountingPeriodNumber",
          "accountingPeriodStartDate",
          "accountingPeriodEndDate",
          "accountingPeriodStatus"
        ]
      },
      "GetGeneralLedgerGenerationStatusResponse": {
        "type": "object",
        "properties": {
          "generalLedgerGenerationStatus": {
            "example": [
              "IN_PROGRESS",
              "FAILED",
              "GENERATED"
            ],
            "description": "General ledger generation status",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "generalLedgerGenerationStatus"
        ]
      },
      "ListGeneralLedgersHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "General ledger unique id"
          },
          "name": {
            "type": "string",
            "example": "GL_8X_20230801_10000000.csv",
            "description": "General ledger name"
          },
          "generationDate": {
            "type": "string",
            "example": "2022-10-13T00:00:00.000Z",
            "description": "The general ledger generation date"
          },
          "generationStatus": {
            "type": "string",
            "enum": [
              "IN_PROGRESS",
              "GENERATED",
              "FAILED"
            ],
            "example": "GENERATED",
            "description": "General ledger generation status"
          },
          "comment": {
            "type": "string",
            "example": "Some comment related to the general ledger generation",
            "description": "Comment related to the generation of the general ledger"
          },
          "detailedJournalEntriesReportId": {
            "type": "string",
            "example": "01H7WSKQ6JY5T6GC7BDEYRMTKE",
            "description": "The detailed journal entries report Id related to the general ledger"
          },
          "generalLedgerReportId": {
            "type": "string",
            "example": "01H7WSKQ6JY5T6GC7BDEYRMTKE",
            "description": "The general ledger report id"
          }
        },
        "required": [
          "id",
          "name",
          "generationDate",
          "generationStatus"
        ]
      },
      "RescheduleGeneralLedgerGenerationHttpRequest": {
        "type": "object",
        "properties": {
          "frequency": {
            "type": "string",
            "example": "0 0 1 * * *",
            "description": "Frequency of general ledger generation (example means: Every day at 6 pm)"
          }
        },
        "required": [
          "frequency"
        ]
      },
      "ListAccountingFiltersResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JFZT7CHQK9VXGV9ZCVYKS",
            "description": "Accounting filter ID"
          },
          "name": {
            "type": "string",
            "example": "companies",
            "description": "Accounting filter Name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CreditAmountResponse": {
        "type": "object",
        "properties": {
          "amountInTransactionCurrency": {
            "description": "credit amount in transaction currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "credit amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInTransactionCurrency",
          "amountInAccountingCurrency"
        ]
      },
      "DebitAmountResponse": {
        "type": "object",
        "properties": {
          "amountInTransactionCurrency": {
            "description": "debit amount in transaction currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "debit amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInTransactionCurrency",
          "amountInAccountingCurrency"
        ]
      },
      "CreditAndDebitAmountsResponse": {
        "type": "object",
        "properties": {
          "creditAmount": {
            "description": "credit amount  ",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreditAmountResponse"
              }
            ]
          },
          "debitAmount": {
            "description": "debit amount  ",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebitAmountResponse"
              }
            ]
          }
        },
        "required": [
          "creditAmount",
          "debitAmount"
        ]
      },
      "ListTrialBalanceEntriesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AAA-USD-EUR",
            "description": "Account and accountingCurrency  and transactionCurrency"
          },
          "account": {
            "type": "string",
            "example": "1001919",
            "description": "Account"
          },
          "transactionCurrency": {
            "type": "string",
            "example": "USD",
            "description": "Transaction Currency"
          },
          "accountingCurrency": {
            "type": "string",
            "example": "USD",
            "description": "Accounting Currency"
          },
          "turnoverAmounts": {
            "description": "Turnover Amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreditAndDebitAmountsResponse"
              }
            ]
          },
          "openingBalanceAmounts": {
            "description": "Opening Balance Amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreditAndDebitAmountsResponse"
              }
            ]
          },
          "closingBalanceAmounts": {
            "description": "Closing Balance Amounts",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreditAndDebitAmountsResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "account",
          "transactionCurrency",
          "accountingCurrency",
          "turnoverAmounts",
          "openingBalanceAmounts",
          "closingBalanceAmounts"
        ]
      },
      "ExtractDetailedTrialBalanceJournalEntriesHttpRequest": {
        "type": "object",
        "properties": {
          "accountingDateFrom": {
            "type": "string",
            "example": "2025-09-03T10:38:14.248Z",
            "description": "The starting date for the accounting period"
          },
          "accountingDateTo": {
            "type": "string",
            "example": "2025-09-03T10:38:14.248Z",
            "description": "The ending date for the accounting period"
          },
          "account": {
            "type": "string",
            "example": "110156001",
            "description": "Account number for which the journal entries are being extracted"
          },
          "accountingCurrency": {
            "type": "string",
            "example": "USD",
            "description": "The accounting currency"
          },
          "transactionCurrency": {
            "type": "string",
            "example": "EUR",
            "description": "The transaction currency"
          }
        },
        "required": [
          "accountingDateFrom",
          "accountingDateTo",
          "account",
          "accountingCurrency",
          "transactionCurrency"
        ]
      },
      "BalanceStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "balance status id"
          },
          "name": {
            "type": "string",
            "example": "BALANCED",
            "description": "Balance status"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "StartClosedAccountingPeriodBalanceCalculationRequestHttpRequest": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "example": "2025-09-03T10:38:14.353Z",
            "description": "start date for closed accounting period balance calculation"
          }
        }
      },
      "ImbalancedAmountResponse": {
        "type": "object",
        "properties": {
          "amountInAccountingCurrency": {
            "description": "imbalanced amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInAccountingCurrency"
        ]
      },
      "ListImbalancedItemsHttpResponse": {
        "type": "object",
        "properties": {
          "accountingEventReference": {
            "type": "string",
            "example": "01J82476V6H8D8S6FRRY5480M9",
            "description": "Accounting Event Reference"
          },
          "itemType": {
            "type": "string",
            "example": "SALE",
            "description": "Item Type"
          },
          "transactionDate": {
            "example": "2022-08-16T09:00:00.000Z",
            "description": "Transaction Date",
            "allOf": [
              {
                "$ref": "#/components/schemas/DateVO"
              }
            ]
          },
          "debitAmount": {
            "example": "USD",
            "description": "Debit Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DebitAmountResponse"
              }
            ]
          },
          "creditAmount": {
            "description": "Credit Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/CreditAmountResponse"
              }
            ]
          },
          "imbalancedAmount": {
            "description": "Imbalanced Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/ImbalancedAmountResponse"
              }
            ]
          }
        },
        "required": [
          "accountingEventReference",
          "itemType",
          "transactionDate",
          "debitAmount",
          "creditAmount",
          "imbalancedAmount"
        ]
      },
      "ListImbalancedJournalEntriesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "Imbalanced journal entry unique id"
          },
          "accountNumber": {
            "type": "string",
            "example": "1001919",
            "description": "Account Number"
          },
          "accountName": {
            "type": "string",
            "example": "",
            "description": "Account Name"
          },
          "sign": {
            "type": "string",
            "example": "CREDIT",
            "description": "Accounting sign credit or a debit"
          },
          "amountInTransactionCurrency": {
            "description": "Amount in Transaction currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Amount in Accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountType": {
            "type": "string",
            "description": "Amount type"
          },
          "referentialKeys": {
            "example": "[\n      {\n        \"alias\": \"ReferentialKey1\",\n        \"value\": \"PAR\"\n      } ]",
            "description": "Referential Keys",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "eventName": {
            "type": "string",
            "description": "Event name"
          },
          "eventOrder": {
            "type": "number",
            "example": "Event Order",
            "description": "The order of the event"
          },
          "accountingDate": {
            "type": "string",
            "description": "Accounting Date"
          },
          "revertedJournalEntryId": {
            "type": "string",
            "example": "01J6SHK0CHEHJGXX68HWQRDFQC",
            "description": "The reverted journal entry id exists only when the journal entry is the reversal of another journal entry"
          },
          "accountingRuleReference": {
            "type": "string",
            "description": "Accounting rule reference"
          },
          "balanceStatus": {
            "description": "balanceStatus",
            "allOf": [
              {
                "$ref": "#/components/schemas/BalanceStatusResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "accountNumber",
          "accountName",
          "sign",
          "amountInTransactionCurrency",
          "amountInAccountingCurrency",
          "amountType",
          "referentialKeys",
          "eventName",
          "eventOrder",
          "accountingDate",
          "revertedJournalEntryId",
          "accountingRuleReference",
          "balanceStatus"
        ]
      },
      "ListItemTypesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 0,
            "description": "Item type id in the Enum in accounting module."
          },
          "name": {
            "type": "string",
            "example": "SALE",
            "description": "Item type name."
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "UndoJournalEntriesHttpRequest": {
        "type": "object",
        "properties": {
          "accountingEventReference": {
            "type": "string",
            "description": "Accounting event reference",
            "example": "01JA53DZ7H9DD6PR1G6XJFM5ND"
          },
          "accountingRuleReference": {
            "type": "string",
            "description": "Accounting rule reference",
            "example": "U12Q-6M96-AQNP"
          }
        }
      },
      "UndoJournalEntriesByAccountingEventReferenceHttpRequest": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Id used by recovery scripts",
            "example": "#1"
          }
        }
      },
      "UndoJournalEntriesByEventIdHttpRequest": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Id used by recovery scripts",
            "example": "#1"
          }
        }
      },
      "UndoRedoJournalEntriesHttpRequest": {
        "type": "object",
        "properties": {
          "accountingEventReference": {
            "type": "string",
            "description": "Accounting event reference",
            "example": "01JA53DZ7H9DD6PR1G6XJFM5ND"
          },
          "accountingRuleReference": {
            "type": "string",
            "description": "Accounting rule reference",
            "example": "U12Q-6M96-AQNP"
          }
        }
      },
      "UndoRedoJournalEntriesByEventIdHttpRequest": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "Id used by recovery scripts",
            "example": "#1"
          }
        }
      },
      "GetAccountingTenantSettingsHttpResponse": {
        "type": "object",
        "properties": {
          "globalCurrency": {
            "type": "string",
            "example": "USD",
            "description": "Global currency of the tenant"
          },
          "accountingDayClosure": {
            "type": "string",
            "example": "17:00",
            "description": "Accounting day closure defines when the day ends from an accounting perspective"
          },
          "accountingPeriodClosure": {
            "type": "number",
            "example": 3,
            "description": "Accounting period closure represents the number of days accounting periods are held open beyond their original duration"
          },
          "accountingYearStart": {
            "type": "string",
            "example": "14/05",
            "description": "Accounting year start is the start date of the accounting year"
          },
          "generalLedgerGenerationFrequency": {
            "type": "string",
            "example": "0 0 1 * * *",
            "description": "Frequency of generation of general ledger file (example means: Every day at 6pm)"
          }
        },
        "required": [
          "globalCurrency",
          "accountingDayClosure",
          "accountingPeriodClosure",
          "accountingYearStart",
          "generalLedgerGenerationFrequency"
        ]
      },
      "ListAccountingReconciliationTypesResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "1",
            "description": "Accounting reconciliation type ID"
          },
          "name": {
            "type": "string",
            "example": "Sale Accounting Reconciliation",
            "description": "Accounting reconciliation type Name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ChangeChartOfAccountsHttpRequest": {
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string",
            "example": "Sale Suspense",
            "description": "Chart of account account name"
          },
          "debitPostingKey": {
            "type": "string",
            "example": "40",
            "description": "Chart of account debit posting key"
          },
          "creditPostingKey": {
            "type": "string",
            "example": "50",
            "description": "Chart of account credit posting key"
          },
          "accountingReconciliationTypeId": {
            "type": "string",
            "example": "1",
            "description": "Chart of account accounting reconciliation type id"
          }
        },
        "required": [
          "accountName",
          "debitPostingKey",
          "creditPostingKey"
        ]
      },
      "CreateChartOfAccountsHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "74557a54-8be3-4428-9d66-6724ede0178a",
            "description": "Chart of account account id"
          },
          "accountName": {
            "type": "string",
            "example": "Sale Suspense",
            "description": "Chart of account account name"
          },
          "accountNumber": {
            "type": "string",
            "example": "100008",
            "description": "Chart of account account number"
          },
          "debitPostingKey": {
            "type": "string",
            "example": "40",
            "description": "Chart of account debit posting key"
          },
          "creditPostingKey": {
            "type": "string",
            "example": "50",
            "description": "Chart of account credit posting key"
          },
          "accountingReconciliationTypeId": {
            "type": "string",
            "example": "1",
            "description": "Chart of account accounting reconciliation type id"
          }
        },
        "required": [
          "id",
          "accountName",
          "accountNumber",
          "debitPostingKey",
          "creditPostingKey",
          "accountingReconciliationTypeId"
        ]
      },
      "StartFailedGeneralLedgerRegenerationHttpRequest": {
        "type": "object",
        "properties": {
          "failedGeneralLedgerId": {
            "type": "string",
            "example": "01K47JG00ZYB9E324NEWJ770V3",
            "description": "failed general ledger id"
          }
        },
        "required": [
          "failedGeneralLedgerId"
        ]
      },
      "ListEtlStatesHttpResponse": {
        "type": "object",
        "properties": {
          "datasourceType": {
            "type": "string",
            "example": "Sale Source",
            "description": "datasource type"
          },
          "totalFiles": {
            "type": "number",
            "example": 10,
            "description": "The total count of files processed during the date range for a datasource type"
          },
          "duplicatedFiles": {
            "type": "number",
            "example": 4,
            "description": "The count of duplicated files detected during the date range for a datasource type"
          },
          "fakeTwinFiles": {
            "type": "number",
            "example": 2,
            "description": "The count of fake twin files detected during the date range for a datasource type"
          },
          "lateFiles": {
            "type": "number",
            "example": 7,
            "description": "The count of late files detected during the date range for a datasource type"
          },
          "spamFiles": {
            "type": "number",
            "example": 7,
            "description": "The count of spam files detected during the date range for a datasource type"
          },
          "missingFiles": {
            "type": "number",
            "example": 1,
            "description": "The count of missing files detected during the date range for a datasource type"
          },
          "corruptedFiles": {
            "type": "number",
            "example": 5,
            "description": "The count of corrupted files detected during the date range for a datasource type"
          },
          "totalTransactions": {
            "type": "number",
            "example": 250,
            "description": "The total count of transactions processed during the date range for a datasource type"
          },
          "nonEligibleTransactions": {
            "type": "number",
            "example": 30,
            "description": "The count of failed transactions detected during the date range for a datasource type"
          }
        },
        "required": [
          "datasourceType",
          "totalFiles",
          "duplicatedFiles",
          "fakeTwinFiles",
          "lateFiles",
          "spamFiles",
          "missingFiles",
          "corruptedFiles",
          "totalTransactions",
          "nonEligibleTransactions"
        ]
      },
      "GetSettlementReconciliationStatsResponse": {
        "type": "object",
        "properties": {
          "totalSettlementsCount": {
            "type": "number",
            "description": "Total settlements received for a given stat date range"
          },
          "allAmountMismatchSettlementsCount": {
            "type": "number",
            "description": "Total settlements having amount mismatch  for a given stat date range"
          },
          "acceptedSettlementsCount": {
            "type": "number",
            "description": "Total settlements accepted for a given stat date range"
          },
          "totalSettlementAmountReconciledInAccountingCurrency": {
            "type": "number",
            "description": "Total settlement amount reconciled in accounting currency for a given stat date range"
          }
        },
        "required": [
          "totalSettlementsCount",
          "allAmountMismatchSettlementsCount",
          "acceptedSettlementsCount",
          "totalSettlementAmountReconciledInAccountingCurrency"
        ]
      },
      "GetBankDepositReconciliationStatsResponse": {
        "type": "object",
        "properties": {
          "totalBankDepositsCount": {
            "type": "number",
            "description": "Total bank deposits received for a given stat date range"
          },
          "reconciledBankDepositsCount": {
            "type": "number",
            "description": "Total reconciled bank deposits for a given stat date range"
          },
          "totalBankDepositAmountReconciledInAccountingCurrency": {
            "type": "number",
            "description": "Total bankDeposit amount reconciled in accounting currency for a given stat date range"
          }
        },
        "required": [
          "totalBankDepositsCount",
          "reconciledBankDepositsCount",
          "totalBankDepositAmountReconciledInAccountingCurrency"
        ]
      },
      "GetSaleAuditBySaleIdResponse": {
        "type": "object",
        "properties": {
          "ingestionStatus": {
            "type": "string",
            "description": "Sale ingestion status",
            "example": "ACCEPTED"
          },
          "settlementStatus": {
            "type": "string",
            "description": "Sale settlement reconciliation status",
            "example": "PARTIALLY SETTLED"
          },
          "bankStatus": {
            "type": "string",
            "description": "Sale bank reconciliation status",
            "example": "DEPOSITED"
          }
        },
        "required": [
          "ingestionStatus",
          "settlementStatus",
          "bankStatus"
        ]
      },
      "GetSalesStatsResponse": {
        "type": "object",
        "properties": {
          "totalSaleAmountInAccountingCurrency": {
            "type": "number",
            "description": "Total sales amount in accounting currency for a given date range"
          },
          "totalSalesCount": {
            "type": "number",
            "description": "Total sales received for a given stat date range"
          }
        },
        "required": [
          "totalSaleAmountInAccountingCurrency",
          "totalSalesCount"
        ]
      },
      "GetBankDepositsStatsResponse": {
        "type": "object",
        "properties": {
          "totalBankDepositAmountInAccountingCurrency": {
            "type": "number",
            "description": "Total bank deposits amount in accounting currency for a given date range"
          },
          "totalBankDepositsCount": {
            "type": "number",
            "description": "Total bank deposits received for a given stat date range"
          }
        },
        "required": [
          "totalBankDepositAmountInAccountingCurrency",
          "totalBankDepositsCount"
        ]
      },
      "GetSettlementsStatsResponse": {
        "type": "object",
        "properties": {
          "totalSettlementAmountInAccountingCurrency": {
            "type": "number",
            "description": "Total settlements amount in accounting currency for a given date range"
          },
          "totalSettlementsCount": {
            "type": "number",
            "description": "Total settlements received for a given stat date range"
          }
        },
        "required": [
          "totalSettlementAmountInAccountingCurrency",
          "totalSettlementsCount"
        ]
      },
      "ListMatchedSettlementsByAcquirerStatsHttpResponse": {
        "type": "object",
        "properties": {
          "acquirerName": {
            "type": "string",
            "description": "Acquirer name",
            "example": "AMEX"
          },
          "totalSettlementsCount": {
            "type": "number",
            "description": "The total number of settlements in the given date range."
          },
          "partialMatchedSettlementsCount": {
            "type": "number",
            "description": "Number of partially matched settlements in the given date range."
          },
          "completeMatchedSettlementsCount": {
            "type": "number",
            "description": "Number of completely matched settlements in the given date range."
          },
          "exceptionMatchedSettlementsCount": {
            "type": "number",
            "description": "Number of matched settlements with exception in the given date range."
          },
          "completeMatchedSettlementsAmountInAccountingCurrency": {
            "type": "number",
            "description": "The sum of completely matched settlements amounts in accounting currency."
          }
        },
        "required": [
          "acquirerName",
          "totalSettlementsCount",
          "partialMatchedSettlementsCount",
          "completeMatchedSettlementsCount",
          "exceptionMatchedSettlementsCount",
          "completeMatchedSettlementsAmountInAccountingCurrency"
        ]
      },
      "GetAuditTrackFailedSaleByIdHttpResponse": {
        "type": "object",
        "properties": {
          "ingestionStatus": {
            "type": "string",
            "example": "ON_HOLD",
            "description": "ingestion status"
          }
        }
      },
      "StatsPerFopHttpResponse": {
        "type": "object",
        "properties": {
          "formOfPaymentCode": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "salesCount": {
            "type": "number",
            "example": "20",
            "description": "Sales count"
          },
          "totalSaleAmountInAccountingCurrency": {
            "type": "number",
            "example": "100.33",
            "description": "Total sale amount in accounting currency"
          }
        },
        "required": [
          "formOfPaymentCode",
          "salesCount",
          "totalSaleAmountInAccountingCurrency"
        ]
      },
      "GetOutstandingSalesPerFopHttpResponse": {
        "type": "object",
        "properties": {
          "totalSalesCount": {
            "type": "number",
            "example": "10",
            "description": "Total sales count"
          },
          "statsPerFop": {
            "description": "Stats Per Fop",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatsPerFopHttpResponse"
            }
          }
        },
        "required": [
          "totalSalesCount",
          "statsPerFop"
        ]
      },
      "GetKpiTenantSettingsHttpResponse": {
        "type": "object",
        "properties": {
          "kpiDateRangeInMonths": {
            "type": "number",
            "example": 3,
            "description": "kpi Date Range In Months"
          }
        },
        "required": [
          "kpiDateRangeInMonths"
        ]
      },
      "StatsPerAcquirerHttpResponse": {
        "type": "object",
        "properties": {
          "acquirerName": {
            "type": "string",
            "example": "BDO",
            "description": "acquirer name"
          },
          "outstandingSalesCount": {
            "type": "number",
            "example": "20",
            "description": "Sales count"
          },
          "absOutstandingGrossAmountInAccountingCurrency": {
            "type": "number",
            "example": "100.33",
            "description": "Total sale amount in accounting currency"
          },
          "collectionEfficiencyPercentage": {
            "type": "number",
            "example": "80",
            "description": "Collection efficiency percentage"
          }
        },
        "required": [
          "acquirerName",
          "outstandingSalesCount",
          "absOutstandingGrossAmountInAccountingCurrency",
          "collectionEfficiencyPercentage"
        ]
      },
      "GetOutstandingSalesPerAcquirerHttpResponse": {
        "type": "object",
        "properties": {
          "totalSalesCount": {
            "type": "number",
            "example": "10",
            "description": "Total sales count"
          },
          "statsPerAcquirer": {
            "description": "Stats Per acquirer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatsPerAcquirerHttpResponse"
            }
          }
        },
        "required": [
          "totalSalesCount",
          "statsPerAcquirer"
        ]
      },
      "CashForecastPerAcquirerHttpResponse": {
        "type": "object",
        "properties": {
          "acquirerName": {
            "type": "string",
            "example": "BDO",
            "description": "acquirer name"
          },
          "salesCount": {
            "type": "number",
            "example": "20",
            "description": "Sales count"
          },
          "salesAmountInAccountingCurrency": {
            "type": "number",
            "example": "100.33",
            "description": "Sales amount in accounting currency"
          }
        },
        "required": [
          "acquirerName",
          "salesCount",
          "salesAmountInAccountingCurrency"
        ]
      },
      "ListCashForecastsHttpResponse": {
        "type": "object",
        "properties": {
          "statDate": {
            "type": "string",
            "example": "2024-06-28T10:15:24.830Z",
            "description": "The stat date"
          },
          "totalSalesCount": {
            "type": "number",
            "example": "10",
            "description": "Total sales count"
          },
          "totalSaleAmountInAccountingCurrency": {
            "type": "number",
            "example": "100.33",
            "description": "Total sale amount in accounting currency"
          },
          "cashForecastPerAcquirer": {
            "description": "cash forecast Per Acquirer",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashForecastPerAcquirerHttpResponse"
            }
          }
        },
        "required": [
          "statDate",
          "totalSalesCount",
          "totalSaleAmountInAccountingCurrency",
          "cashForecastPerAcquirer"
        ]
      },
      "CannedMessageHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the canned message as present in the canned message table",
            "example": "CAT.ERROR.1"
          },
          "cannedMessage": {
            "type": "string",
            "description": "The canned message formatted in the language and format chosen",
            "example": "File sanity check failed because of missing file header"
          }
        },
        "required": [
          "id"
        ]
      },
      "ListItemHistoryByItemIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Item history Unique Id",
            "example": "01GBAJKKWXY1BKK39PS16X3EFR"
          },
          "title": {
            "description": "Title of the item history in question",
            "allOf": [
              {
                "$ref": "#/components/schemas/CannedMessageHttpResponse"
              }
            ]
          },
          "eventDate": {
            "type": "string",
            "description": "Item history event date",
            "example": "2025-09-03T10:38:24.741Z"
          },
          "details": {
            "description": "Item history details",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "title",
          "eventDate",
          "details"
        ]
      },
      "ListSettledStatusHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Settled status id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Settled status name",
            "example": "Settled"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListBankedStatusHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "banked status id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "banked status name",
            "example": "Deposited"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SoldStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Sold status id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Sold status name",
            "example": "Accepted"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "SettledStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Settled status id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Settled status name",
            "example": "Accepted"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "BankedStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Banked status id",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Banked status name",
            "example": "Deposited"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListAuditTrackSettlementsHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Settlement id",
            "example": "01K47JG127QWXFQ4SYWNPHNVV0"
          },
          "pnrReference": {
            "type": "string",
            "description": "PNR reference",
            "example": "SDFHGSDGH"
          },
          "documentNumber": {
            "type": "string",
            "description": "Document number",
            "example": "SDF5F44GSDF"
          },
          "formOfPaymentCode": {
            "type": "string",
            "description": "Form of payment code",
            "example": "CCAX"
          },
          "settlementDate": {
            "type": "string",
            "description": "Settlement date",
            "example": "2025-09-03T10:38:24.839Z"
          },
          "acquirer": {
            "type": "string",
            "description": "Acquirer",
            "example": "AMEX"
          },
          "paymentOrderId": {
            "type": "string",
            "description": "Payment order Id",
            "example": "01K47JG1271K23FGFFV64A3D55"
          },
          "transactionType": {
            "description": "Transaction type",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeResponse"
              }
            ]
          },
          "salesAndSettlementsMoleculeId": {
            "type": "string",
            "description": "Sales and settlements molecule id",
            "example": "01HZH9W4VJ9D6NVYMTY4FSS62J"
          },
          "soldStatus": {
            "description": "Sold status",
            "allOf": [
              {
                "$ref": "#/components/schemas/SoldStatusResponse"
              }
            ]
          },
          "settledStatus": {
            "description": "Settled status",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettledStatusResponse"
              }
            ]
          },
          "bankedStatus": {
            "description": "Banked status",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankedStatusResponse"
              }
            ]
          },
          "grossAmount": {
            "description": "Gross amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/GrossAmountResponse"
              }
            ]
          },
          "reconciliationDelaySeconds": {
            "type": "number",
            "description": "Reconciliation delay seconds"
          }
        },
        "required": [
          "id",
          "pnrReference",
          "documentNumber",
          "formOfPaymentCode",
          "settlementDate",
          "acquirer",
          "paymentOrderId",
          "transactionType",
          "salesAndSettlementsMoleculeId",
          "soldStatus",
          "settledStatus",
          "bankedStatus",
          "grossAmount",
          "reconciliationDelaySeconds"
        ]
      },
      "ListAuditTrackPaymentOrdersHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JG134FEC6Y2EGFGZ2G9ZV",
            "description": "Payment order id"
          },
          "paymentOrderAmount": {
            "description": "Payment Order Amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentOrderAmountResponse"
              }
            ]
          },
          "acquirer": {
            "type": "string",
            "example": "AMEX",
            "description": "Acquirer name"
          },
          "bankDepositReference": {
            "type": "string",
            "example": "eddzef785454yh5hty45hty4j",
            "description": "Bank deposit reference"
          },
          "paymentOrderDate": {
            "type": "string",
            "example": "2025-09-03T10:38:24.868Z",
            "description": "payment order date"
          },
          "bankAccountNumber": {
            "type": "string",
            "example": "4555544IHD5566",
            "description": "bank account number"
          },
          "soldStatus": {
            "description": "Sold status",
            "allOf": [
              {
                "$ref": "#/components/schemas/SoldStatusResponse"
              }
            ]
          },
          "settledStatus": {
            "description": "Settled status",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettledStatusResponse"
              }
            ]
          },
          "bankedStatus": {
            "description": "Banked status",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankedStatusResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "bankDepositReference",
          "paymentOrderDate",
          "bankAccountNumber",
          "soldStatus",
          "settledStatus",
          "bankedStatus"
        ]
      },
      "ListAuditTrackSalesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Sale id",
            "example": "01K47JG146V24CX9XFBCTDASHJ"
          },
          "pnrReference": {
            "type": "string",
            "description": "PNR reference",
            "example": "SDFHGSDGH"
          },
          "documentNumber": {
            "type": "string",
            "description": "Document number",
            "example": "SDF5F44GSDF"
          },
          "formOfPaymentCode": {
            "type": "string",
            "description": "Form of payment code",
            "example": "CCAX"
          },
          "paymentDate": {
            "type": "string",
            "description": "Payment date",
            "example": "2025-09-03T10:38:24.902Z"
          },
          "acquirer": {
            "type": "string",
            "description": "Acquirer",
            "example": "Settlement"
          },
          "grossAmount": {
            "description": "Gross amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/GrossAmountResponse"
              }
            ]
          },
          "transactionType": {
            "description": "Transaction type",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionTypeResponse"
              }
            ]
          },
          "salesAndSettlementsMoleculeId": {
            "type": "string",
            "description": "Sales and settlements molecule id",
            "example": "01HZH9W4VJ9D6NVYMTY4FSS62J"
          },
          "soldStatus": {
            "description": "Sold status",
            "allOf": [
              {
                "$ref": "#/components/schemas/SoldStatusResponse"
              }
            ]
          },
          "settledStatus": {
            "description": "Settled status",
            "allOf": [
              {
                "$ref": "#/components/schemas/SettledStatusResponse"
              }
            ]
          },
          "bankedStatus": {
            "description": "Banked status",
            "allOf": [
              {
                "$ref": "#/components/schemas/BankedStatusResponse"
              }
            ]
          },
          "reconciliationDelaySeconds": {
            "type": "number",
            "example": 3600,
            "description": "Reconciliation Delay Seconds"
          },
          "receptionDelaySeconds": {
            "type": "number",
            "description": "Reception delay in seconds",
            "example": 3600
          }
        },
        "required": [
          "id",
          "pnrReference",
          "documentNumber",
          "formOfPaymentCode",
          "paymentDate",
          "acquirer",
          "grossAmount",
          "transactionType",
          "salesAndSettlementsMoleculeId",
          "soldStatus",
          "settledStatus",
          "bankedStatus",
          "reconciliationDelaySeconds",
          "receptionDelaySeconds"
        ]
      },
      "GetSettlementReconciliationTenantSettingsHttpResponse": {
        "type": "object",
        "properties": {
          "advancedMatchingFrequency": {
            "type": "string",
            "example": "0 0 1 * * *",
            "description": "Frequency of settlement reconciliation advanced matching (example means: Every day at 1am)"
          },
          "settlementReconciliationThresholdMcpFixedAmountInGlobalCurrency": {
            "type": "number",
            "example": 10.2,
            "description": "Settlement reconciliation threshold for Mcp: Fixed amount in global currency"
          },
          "settlementReconciliationThresholdMonoFixedAmountInGlobalCurrency": {
            "type": "number",
            "example": 20.4,
            "description": "Settlement reconciliation threshold for Mono: Fixed Amount in global currency"
          },
          "maximumSealingAmountPercentage": {
            "type": "number",
            "example": 5,
            "description": "maximum acceptable difference amount percentage before sealing a molecule"
          },
          "maximumSealingDurationInDays": {
            "type": "number",
            "example": 5,
            "description": "maximum potentail molecule TTL before converting it into a molecule"
          }
        },
        "required": [
          "advancedMatchingFrequency",
          "settlementReconciliationThresholdMcpFixedAmountInGlobalCurrency",
          "settlementReconciliationThresholdMonoFixedAmountInGlobalCurrency",
          "maximumSealingAmountPercentage",
          "maximumSealingDurationInDays"
        ]
      },
      "GetWebParamsTenantSettingsHttpResponse": {
        "type": "object",
        "properties": {
          "logo": {
            "type": "string",
            "example": "https://tenant.env.adad.io/assets/images/logo.png",
            "description": "Logo of the tenant"
          },
          "favicon": {
            "type": "string",
            "example": "https://tenant.env.adad.io/assets/images/logo.png",
            "description": "Favicon of the tenant"
          },
          "title": {
            "type": "string",
            "example": "8x-adad",
            "description": "Tab bar title displayed for the tenant"
          }
        },
        "required": [
          "logo",
          "favicon",
          "title"
        ]
      },
      "GetInfoHttpResponse": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "example": "v14.0.0",
            "description": "app version"
          }
        },
        "required": [
          "version"
        ]
      },
      "FormOfPaymentTypeDTO": {
        "type": "object",
        "properties": {}
      },
      "ListFormOfPaymentsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JG1BPC0KKGTM3HHADTDMM",
            "description": "Form of payment ID"
          },
          "name": {
            "type": "string",
            "example": "AMEX",
            "description": "Form of payment name"
          },
          "code": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "formOfPaymentType": {
            "example": {
              "id": "01HB5NYZYQFXNBHAYTR2CY43Y8",
              "name": "Credit Card"
            },
            "description": "Form of payment type",
            "allOf": [
              {
                "$ref": "#/components/schemas/FormOfPaymentTypeDTO"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "formOfPaymentType"
        ]
      },
      "ListFormOfPaymentTypesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JG1B98GQ3P0VMKKWMCTNG",
            "description": "Form of payment type ID"
          },
          "name": {
            "type": "string",
            "example": "Credit Card",
            "description": "Form of payment Type name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "CreateFormOfPaymentHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HCAV3ZRD5K9NGYHTREXNZNVY",
            "description": "Form of payment id"
          },
          "name": {
            "type": "string",
            "example": "Visa",
            "description": "Form of payment name"
          },
          "code": {
            "type": "string",
            "example": "CCVI",
            "description": "Form of payment code"
          },
          "formOfPaymentTypeId": {
            "type": "string",
            "example": "01HCM1EYHACNFVQQ8R9E95NBXG",
            "description": "Form of payment type id"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "formOfPaymentTypeId"
        ]
      },
      "ReconciliationConsiderDTO": {
        "type": "object",
        "properties": {}
      },
      "CcBinRangeDTO": {
        "type": "object",
        "properties": {}
      },
      "SaleSourceFormOfPaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JG1D5AHV3W132VH8EMSHB",
            "description": "Datasource Form of payment ID"
          },
          "name": {
            "type": "string",
            "example": "AMEX",
            "description": "Form of payment name"
          },
          "code": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "formOfPaymentType": {
            "example": {
              "id": "01HCR7D1BEP6QX2YR82BRM544M",
              "name": "Credit Card"
            },
            "description": "Form of payment type",
            "allOf": [
              {
                "$ref": "#/components/schemas/FormOfPaymentTypeDTO"
              }
            ]
          },
          "alternateCode": {
            "type": "string",
            "example": "Amex CC",
            "description": "Datasource Form of payment alternateCode"
          },
          "consider": {
            "example": {
              "id": 1,
              "name": "YES"
            },
            "description": "Form of payment consider",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReconciliationConsiderDTO"
              }
            ]
          },
          "ccBinRange": {
            "example": {
              "start": "000100",
              "end": "000200"
            },
            "description": "CcBin range",
            "allOf": [
              {
                "$ref": "#/components/schemas/CcBinRangeDTO"
              }
            ]
          },
          "fopSubCode": {
            "type": "string",
            "example": "Apple Pay",
            "description": "Alternative method of payment code"
          },
          "alternateFopSubCode": {
            "type": "string",
            "example": "EXTAAP",
            "description": "alternate alternative method of payment code"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "formOfPaymentType",
          "alternateCode",
          "consider",
          "ccBinRange",
          "fopSubCode",
          "alternateFopSubCode"
        ]
      },
      "AssociateFormOfPaymentToAcquirerHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HCAV3ZRD5K9NGYHTREXNZNVY",
            "description": "Acquirer form of payment id"
          },
          "alternateCode": {
            "type": "string",
            "example": "Visa",
            "description": "Alternate code"
          },
          "consider": {
            "type": "number",
            "example": 1,
            "description": "Consider"
          },
          "ccBinRange": {
            "example": {
              "start": "000100",
              "end": "000200"
            },
            "description": "CcBin range",
            "allOf": [
              {
                "$ref": "#/components/schemas/CcBinRangeDTO"
              }
            ]
          },
          "fopSubCode": {
            "type": "string",
            "example": "Apple Pay",
            "description": "Alternative method of payment code"
          },
          "alternateFopSubCode": {
            "type": "string",
            "example": "EXTAAP",
            "description": "alternate alternative method of payment code"
          }
        },
        "required": [
          "id",
          "alternateCode",
          "consider",
          "ccBinRange",
          "fopSubCode",
          "alternateFopSubCode"
        ]
      },
      "AcquirerFormOfPaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01K47JG1CENPQB5W0PKPAM51QH",
            "description": "Datasource Form of payment ID"
          },
          "name": {
            "type": "string",
            "example": "AMEX",
            "description": "Form of payment name"
          },
          "code": {
            "type": "string",
            "example": "CCAX",
            "description": "Form of payment code"
          },
          "formOfPaymentType": {
            "example": {
              "id": "01HCR7D1BEP6QX2YR82BRM544M",
              "name": "Credit Card"
            },
            "description": "Form of payment type",
            "allOf": [
              {
                "$ref": "#/components/schemas/FormOfPaymentTypeDTO"
              }
            ]
          },
          "alternateCode": {
            "type": "string",
            "example": "Amex CC",
            "description": "Datasource Form of payment alternateCode"
          },
          "consider": {
            "example": {
              "id": 1,
              "name": "YES"
            },
            "description": "Form of payment consider",
            "allOf": [
              {
                "$ref": "#/components/schemas/ReconciliationConsiderDTO"
              }
            ]
          },
          "ccBinRange": {
            "example": {
              "start": "000100",
              "end": "000200"
            },
            "description": "CcBin range",
            "allOf": [
              {
                "$ref": "#/components/schemas/CcBinRangeDTO"
              }
            ]
          },
          "fopSubCode": {
            "type": "string",
            "example": "Apple Pay",
            "description": "Alternative method of payment code"
          },
          "alternateFopSubCode": {
            "type": "string",
            "example": "EXTAAP",
            "description": "alternate alternative method of payment code"
          }
        },
        "required": [
          "id",
          "name",
          "code",
          "formOfPaymentType",
          "alternateCode",
          "consider",
          "ccBinRange",
          "fopSubCode",
          "alternateFopSubCode"
        ]
      },
      "AssociateFormOfPaymentToSaleSourceHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HCAV3ZRD5K9NGYHTREXNZNVY",
            "description": "Sale source form of payment id"
          },
          "alternateCode": {
            "type": "string",
            "example": "Visa",
            "description": "Alternate code"
          },
          "consider": {
            "type": "number",
            "example": 1,
            "description": "Consider"
          },
          "ccBinRange": {
            "example": {
              "start": "000100",
              "end": "000200"
            },
            "description": "CcBin range",
            "allOf": [
              {
                "$ref": "#/components/schemas/CcBinRangeDTO"
              }
            ]
          },
          "fopSubCode": {
            "type": "string",
            "example": "Apple Pay",
            "description": "Alternative method of payment code"
          },
          "alternateFopSubCode": {
            "type": "string",
            "example": "EXTAAP",
            "description": "alternate alternative method of payment code"
          }
        },
        "required": [
          "id",
          "alternateCode",
          "consider",
          "ccBinRange",
          "fopSubCode",
          "alternateFopSubCode"
        ]
      },
      "ListReconciliationConsiderStatusResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "Reconciliation consider status id"
          },
          "name": {
            "type": "string",
            "example": "YES",
            "description": "Reconciliation consider status name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "ListAlternativeMethodOfPaymentsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "EXTAAP",
            "description": "Alternative method of payment code"
          }
        },
        "required": [
          "id"
        ]
      },
      "RescheduleSaleOnHoldDetectionHttpRequest": {
        "type": "object",
        "properties": {
          "salesOnHoldForRisDetectionFrequency": {
            "type": "string",
            "example": "0 0 8 * * *",
            "description": "Sale on hold detection frequency"
          }
        },
        "required": [
          "salesOnHoldForRisDetectionFrequency"
        ]
      },
      "GetKpiRefreshJobLastExecutionDateHttpResponse": {
        "type": "object",
        "properties": {
          "lastExecutionDate": {
            "type": "string",
            "example": "2024-11-14T09:00:00.000Z",
            "description": "The last execution date of KPI_REFRESH scheduled job"
          }
        },
        "required": [
          "lastExecutionDate"
        ]
      },
      "GetCalculateDailyTrialBalanceJobLastExecutionDateHttpResponse": {
        "type": "object",
        "properties": {
          "lastExecutionDate": {
            "type": "string",
            "example": "2024-11-14T09:00:00.000Z",
            "description": "The last execution date of CALCULATE_DAILY_TRIAL_BALANCE scheduled job"
          }
        },
        "required": [
          "lastExecutionDate"
        ]
      },
      "ListTransactionTypesByAcquirerIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HZY6M5X4WKMZ8QPHGBXJC27P",
            "description": "Datasource transaction type id"
          },
          "transactionType": {
            "type": "string",
            "example": "SETTLEMENT",
            "description": "Datasource transaction type id"
          },
          "isEligible": {
            "type": "boolean",
            "example": true,
            "description": "eligibilty of transaction type"
          },
          "effectiveDate": {
            "type": "string",
            "example": "01/12/2025",
            "description": "define the transaction would be eligible or not eligible"
          }
        },
        "required": [
          "id",
          "transactionType",
          "isEligible",
          "effectiveDate"
        ]
      },
      "ListAcquirerTransactionTypesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "transaction type id"
          },
          "name": {
            "type": "string",
            "example": "SETTLEMENT",
            "description": "type transaction name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "GetTransactionTypesBySaleSourceIdIHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HZY6M5X4WKMZ8QPHGBXJC27P",
            "description": "Datasource Transaction Type Id"
          },
          "transactionType": {
            "type": "string",
            "example": "SALE",
            "description": "Transaction Type"
          },
          "isEligible": {
            "type": "boolean",
            "example": true,
            "description": "eligibility of transaction type"
          },
          "effectiveDate": {
            "type": "string",
            "example": "01/12/2025",
            "description": "Transaction type eligibility effective date"
          }
        },
        "required": [
          "id",
          "transactionType",
          "isEligible",
          "effectiveDate"
        ]
      },
      "ListSaleSourceTransactionTypesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1,
            "description": "transaction type id"
          },
          "name": {
            "type": "string",
            "example": "SALE",
            "description": "type transaction name"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "UpdateTransactionTypeByAcquirerIdRequestHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01HZY6M5X4WKMZ8QPHGBXJC27P",
            "description": "Datasource transaction type id"
          },
          "isEligible": {
            "type": "boolean",
            "example": true,
            "description": "Is transaction type is eligible"
          },
          "effectiveDate": {
            "type": "string",
            "example": "2025-12-31T12:17:47.000Z",
            "description": "effective Date"
          }
        },
        "required": [
          "id",
          "isEligible",
          "effectiveDate"
        ]
      },
      "UpdateTransactionTypeBySaleSourceIdHttpRequest": {
        "type": "object",
        "properties": {
          "isEligible": {
            "type": "boolean",
            "example": true,
            "description": "If transaction type is eligible"
          },
          "effectiveDate": {
            "type": "string",
            "example": "2025-12-31T12:17:47.000Z",
            "description": "effective Date"
          }
        },
        "required": [
          "isEligible",
          "effectiveDate"
        ]
      },
      "CreateAcquirerTransactionTypeRequest": {
        "type": "object",
        "properties": {
          "transactionType": {
            "type": "number",
            "example": 2,
            "description": "transaction type id"
          },
          "isEligible": {
            "type": "boolean",
            "example": true,
            "description": "transaction type eligible or not"
          },
          "effectiveDate": {
            "type": "string",
            "example": "2025-12-31T12:17:47.000Z",
            "description": "effective date"
          }
        },
        "required": [
          "transactionType",
          "isEligible",
          "effectiveDate"
        ]
      },
      "CreateSaleSourceTransactionTypeRequest": {
        "type": "object",
        "properties": {
          "transactionType": {
            "type": "number",
            "example": 1,
            "description": " Transaction type id"
          },
          "isEligible": {
            "type": "boolean",
            "example": true,
            "description": "Is eligible transaction type"
          },
          "effectiveDate": {
            "type": "string",
            "example": "2025-12-31T12:17:47.000Z",
            "description": "Effective date"
          }
        },
        "required": [
          "transactionType",
          "isEligible",
          "effectiveDate"
        ]
      },
      "GetBankReconciliationSettingsResponse": {
        "type": "object",
        "properties": {
          "bankReconciliationFrequency": {
            "type": "string",
            "example": "0 0 4 * * *",
            "description": "Frequency of bank reconciliation advanced matching (example means: Every day at 4am)"
          },
          "bankReconciliationThresholdFixedAmountInGlobalCurrency": {
            "type": "number",
            "example": 0.02,
            "description": "Bank reconciliation threshold fixed amount in global currency"
          },
          "maximumSealingAmountPercentage": {
            "type": "number",
            "example": 5,
            "description": "Maximum sealing amount percentage"
          },
          "maximumSealingDurationInDays": {
            "type": "number",
            "example": 60,
            "description": "Maximum sealing duration in days"
          }
        },
        "required": [
          "bankReconciliationFrequency",
          "bankReconciliationThresholdFixedAmountInGlobalCurrency",
          "maximumSealingAmountPercentage",
          "maximumSealingDurationInDays"
        ]
      },
      "TotalPaymentOrdersAmountResponse": {
        "type": "object",
        "properties": {
          "amountInSettlementCurrency": {
            "description": "Total payment orders amount in settlement currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Total payment orders amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Total payment orders amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        },
        "required": [
          "amountInSettlementCurrency"
        ]
      },
      "TotalBankDepositsAmountResponse": {
        "type": "object",
        "properties": {
          "amountInDepositCurrency": {
            "description": "Bank deposits amount in deposit currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInAccountingCurrency": {
            "description": "Bank deposits amount in accounting currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          },
          "amountInGlobalCurrency": {
            "description": "Bank deposits amount in global currency",
            "allOf": [
              {
                "$ref": "#/components/schemas/MonetaryAmountResponse"
              }
            ]
          }
        }
      },
      "GetMatchedBankDepositsAndPaymentOrdersByMoleculeIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "moleculeId"
          },
          "bankDepositIds": {
            "example": [
              "01GBAPHTYPQAN778WB4D7K1BE6"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paymentOrderIds": {
            "example": [
              "01GBAPJ6R5BSE3XBDAG5RAPJ9P"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reconciliationStatus": {
            "type": "string",
            "example": "AMOUNT_MISMATCH",
            "description": "Molecule reconciliation status: AMOUNT_MISMATCH OR ACCEPTED"
          },
          "matchedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who manually matched the molecule. It will be set when the molecule is manually matched"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "Molecule creation date"
          },
          "updatedAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "Molecule last update date"
          },
          "matchedRuleName": {
            "type": "string",
            "example": "MANY_TO_ONE: PNR",
            "description": "Molecule matched rule name"
          },
          "differenceAmount": {
            "description": "Difference amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DifferenceAmountResponse"
              }
            ]
          },
          "matchingStatus": {
            "description": "The molecule matching status",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchingStatusResponseDto"
              }
            ]
          },
          "totalPaymentOrdersAmount": {
            "description": "Total payment orders amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalPaymentOrdersAmountResponse"
              }
            ]
          },
          "totalBankDepositsAmount": {
            "description": "Total bank deposits amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalBankDepositsAmountResponse"
              }
            ]
          },
          "discrepancyAmount": {
            "description": "Discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountResponse"
              }
            ]
          },
          "accountingAdjustmentAmount": {
            "description": "Accounting adjustment amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingAdjustmentAmountResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "bankDepositIds",
          "paymentOrderIds",
          "reconciliationStatus",
          "matchedBy",
          "createdAt",
          "updatedAt",
          "matchedRuleName",
          "differenceAmount",
          "matchingStatus"
        ]
      },
      "ListBankReconciliationResolutionAlertReasonsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Matched bank deposit and payment orders molecule alert reason id"
          },
          "cannedMessage": {
            "type": "string",
            "example": "False discrepancy",
            "description": "Canned message"
          }
        },
        "required": [
          "id",
          "cannedMessage"
        ]
      },
      "ListMatchedBankDepositsAndPaymentOrdersMoleculesHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GBAPHHYJDB3R734MN0QBVNF9",
            "description": "moleculeId"
          },
          "matchedRuleId": {
            "type": "string",
            "example": "5b2258cd-da20-4ec0-b92c-4e197681ebaa",
            "description": "matchedRuleId"
          },
          "matchedRuleName": {
            "type": "string",
            "example": "One to one by all reconciliation keys",
            "description": "matchedRuleName"
          },
          "bankDepositIds": {
            "example": [
              "01GBAPHTYPQAN778WB4D7K1BE6"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paymentOrderIds": {
            "example": [
              "01GBAPJ6R5BSE3XBDAG5RAPJ9P"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reconciliationStatus": {
            "type": "string",
            "example": "AMOUNT_MISMATCH",
            "description": "Molecule reconciliation status: AMOUNT_MISMATCH OR ACCEPTED"
          },
          "matchedBy": {
            "type": "string",
            "example": "user name",
            "description": "The user who manually matched the molecule. It will be set when the molecule is manually matched"
          },
          "resolvedBy": {
            "type": "string",
            "example": "user name"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-24T17:43:15.970Z",
            "description": "Molecule creation date"
          },
          "differenceAmount": {
            "description": "Difference amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DifferenceAmountResponse"
              }
            ]
          },
          "maximumSealingDate": {
            "type": "string",
            "description": "Maximum sealing date of the molecule, calculated only when molecule matching status is partial"
          },
          "matchingStatus": {
            "description": "matching status",
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchingStatusResponseDto"
              }
            ]
          },
          "totalBankDepositsAmount": {
            "description": "Total bank deposits amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalBankDepositsAmountResponse"
              }
            ]
          },
          "totalPaymentOrdersAmount": {
            "description": "Total payment orders amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/TotalPaymentOrdersAmountResponse"
              }
            ]
          },
          "discrepancyAmount": {
            "description": "Discrepancy amount",
            "allOf": [
              {
                "$ref": "#/components/schemas/DiscrepancyAmountResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "matchedRuleId",
          "matchedRuleName",
          "bankDepositIds",
          "paymentOrderIds",
          "reconciliationStatus",
          "matchedBy",
          "resolvedBy",
          "createdAt",
          "differenceAmount",
          "maximumSealingDate",
          "matchingStatus",
          "totalBankDepositsAmount",
          "totalPaymentOrdersAmount"
        ]
      },
      "MatchManuallyBankDepositsAndPaymentOrdersRequest": {
        "type": "object",
        "properties": {
          "bankDepositIds": {
            "example": [
              "01K47JG21JVJ8020425MYF7NKC",
              "01K47JG21JV1KQZC9K6PFH1RZ9"
            ],
            "description": "Bank deposit ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "paymentOrderIds": {
            "example": [
              "01K47JG21J5R87VWP4V69SQAD6",
              "01K47JG21JP57NQSXHT82RVPTY"
            ],
            "description": "Payment orders ids",
            "type": "array",
            "items": {
              "type": "array"
            }
          }
        },
        "required": [
          "bankDepositIds",
          "paymentOrderIds"
        ]
      },
      "RescheduleBankReconciliationHttpRequest": {
        "type": "object",
        "properties": {
          "bankReconciliationFrequency": {
            "type": "string",
            "example": "0 0 8 * * *",
            "description": "Bank reconciliation frequency"
          }
        },
        "required": [
          "bankReconciliationFrequency"
        ]
      },
      "ResolveMatchedBankDepositsAndPaymentOrdersMoleculeHttpRequest": {
        "type": "object",
        "properties": {
          "resolutionReasonId": {
            "type": "string",
            "example": "REASON_CODE_SURPLUS_THD4",
            "description": "Matched bank deposits and payment orders molecule resolution alert reason id"
          }
        }
      },
      "ListBankReconciliationKeysHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "AIRLINE",
            "description": "Bank Reconciliation Key"
          },
          "cannedMessage": {
            "type": "string",
            "example": "Airline"
          }
        },
        "required": [
          "id",
          "cannedMessage"
        ]
      },
      "GetBankReconciliationMatchingStackByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GQES1HY2V25Q7XHGSTMBGM4X",
            "description": "Bank reconciliation matching stack id"
          },
          "name": {
            "type": "string",
            "example": "V1",
            "description": "Bank reconciliation matching stack name"
          },
          "status": {
            "type": "string",
            "example": "Active",
            "description": "Bank reconciliation matching stack status"
          },
          "ruleIds": {
            "example": [
              "3cd10d6e-ed8a-4a04-9f91-cd23503bd556"
            ],
            "description": "Bank reconciliation matching stack rule ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "example": "2022-08-08T09:00:00.000Z",
            "description": "Bank reconciliation matching stack creation date"
          },
          "createdBy": {
            "type": "string",
            "example": "Toni",
            "description": "User who created the bank reconciliation matching stack"
          },
          "lastModifiedAt": {
            "type": "string",
            "example": "2022-09-09T10:00:00.000Z",
            "description": "Bank reconciliation matching stack last modified date"
          },
          "lastModifiedBy": {
            "type": "string",
            "example": "Marian",
            "description": "Last user who modified the bank reconciliation matching stack"
          },
          "activatedAt": {
            "type": "string",
            "example": "2022-10-10T11:00:00.000Z",
            "description": "Bank reconciliation matching stack activation date"
          },
          "activatedBy": {
            "type": "string",
            "example": "Pierce",
            "description": "User who activated the bank reconciliation matching stack"
          },
          "activationRequestedAt": {
            "type": "string",
            "example": "2022-11-11T12:00:00.000Z",
            "description": "Date of the request to activate the bank reconciliation matching stack"
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "ruleIds",
          "createdAt",
          "createdBy",
          "lastModifiedAt",
          "lastModifiedBy",
          "activatedAt",
          "activatedBy",
          "activationRequestedAt"
        ]
      },
      "AcquirerConditionResponse": {
        "type": "object",
        "properties": {
          "isApplicable": {
            "type": "boolean",
            "description": "True, when acquirer condition is applicable"
          },
          "values": {
            "description": "Values",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "isApplicable",
          "values"
        ]
      },
      "GetBankReconciliationMatchingRuleByIdHttpResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "01GQES1HY2V25Q7XHGSTMBGM4X",
            "description": "Bank reconciliation matching rule id"
          },
          "name": {
            "type": "string",
            "example": "Name",
            "description": "Bank reconciliation matching rule name"
          },
          "reconciliationKeys": {
            "example": [
              "PAYMENT_ORDER_BANK_DEPOSIT_ASSOCIATION_KEY"
            ],
            "description": "Reconciliation keys used in bank reconciliation matching rule",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkType": {
            "type": "string",
            "example": "MANY_TO_ONE",
            "description": "Bank reconciliation matching rule link type"
          },
          "dateRangeInSeconds": {
            "type": "number",
            "example": 360000,
            "description": "Date range in seconds"
          },
          "acquirerCondition": {
            "description": "If acquirer condition is applicable or not for this rule",
            "allOf": [
              {
                "$ref": "#/components/schemas/AcquirerConditionResponse"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "reconciliationKeys",
          "linkType",
          "dateRangeInSeconds",
          "acquirerCondition"
        ]
      },
      "ActivateBankReconciliationMatchingStackRequest": {
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "example": "2025-09-03T10:38:26.013Z",
            "description": "Activation effective date"
          }
        },
        "required": [
          "effectiveDate"
        ]
      },
      "CreateBankReconciliationMatchingRuleHttpRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "5ec5158e-c94e-4d75-bb08-c8d4b847eab1",
            "description": "matching rule id"
          },
          "name": {
            "type": "string",
            "example": "Name",
            "description": "Matching rule name"
          },
          "reconciliationKeys": {
            "example": [
              "BANK_DEPOSIT_REFERENCE"
            ],
            "description": "Reconciliation keys",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "linkType": {
            "type": "string",
            "example": "ONE_TO_MANY",
            "description": "Link type"
          },
          "dateRangeInSeconds": {
            "type": "number",
            "example": 360000,
            "description": "Maximum period duration between matched items expressed in seconds"
          },
          "acquirerCondition": {
            "example": {
              "isApplicable": false,
              "values": []
            },
            "description": "Indicates whether the matching rule applies to specific acquirers. If `isApplicable` is `false`, the rule applies to all acquirers without restriction.",
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleConditionDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "reconciliationKeys",
          "linkType",
          "dateRangeInSeconds",
          "acquirerCondition"
        ]
      },
      "ChangeBankReconciliationMatchingStackHttpRequest": {
        "type": "object",
        "properties": {
          "ruleIds": {
            "description": "New rule Ids to update the matching stack with",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ruleIds"
        ]
      }
    }
  }
}
